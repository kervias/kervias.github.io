<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Caddy安装和常用命令</title>
    <url>/posts/d392dh/</url>
    <content><![CDATA[<blockquote>
<p>记录Caddy的相关内容</p>
</blockquote>
<span id="more"></span>
<p><code>实验环境</code>：Centos7</p>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install epel-release <span class="comment">#添加源</span></span><br><span class="line">yum -y install caddy</span><br></pre></td></tr></table></figure>

<h3 id="ubuntu16-04"><a href="#ubuntu16-04" class="headerlink" title="ubuntu16.04+"></a>ubuntu16.04+</h3><ul>
<li>安装和配置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://getcaddy.com | bash</span><br><span class="line">sudo mkdir /etc/caddy</span><br><span class="line">sudo chown -R root:www-data /etc/caddy</span><br><span class="line">sudo mkdir /etc/ssl/caddy</span><br><span class="line">sudo chown -R www-data:root /etc/ssl/caddy</span><br><span class="line">sudo chmod 0770 /etc/ssl/caddy</span><br><span class="line">sudo touch /etc/caddy/Caddyfile</span><br><span class="line">sudo mkdir /var/www</span><br><span class="line">sudo chown www-data: /var/www</span><br></pre></td></tr></table></figure></li>
<li>添加caddy到service<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /lib/systemd/system/caddy.service</span><br></pre></td></tr></table></figure>
用vim将下面内容写入到文件中<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Caddy HTTP/<span class="number">2</span> web server</span><br><span class="line"><span class="attr">Documentation</span>=https://caddyserver.com/docs</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">Wants</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">StartLimitInterval</span>=<span class="number">86400</span></span><br><span class="line"><span class="attr">StartLimitBurst</span>=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">User</span>=www-data</span><br><span class="line"><span class="attr">Group</span>=www-data</span><br><span class="line"><span class="comment">; Letsencrypt-issued certificates will be written to this directory.</span></span><br><span class="line"><span class="attr">Environment</span>=CADDYPATH=/etc/ssl/caddy</span><br><span class="line"></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/caddy -log stdout -agree=<span class="literal">true</span> -conf=/etc/caddy/Caddyfile -root=/var/tmp</span><br><span class="line"><span class="attr">ExecReload</span>=/bin/kill -USR1 <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">1048576</span></span><br><span class="line"><span class="attr">LimitNPROC</span>=<span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">PrivateDevices</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ProtectHome</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ProtectSystem</span>=full</span><br><span class="line"><span class="attr">ReadWriteDirectories</span>=/etc/ssl/caddy</span><br><span class="line"></span><br><span class="line"><span class="comment">; The following additional security directives only work with systemd v229 or later.</span></span><br><span class="line"><span class="comment">; They further retrict privileges that can be gained by caddy. Uncomment if you like.</span></span><br><span class="line"><span class="comment">; Note that you may have to add capabilities required by any plugins in use.</span></span><br><span class="line"><span class="comment">;CapabilityBoundingSet=CAP_NET_BIND_SERVICE</span></span><br><span class="line"><span class="comment">;AmbientCapabilities=CAP_NET_BIND_SERVICE</span></span><br><span class="line"><span class="comment">;NoNewPrivileges=true</span></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-配置文件默认路径"><a href="#2-配置文件默认路径" class="headerlink" title="2. 配置文件默认路径"></a>2. 配置文件默认路径</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>caddy<span class="regexp">/conf.d/</span>Caddyfile.conf</span><br></pre></td></tr></table></figure>

<h2 id="3-配置文件格式模板"><a href="#3-配置文件格式模板" class="headerlink" title="3.配置文件格式模板"></a>3.配置文件格式模板</h2><ul>
<li>注意符号后面含有<code>空格</code></li>
<li>以下配置主要支持在本地某个端口含有服务，将端口与域名映射起来</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">http<span class="variable">s:</span>//blog.xxx.xx &#123;</span><br><span class="line"> gzip</span><br><span class="line"> tls xxx@gmail.<span class="keyword">com</span></span><br><span class="line"> proxy / localhos<span class="variable">t:2888</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ol>
<li>注意网址替换为自己的网址</li>
<li>邮箱是用于SSL证书注册邮箱</li>
<li>2888为端口号，需要替换为服务对应的端口号</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>命令总结</tag>
        <tag>caddy</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7使用rclone挂载谷歌团队盘</title>
    <url>/posts/45226759/</url>
    <content><![CDATA[<blockquote>
<p>国外服务器文件上传和下载有时很慢，本地与服务器直接传输文件效率很低，这里通过将国外云盘作为中转的方式包含很多优点。</p>
</blockquote>
<span id="more"></span>
<p>主要优势如下：</p>
<ul>
<li>国外服务器与国外云盘之间文件传输效率高</li>
<li>本地与国外云盘之间文件传输可以通过xx工具提高下载速度</li>
<li>大容量云盘可以存储大量数据（谷歌团队盘有1PB空间）</li>
</ul>
<p>首先非常感谢参考博客：<a href="https://omo.moe/archives/103/">https://omo.moe/archives/103/</a></p>
<h2 id="安装环境配置"><a href="#安装环境配置" class="headerlink" title="安装环境配置"></a>安装环境配置</h2><p>在服务器执行以下命令，安装环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install wget unzip screen fuse fuse-devel</span><br><span class="line">wget https://downloads.rclone.org/rclone-current-linux-amd64.zip</span><br><span class="line">unzip rclone-current-linux-amd64.zip</span><br><span class="line">chmod 0755 ./rclone-*/rclone</span><br><span class="line">cp ./rclone-*/rclone /usr/bin/</span><br><span class="line">rm -rf ./rclone-*</span><br></pre></td></tr></table></figure>

<h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><p>执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure>

<p>如下图，name为最后挂载的盘名。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/20200401105136.png"></p>
<p>如下图，可以看到可以选择各种网盘进行挂载，这里选择第13个<code>google drive</code>(具体序号需联系实际)</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/20200401105448.png"></p>
<p>如下图，配置<code>权限</code>等功能，主要看英文介绍，图中空白处直接按确认选择默认</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/20200401105741.png"></p>
<p>如下图，将链接复制到浏览器打开，获取<code>认证码</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/20200401110051.png"></p>
<p>选择Team Drive的编号，最后退出</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/20200401110457.png"></p>
<h2 id="挂载云盘"><a href="#挂载云盘" class="headerlink" title="挂载云盘"></a>挂载云盘</h2><ul>
<li><p>在服务器创建目录，用于目录映射</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /root/Gdrive</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入以下命令，需要注意参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rclone mount wellod:folder /root/Gdrive --allow-other --allow-non-empty --vfs-cache-mode writes &amp;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>wellod:floder</code>：wellod为第一步中输入的name, folder为云盘中的文件夹名</li>
<li><code>/root/Gdrive</code>：服务器相对于云盘的映射地址</li>
</ol>
</li>
<li><p>查看挂载是否成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/20200401111343.png"></p>
<p>成功就如上图所示。</p>
</li>
<li><p>文件上传和下载</p>
<p>使用<code>cp</code>命令即可，也可以使用<code>rclone copy</code>等命令操作。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Cron表达式</title>
    <url>/posts/6a1ed024/</url>
    <content><![CDATA[<blockquote>
<p>Cron表达式可以用作定时任务，Linux也有相应的功能。定时任务可以按照设定，以一定间隔自动完成指定动作，比如半夜清理过期数据，每周一向所有用户发送推送消息等等。定时任务的最小时间单位是 <strong>秒</strong>，正常情况下时间误差都可以控制在秒级别。</p>
</blockquote>
<span id="more"></span>
<h1 id="Cron-表达式"><a href="#Cron-表达式" class="headerlink" title="Cron 表达式"></a>Cron 表达式</h1><p>Cron 表达式的基本语法为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;秒&gt;</span> <span class="section">&lt;分钟&gt;</span> <span class="section">&lt;小时&gt;</span> <span class="section">&lt;日期 day-of-month&gt;</span> <span class="section">&lt;月份&gt;</span> <span class="section">&lt;星期 day-of-week&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">位置</th>
<th align="center">字段</th>
<th align="center">约束</th>
<th align="center">取值</th>
<th align="center">可使用的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">秒</td>
<td align="center">必须</td>
<td align="center">0-59</td>
<td align="center"><code>, - * /</code></td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">分钟</td>
<td align="center">必须</td>
<td align="center">0-59</td>
<td align="center"><code>, - * /</code></td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">小时</td>
<td align="center">必须</td>
<td align="center">0-23（0 为午夜）</td>
<td align="center"><code>, - * /</code></td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">日期</td>
<td align="center">必须</td>
<td align="center">1-31</td>
<td align="center"><code>, - * ? /</code></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">月份</td>
<td align="center">必须</td>
<td align="center">1-12、JAN-DEC</td>
<td align="center"><code>, - * /</code></td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">星期</td>
<td align="center">必须</td>
<td align="center">1-7、SUN-SAT</td>
<td align="center"><code>, - ? /</code></td>
</tr>
</tbody></table>
<p>特殊字符的用法：</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">含义</th>
<th align="center">用法</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>*</code></td>
<td align="center">所有值</td>
<td align="center">代表一个字段的所有可能取值。如将 <code>&lt;分钟&gt;</code> 设为 <code>*</code>，表示每一分钟。</td>
</tr>
<tr>
<td align="center"><code>?</code></td>
<td align="center">不指定值</td>
<td align="center">用于可以使用该字符的两个字段中的一个，在一个表达式中只能出现一次。如任务执行时间为每月 10 号，星期几无所谓，那么表达式中 <code>&lt;日期&gt;</code> 设为 <code>10</code>，<code>&lt;星期&gt;</code> 设为 <code>?</code>。</td>
</tr>
<tr>
<td align="center"><code>-</code></td>
<td align="center">范围</td>
<td align="center">如 <code>&lt;小时&gt;</code> 为 <code>10-12</code>，即 10 点、11 点、12 点。</td>
</tr>
<tr>
<td align="center"><code>,</code></td>
<td align="center">分隔多个值</td>
<td align="center">如 <code>&lt;星期&gt;</code> 为 <code>MON,WED,FRI</code>，即周一、周三、周五。</td>
</tr>
<tr>
<td align="center"><code>/</code></td>
<td align="center">增量</td>
<td align="center">如 <code>&lt;秒&gt;</code> 设为 <code>0/15</code>，即从 0 秒开始，以 15 秒为增量，包括 0、15、30、45 秒；<code>5/15</code> 即 5、20、35、50 秒。<code>*/</code> 与 <code>0/</code> 等效，如 <code>&lt;日期&gt;</code> 设为 <code>1/3</code>，即从每个月的第一天开始，每 3 天（即每隔 2 天）执行一次任务。</td>
</tr>
</tbody></table>
<p>各字段以空格或空白隔开。<code>JAN-DEC</code>、<code>SUN-SAT</code>这些值不区分大小写，比如 <code>MON</code> 和 <code>mon</code> 效果一样。</p>
<p>举例如下：</p>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>0 */5 * * * ?</code></td>
<td align="center">每隔 5 分钟执行一次。</td>
</tr>
<tr>
<td align="center"><code>10 */5 * * * ?</code></td>
<td align="center">每隔 5 分钟执行一次，每次执行都在分钟开始的 10 秒，例如 10:00:10、10:05:10 等等。</td>
</tr>
<tr>
<td align="center"><code>0 30 10-13 ? * WED,FRI</code></td>
<td align="center">每周三和每周五的 10:30、11:30、12:30、13:30 执行。</td>
</tr>
<tr>
<td align="center"><code>0 */30 8-9 5,20 * ?</code></td>
<td align="center">每个月的 5 号和 20 号的 8 点和 10 点之间每隔 30 分钟执行一次，也就是 8:00、8:30、9:00 和 9:30。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>CentOS 7安装fail2ban+Firewall防止SSH爆破与CC攻击</title>
    <url>/posts/191dc2a0/</url>
    <content><![CDATA[<blockquote>
<p>转载自：<a href="https://www.hosteacher.com/server-centos7-install-fail2ban.html">文章</a></p>
</blockquote>
<span id="more"></span>
<p><strong>说明</strong>：差不多很多博主都会遇到被<code>CC</code>攻击和<code>SSH</code>爆破的情况，这个时候就需要做下防御措施了，对于<code>CentOS 7</code>来说，由于防火墙的因素，配置起来还是有点麻烦的，这里针对<code>CentOS 7</code>再分享个简单防<code>CC</code>攻击和<code>SSH</code>爆破的方法。<a href="https://www.hosteacher.com/linux-centos7-firewall.html">Linux安全-CentOS 7开放设置端口及firewall常用命令介绍</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>fail2ban</code>可以监视你的系统日志，然后匹配日志的错误信息执行相应的屏蔽动作。网上大部分教程都是关于<code>fail2ban</code>+<code>iptables</code>组合，考虑到<code>CentOS 7</code>已经自带<code>Firewalld</code>，所以这里我们也可以利用<code>fail2ban</code>+<code>Firewalld</code>来防<code>CC</code>攻击和<code>SSH</code>爆破。</p>
<p>本教程编辑文件使用<code>vi</code>命令，如果不会用的，可以使使用<code>FTP</code>工具，如<code>WinSCP</code>登录<code>VPS</code>操作。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong>1、检查Firewalld是否启用</strong></p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#如果您已经安装iptables建议先关闭</span></span><br><span class="line">service iptables stop</span><br><span class="line"><span class="meta">#查看Firewalld状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="meta">#启动firewalld</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"><span class="meta">#设置开机启动</span></span><br><span class="line">systemctl enable firewalld.service</span><br></pre></td></tr></table></figure>

<p>启用<code>Firewalld</code>后会禁止所有端口连接，因此请务必放行常用的端口，以免被阻挡在外，以下是放行<code>SSH</code>端口（<code>22</code>）示例，供参考：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment">#放行22端口</span></span><br><span class="line">firewall-cmd <span class="params">--zone=public</span> <span class="params">--add-port=80/tcp</span> <span class="params">--permanent</span></span><br><span class="line"><span class="comment">#重载配置</span></span><br><span class="line">firewall-cmd <span class="params">--reload</span></span><br><span class="line"><span class="comment">#查看已放行端口</span></span><br><span class="line">firewall-cmd <span class="params">--zone=public</span> <span class="params">--list-ports</span></span><br></pre></td></tr></table></figure>

<p><strong>2、安装fail2ban</strong><br><code>fail2ban</code>可以监控系统日志，并且根据一定规则匹配异常<code>IP</code>后使用<code>Firewalld</code>将其屏蔽，尤其是针对一些爆破/扫描等非常有效。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#CentOS内置源并未包含fail2ban，需要先安装epel源</span></span><br><span class="line">yum -y <span class="keyword">install</span> epel-release</span><br><span class="line"><span class="comment">#安装fial2ban</span></span><br><span class="line">yum -y <span class="keyword">install</span> fail2ban</span><br></pre></td></tr></table></figure>

<p>安装成功后<code>fail2ban</code>配置文件位于<code>/etc/fail2ban</code>，其中<code>jail.conf</code>为主配置文件，相关的匹配规则位于<code>filter.d</code>目录，其它目录/文件一般很少用到，如果需要详细了解可自行搜索。</p>
<p><strong>3、配置规则</strong><br>新建<code>jail.local</code>来覆盖<code>fail2ban</code>的一些默认规则：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新建配置</span></span><br><span class="line">vi /etc/fail2ban/jail.local</span><br><span class="line"><span class="comment">#默认配置</span></span><br><span class="line">[DEFAULT]</span><br><span class="line">ignoreip = 127.0.0.1/8</span><br><span class="line">bantime  = 86400</span><br><span class="line">findtime = 600</span><br><span class="line">maxretry = 5</span><br><span class="line"><span class="comment">#这里banaction必须用firewallcmd-ipset,这是fiewalll支持的关键，如果是用Iptables请不要这样填写</span></span><br><span class="line">banaction = firewallcmd-ipset</span><br><span class="line">action = %(action_mwl)s</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">ignoreip</span>：<span class="built_in">IP</span>白名单，白名单中的<span class="built_in">IP</span>不会屏蔽，可填写多个以（,）分隔</span><br><span class="line"><span class="symbol">bantime</span>：屏蔽时间，单位为秒（s）</span><br><span class="line"><span class="symbol">findtime</span>：时间范围</span><br><span class="line"><span class="symbol">maxretry</span>：最大次数</span><br><span class="line"><span class="symbol">banaction</span>：屏蔽<span class="built_in">IP</span>所使用的方法，上面使用firewalld屏蔽端口</span><br></pre></td></tr></table></figure>

<h2 id="防止SSH爆破"><a href="#防止SSH爆破" class="headerlink" title="防止SSH爆破"></a>防止SSH爆破</h2><p>如果您还在使用默认<code>SSH</code>端口（<code>22</code>），可能每天都会被扫描，我们可以修改端口尽量避免被扫，参考：<a href="https://www.hosteacher.com/linux-modify-ssh-port.html">Linux安全-修改VPS默认SSH端口</a>，或者可以使用<code>fail2ban</code>将恶意<code>IP</code>屏蔽。</p>
<p>继续修改<code>jail.local</code>这个配置文件，在后面追加如下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[sshd]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">filter</span>  = sshd</span><br><span class="line"><span class="attr">port</span>    = <span class="number">22</span></span><br><span class="line"><span class="attr">action</span> = %(action_mwl)s</span><br><span class="line"><span class="attr">logpath</span> = /var/log/secure</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[sshd]</span>：名称，可以随便填写</span><br><span class="line"><span class="attribute">filter</span>：规则名称，必须填写位于<span class="attribute">filter</span><span class="selector-class">.d</span>目录里面的规则，sshd是fail2ban内置规则</span><br><span class="line">port：对应的端口</span><br><span class="line">action：采取的行动</span><br><span class="line">logpath：需要监视的日志路径</span><br></pre></td></tr></table></figure>

<p>到这一步，我们<code>jail.local</code>的规则看起来可能像下面这样子：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">ignoreip</span> = <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span></span><br><span class="line"><span class="attr">bantime</span>  = <span class="number">86400</span></span><br><span class="line"><span class="attr">findtime</span> = <span class="number">600</span></span><br><span class="line"><span class="attr">maxretry</span> = <span class="number">5</span></span><br><span class="line"><span class="attr">banaction</span> = firewallcmd-ipset</span><br><span class="line"><span class="attr">action</span> = %(action_mwl)s</span><br><span class="line"></span><br><span class="line"><span class="section">[sshd]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">filter</span>  = sshd</span><br><span class="line"><span class="attr">port</span>    = <span class="number">22</span></span><br><span class="line"><span class="attr">action</span> = %(action_mwl)s</span><br><span class="line"><span class="attr">logpath</span> = /var/log/secure</span><br></pre></td></tr></table></figure>

<p>上面的配置意思是如果同一个<code>IP</code>，在<code>10</code>分钟内，如果连续超过<code>5</code>次错误，则使用<code>Firewalld</code>将他<code>IP ban</code>了。输入<code>systemctl start fail2ban</code>启动<code>fail2ban</code>来试试效果。</p>
<p>使用另一台服务器不断尝试连接<code>SSH</code>，并且不断的将密码输入错误，你会发现连续超过<code>5</code>次后直接连不上，说明<code>IP</code>被<code>ban</code>了，可以输入：<code>fail2ban-client status sshd</code>查看被<code>ban</code>的<code>IP</code></p>
<h2 id="防止CC攻击"><a href="#防止CC攻击" class="headerlink" title="防止CC攻击"></a>防止CC攻击</h2><p>这里仅以<code>Nginx</code>为例，使用<code>fail2ban</code>来监视<code>nginx</code>日志，匹配短时间内频繁请求的<code>IP</code>，并使用<code>firewalld</code>将其<code>IP</code>屏蔽，达到<code>CC</code>防护的作用。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">vi <span class="regexp">/etc/</span>fail2ban<span class="regexp">/filter.d/</span>nginx-cc.conf</span><br><span class="line"></span><br><span class="line">[Definition]</span><br><span class="line">failregex =  -.*- .*HTTP/<span class="number">1</span>.* .* .*$</span><br><span class="line">ignoreregex =</span><br></pre></td></tr></table></figure>

<p>继续修改<code>jail.local</code>追加如下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[nginx-cc]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">port</span> = http,https</span><br><span class="line"><span class="attr">filter</span> = nginx-cc</span><br><span class="line"><span class="attr">action</span> = %(action_mwl)s</span><br><span class="line"><span class="attr">maxretry</span> = <span class="number">20</span></span><br><span class="line"><span class="attr">findtime</span> = <span class="number">60</span></span><br><span class="line"><span class="attr">bantime</span> = <span class="number">3600</span></span><br><span class="line"><span class="attr">logpath</span> = /usr/local/nginx/logs/access.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的配置意思是如果在<code>60s</code>内，同一<code>IP</code>达到<code>20</code>次请求，则将其<code>IP ban 1</code>小时，上面只是为了测试，请根据自己的实际情况修改。<code>logpath</code>为<code>nginx</code>日志路径。</p>
<h2 id="防止Wordpress爆破"><a href="#防止Wordpress爆破" class="headerlink" title="防止Wordpress爆破"></a>防止Wordpress爆破</h2><p>如果您经常分析日志会发现有大量机器人在扫描<code>wordpress</code>登录页面<code>wp-login.php</code>，虽然对方可能没成功，但是为了避免万一还是将他<code>IP</code>干掉为好。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">vi</span> /etc/fail2ban/<span class="built_in">filter</span>.d/wordpress.<span class="keyword">conf</span></span><br><span class="line"></span><br><span class="line">[Definition]</span><br><span class="line">failregex = ^ -.* /<span class="keyword">wp</span>-login.php.* HTTP/<span class="number">1</span>\..<span class="comment">&quot;</span></span><br><span class="line">ignoreregex =</span><br></pre></td></tr></table></figure>

<p>继续修改<code>jail.local</code>追加如下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[wordpress]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">port</span> = http,https</span><br><span class="line"><span class="attr">filter</span> = wordpress</span><br><span class="line"><span class="attr">action</span> = %(action_mwl)s</span><br><span class="line"><span class="attr">maxretry</span> = <span class="number">20</span></span><br><span class="line"><span class="attr">findtime</span> = <span class="number">60</span></span><br><span class="line"><span class="attr">bantime</span> = <span class="number">3600</span></span><br><span class="line"><span class="attr">logpath</span> = /usr/local/nginx/logs/access.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然，别忘记输入<code>systemctl restart fail2ban</code>重启<code>fail2ban</code>使其生效。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#启动</span></span><br><span class="line">systemctl start fail2ban</span><br><span class="line"><span class="meta">#停止</span></span><br><span class="line">systemctl stop fail2ban</span><br><span class="line"><span class="meta">#开机启动</span></span><br><span class="line">systemctl enable fail2ban</span><br><span class="line"><span class="meta">#查看被ban IP，其中sshd为名称，比如上面的[wordpress]</span></span><br><span class="line">fail2ban-client status sshd</span><br><span class="line"><span class="meta">#删除被ban IP</span></span><br><span class="line">fail2ban-client <span class="keyword">set</span> sshd delignoreip <span class="number">192.168</span><span class="number">.111</span><span class="number">.111</span></span><br><span class="line"><span class="meta">#查看日志</span></span><br><span class="line">tail /<span class="keyword">var</span>/log/fail2ban.log</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>fail2ban</code>已经内置很多匹配规则，位于<code>filter.d</code>目录下，包含了常见的<code>SSH/FTP/Nginx/Apache</code>等日志匹配，如果都还无法满足您的需求，您也可以自行新建规则来匹配异常<code>IP</code>。使用<code>fail2ban</code>+<code>Firewalld</code>来阻止恶意<code>IP</code>是行之有效的办法，可极大提高服务器安全。</p>
<hr>
<h2 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h2><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415171736.png"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Halo博客H2数据库查询</title>
    <url>/posts/2d3051dc/</url>
    <content><![CDATA[<blockquote>
<p>记录一下Halo博客中如何操作H2数据库。</p>
</blockquote>
<span id="more"></span>
<h1 id="0-Halo博客数据库文件路径"><a href="#0-Halo博客数据库文件路径" class="headerlink" title="0. Halo博客数据库文件路径"></a>0. Halo博客数据库文件路径</h1><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162738.png"></p>
<h1 id="1-使用Halo提供的h2-console"><a href="#1-使用Halo提供的h2-console" class="headerlink" title="1. 使用Halo提供的h2-console"></a>1. 使用Halo提供的h2-console</h1><h2 id="1-1-打开h2-console功能"><a href="#1-1-打开h2-console功能" class="headerlink" title="1.1 打开h2-console功能"></a>1.1 打开h2-console功能</h2><pre><code> 修改Halo博客的配置文件(~/.halo/application.yaml)，具体如下图
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162751.png"></p>
<pre>
1. 将false改为true
2. 设置完毕后重启容器
</pre>
<h2 id="1-2-访问网址"><a href="#1-2-访问网址" class="headerlink" title="1.2 访问网址"></a>1.2 访问网址</h2><pre><code> 网址：博客域名/h2-console
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162807.png"></p>
<p>需要注意一下<code>JDBC URL</code>的填写，用户名和密码在配置文件中已有说明</p>
<h2 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> MENUS </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162838.png"></p>
<h1 id="2-在本地主机上使用数据库可视化工具"><a href="#2-在本地主机上使用数据库可视化工具" class="headerlink" title="2. 在本地主机上使用数据库可视化工具"></a>2. 在本地主机上使用数据库可视化工具</h1><blockquote>
<p>在使用jdbc驱动版本选择时有坑，下面本人提供了一个版本，测试可用</p>
</blockquote>
<h2 id="2-1-工具介绍"><a href="#2-1-工具介绍" class="headerlink" title="2.1 工具介绍"></a>2.1 工具介绍</h2><pre><code>DBeaver 6.3.3(网址：https://dbeaver.io/)
</code></pre>
<h2 id="2-2-jdbc驱动jar包"><a href="#2-2-jdbc驱动jar包" class="headerlink" title="2.2 jdbc驱动jar包"></a>2.2 jdbc驱动jar包</h2><pre><code>下载下来，后面需要用到
</code></pre>
<p>/upload/2020/1/h2-2019-03-13-d5148978df7745808925f6f2ec3671b8.zip</p>
<h2 id="2-3-创建数据库连接"><a href="#2-3-创建数据库连接" class="headerlink" title="2.3 创建数据库连接"></a>2.3 创建数据库连接</h2><ul>
<li>新建数据库连接</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162902.png"></p>
<ul>
<li><p>选择H2 embedded<br><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162924.png"></p>
</li>
<li><p>选择db文件<br><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162943.png"></p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415163001.png"></p>
<p><strong>注意将后面的.mv.db删除掉</strong><br>用户名和密码就是配置文件中的H2用户名和密码</p>
<h2 id="2-6-编辑驱动设置"><a href="#2-6-编辑驱动设置" class="headerlink" title="2.6 编辑驱动设置"></a>2.6 编辑驱动设置</h2><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415163038.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415163114.png"></p>
<h2 id="2-5-连接"><a href="#2-5-连接" class="headerlink" title="2.5 连接"></a>2.5 连接</h2><p>创建连接完毕后，连接数据库<br>可以看出Public中的存在的表<br><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415163139.png"></p>
<h2 id="2-6-测试"><a href="#2-6-测试" class="headerlink" title="2.6 测试"></a>2.6 测试</h2><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415163152.png"></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>halo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令总结</title>
    <url>/posts/dwqdwq/</url>
    <content><![CDATA[<blockquote>
<p> 参考网上诸多教程，把GIT的一些常用命令记录下来, 方便查看.</p>
</blockquote>
<span id="more"></span>
<h2 id="GIT配置命令"><a href="#GIT配置命令" class="headerlink" title="GIT配置命令"></a>GIT配置命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;bryan sun&quot;</span><br><span class="line">git config --global user.email &quot;hitsjt@gmail.com&quot;</span><br><span class="line">git config --list  # 查看配置信息(包括用户名和邮箱)</span><br><span class="line">git branch  # 查看本地分支</span><br></pre></td></tr></table></figure>

<h2 id="GIT推送命令"><a href="#GIT推送命令" class="headerlink" title="GIT推送命令"></a>GIT推送命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;commit&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h2 id="Git删除所有commit记录"><a href="#Git删除所有commit记录" class="headerlink" title="Git删除所有commit记录"></a>Git删除所有commit记录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout --orphan latest_branch</span><br><span class="line">git add -A</span><br><span class="line">git commit -am &quot;first commit&quot;</span><br><span class="line">git branch -D master</span><br><span class="line">git branch -m master</span><br><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure>

<h2 id="Git-remote"><a href="#Git-remote" class="headerlink" title="Git remote"></a>Git remote</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v # 查看所有远程仓库</span><br><span class="line">git remote show [远程仓库名] # 详细查看某个远程仓库</span><br><span class="line">git remote add [远程仓库名] [远程仓库地址] # 添加远程仓库</span><br><span class="line">git remote remove [远程仓库名] # 移除某个远程仓库</span><br><span class="line">git remote rename [现在的仓库名] [新的仓库名] # 重命名某个远程仓库</span><br><span class="line">git remote rm [远程仓库名]</span><br></pre></td></tr></table></figure>

<h2 id="Git-Proxy"><a href="#Git-Proxy" class="headerlink" title="Git Proxy"></a>Git Proxy</h2><h3 id="Http和Https代理"><a href="#Http和Https代理" class="headerlink" title="Http和Https代理"></a>Http和Https代理</h3><ul>
<li><p>http类型代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">&#x27;http://127.0.0.1:1081&#x27;</span></span><br><span class="line">git config --global https.proxy <span class="string">&#x27;http://127.0.0.1:1081&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>socks5类型代理  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br><span class="line">git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>分域名代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.https://github.com.proxy http://127.0.0.1:1081</span><br><span class="line">git config --global https.https://github.com.proxy https://127.0.0.1:1081</span><br></pre></td></tr></table></figure>
</li>
<li><p>查当前的代理配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --get http.proxy  </span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>
</li>
<li><p>取消设置代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy  </span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置使用需账户密码验证的代理</p>
<p>如果出现错误如下，则需要添加用户名和密码</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">fatal</span>: NotSupportedException encountered.</span><br><span class="line">   <span class="attribute">ServicePointManager</span> 不支持具有 socks<span class="number">5</span> 方案的代理。</span><br></pre></td></tr></table></figure>

<p>下面设置需要密码的代理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://username:passwd@127.0.0.1:1081</span><br><span class="line">git config --global http.proxy socks5://username:passwd@127.0.0.1:1080</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SSH代理"><a href="#SSH代理" class="headerlink" title="SSH代理"></a>SSH代理</h3><p>编辑<code>~/.ssh/config</code>文件（没有则自己创建）</p>
<h4 id="Linux下配置-未验证"><a href="#Linux下配置-未验证" class="headerlink" title="Linux下配置(未验证)"></a>Linux下配置(未验证)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要 netcat</span></span><br><span class="line">ProxyCommand nc -v -x 127.0.0.1:1080 %h %pxxxxxxxxxx ProxyCommand nc -v -x 1</span><br></pre></td></tr></table></figure>

<h4 id="windows下配置"><a href="#windows下配置" class="headerlink" title="windows下配置"></a>windows下配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -S 为 socks, -H 为 HTTP</span></span><br><span class="line">ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果找不到 <code>connect</code> 命令那么指定其绝对路径，一般在 git 安装目录下 <code>\mingw64\bin\connect.exe</code>.</p>
</blockquote>
<h4 id="分域名代理"><a href="#分域名代理" class="headerlink" title="分域名代理"></a>分域名代理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure>

<h2 id="Git配置多账户"><a href="#Git配置多账户" class="headerlink" title="Git配置多账户"></a>Git配置多账户</h2><p>github限制了不同github账户不能使用同一个SSH key，个人在网上找了一些教程，总结一下。</p>
<p>假设我们github账号的邮箱名为<code>abc@gmail.com</code></p>
<h3 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h3><p>目前我们的git有一个global配置，默认使用<code>~/.ssh/id_rsa.pub</code>公钥连接，该公钥只能用在一个github账户的SSH key中，因此我们需要生成一个新的ssh key，git中执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;abc@gmail.com&quot;</span> -f <span class="string">&quot;id_rsa_abc&quot;</span></span><br></pre></td></tr></table></figure>

<p>此时我们可以看到<code>~/.ssh</code>文件夹下生成了<code>id_rsa_abc</code>和<code>id_rsa_abc.pub</code>文件。</p>
<p>执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa_abc.pub</span><br></pre></td></tr></table></figure>

<p>复制该文件的内容，在github setting中新建SSH key，将内容粘贴进去, title随意写。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2021-03/20210302135525.png"></p>
<h3 id="新建config文件"><a href="#新建config文件" class="headerlink" title="新建config文件"></a>新建config文件</h3><p>在<code>~/.ssh</code>文件夹下新建config文件，注意没有后缀。</p>
<p>文件内容填写如下：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Default GitHub</span></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    <span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#newaccount</span></span><br><span class="line">Host newaccount</span><br><span class="line">    HostName github.com</span><br><span class="line">    <span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_abc</span><br></pre></td></tr></table></figure>

<p>配置文件的含义显而易见。</p>
<p>配置完毕后，在git中执行命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@newaccount</span><br></pre></td></tr></table></figure>

<p>如果返回没有报错，说明配置成功。</p>
<h3 id="连接仓库"><a href="#连接仓库" class="headerlink" title="连接仓库"></a>连接仓库</h3><p><strong>注</strong>: 这里我们只能通过ssh协议来连接仓库。</p>
<p>假设我们新建了一个仓库为 <code>abc/abc-repo.git</code>，abc为用户名,  abc-repo为仓库名，添加origin的方式如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@newaccount:abc/abc-repo.git</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>命令总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Halo博客服务器迁移</title>
    <url>/posts/e2efb148/</url>
    <content><![CDATA[<blockquote>
<p>由于本人使用国外的VPS搭建博客，总是感觉万一哪天服务器挂了数据就会丢失，所以记录一下关于halo博客的备份工作。</p>
</blockquote>
<span id="more"></span>
<h1 id="1-环境参数"><a href="#1-环境参数" class="headerlink" title="1. 环境参数"></a>1. 环境参数</h1><ul>
<li>halo版本：v1.2.0</li>
<li>数据库：H2</li>
<li>部署工具: Docker version 19.03.5, build 633a0ea</li>
</ul>
<h1 id="2-Halo数据备份"><a href="#2-Halo数据备份" class="headerlink" title="2. Halo数据备份"></a>2. Halo数据备份</h1><ol>
<li>在halo控制台的系统模块里面选择小工具</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415163307.png"></p>
<ol start="2">
<li>点击备份<br> 在弹出的侧边栏中点击备份，结果如下</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415163325.png"></p>
<ol start="3">
<li>下载备份压缩包<br> 点击文件名，下载压缩包<br><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415163348.png"></li>
</ol>
<h1 id="3-上传备份文件到新服务器"><a href="#3-上传备份文件到新服务器" class="headerlink" title="3. 上传备份文件到新服务器"></a>3. 上传备份文件到新服务器</h1><blockquote>
<p>在上传备份文件之前，可以在新服务器内将docker安装好，并使用docker拉取halo生成镜像(<strong>记住先不要创建和运行容器</strong>)。具体环境搭建可看官网：<a href="https://halo.run/guide/install/install-with-docker.html">https://halo.run/guide/install/install-with-docker.html</a></p>
</blockquote>
<p>:warning: <strong>记住在安装halo时不需要下载配置文件到<code>~/.halo</code>目录</strong><br>:point_right: 即下面这步不需要：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415163404.png"></p>
<p><strong>具体步骤：</strong></p>
<ol>
<li><p>安装docker<br>按照官网教程安装</p>
</li>
<li><p>拉取halo最新镜像</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> docker pull ruibaby/halo</span><br></pre></td></tr></table></figure></li>
<li><p>上传压缩包文件到服务器的<code>~/.halo</code>目录<br> 我是用<code>xftp</code>工具上传的。</p>
</li>
<li><p>解压zip压缩包</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">uzip</span> 文件名</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建和运行docker容器</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name halo -p <span class="number">8090</span>:<span class="number">8090</span>  -v ~<span class="regexp">/.halo:/</span>root<span class="regexp">/.halo ruibaby/</span>halo</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="4-修改数据库内容"><a href="#4-修改数据库内容" class="headerlink" title="4. 修改数据库内容"></a>4. 修改数据库内容</h1><blockquote>
<p>如果迁移博客需要修改网址，并且写文章时图片是通过halo上传的，那么就需要修改<code>数据库中</code>文章的图片网址。接下来以<code>h2数据库为例</code>, 首先需要登录到h2-console面板, 教程见<a href="/archives/he93js7">文章</a>。</p>
</blockquote>
<p><strong>这里需要修改以下三部分内容</strong></p>
<ul>
<li>修改POSTS表中ORIGINAL_CONTENT内容</li>
<li>修改POSTS表中FORMAT_CONTENT内容</li>
<li>修改POSTS表中THUMBNAIL内容</li>
</ul>
<p>SQL代码如下：</p>
<blockquote>
<p>这里blog.kerviaxxx.top迁移之前的域名，迁移后的域名为kerviaxxx.top</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE  POSTS <span class="keyword">SET</span> ORIGINAL_CONTENT<span class="operator">=</span>REPLACE(ORIGINAL_CONTENT, <span class="string">&#x27;blog.kerviaxxx.top&#x27;</span>, <span class="string">&#x27;kerviaxxx.top&#x27;</span>) <span class="keyword">WHERE</span> ORIGINAL_CONTENT <span class="keyword">like</span> <span class="string">&#x27;%blog.kerviaxxx.top%&#x27;</span>;</span><br><span class="line">UPDATE  POSTS <span class="keyword">SET</span> FORMAT_CONTENT<span class="operator">=</span>REPLACE(FORMAT_CONTENT, <span class="string">&#x27;blog.kerviaxxx.top&#x27;</span>, <span class="string">&#x27;kerviaxxx.top&#x27;</span>) <span class="keyword">WHERE</span> FORMAT_CONTENT <span class="keyword">like</span> <span class="string">&#x27;%blog.kerviaxxx.top%&#x27;</span>;</span><br><span class="line">UPDATE  POSTS <span class="keyword">SET</span> THUMBNAIL<span class="operator">=</span>REPLACE(THUMBNAIL, <span class="string">&#x27;blog.kerviaxxx.top&#x27;</span>, <span class="string">&#x27;kerviaxxx.top&#x27;</span>) <span class="keyword">WHERE</span> THUMBNAIL <span class="keyword">like</span> <span class="string">&#x27;%blog.kerviaxxx.top%&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>halo</tag>
      </tags>
  </entry>
  <entry>
    <title>Halo博客修改密码</title>
    <url>/posts/f2aea09c/</url>
    <content><![CDATA[<blockquote>
<p>记录halo博客控制台登录密码的修改和halo博客h2数据库的密码修改</p>
</blockquote>
<span id="more"></span>
<p>:gem: 环境说明：</p>
<pre><code>halo版本v1.2
docker部署
</code></pre>
<h1 id="1-配置h2-console"><a href="#1-配置h2-console" class="headerlink" title="1. 配置h2-console"></a>1. 配置h2-console</h1><pre><code> 修改博客配置文件，如下图方框内所示，将false改为true
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162347.png"></p>
<pre><code>修改完毕之后，重启docker服务
</code></pre>
<h1 id="2-登录h2-console"><a href="#2-登录h2-console" class="headerlink" title="2. 登录h2-console"></a>2. 登录h2-console</h1><pre><code>访问网址：博客域名/h2-console
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162403.png"></p>
<pre><code>需要注意图中·JDBC URL·路径。
用户名密码就是配置文件中的用户名和密码，这里分别为admin和123456
</code></pre>
<h1 id="3-修改密码"><a href="#3-修改密码" class="headerlink" title="3. 修改密码"></a>3. 修改密码</h1><blockquote>
<p>这里主要记录两个密码的修改，一个是控制台密码，另一个是数据库密码</p>
</blockquote>
<h2 id="3-1-控制台密码"><a href="#3-1-控制台密码" class="headerlink" title="3.1 控制台密码"></a>3.1 控制台密码</h2><blockquote>
<p>这里是通过修改数据库的方式修改密码，比较麻烦。其实可以直接登录控制台修改密码就行了。</p>
</blockquote>
<ul>
<li><p>查看用户名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> USERS</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162519.png"></p>
</li>
<li><p>根据用户名修改密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update USERS <span class="keyword">set</span> PASSWORD<span class="operator">=</span><span class="string">&#x27;newpsd&#x27;</span> <span class="keyword">where</span> USERNAME<span class="operator">=</span><span class="string">&#x27;xxxxx&#x27;</span> <span class="operator">/</span><span class="operator">/</span> xxxx就是你的用户名, newpsd是新密码</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p>:warning: <code>注意这里密码应采用Bcrypt密文方式设置</code> :warning:<br>例：将密码abcdef使用Bcrypt加密</p>
<ul>
<li>网址：<a href="https://www.jisuan.mobi/p163u3BN66Hm6JWx.html">https://www.jisuan.mobi/p163u3BN66Hm6JWx.html</a></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162547.png"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">update</span> USERS set PASSWORD=&#x27;$<span class="number">2</span>a$<span class="number">10</span>$<span class="number">8</span>lFd<span class="number">0</span>fpD<span class="number">61</span>VsfknGZUDyo.RV<span class="number">0</span>zpkSSXSyTqgM<span class="number">1</span>P<span class="number">3</span>qzN<span class="number">8</span>Mmb<span class="number">3</span>yPRQm&#x27; where USERNAME=&#x27;xxxxx&#x27;</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162605.png"></p>
<pre><code>到此密码就修改完成，这里不需要再重启服务了。
</code></pre>
<h2 id="3-2-数据库密码"><a href="#3-2-数据库密码" class="headerlink" title="3.2 数据库密码"></a>3.2 数据库密码</h2><p>这里的密码不用加密</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> admin <span class="keyword">set</span> password <span class="string">&#x27;abcdef&#x27;</span> <span class="operator">/</span><span class="operator">/</span>修改admin用户密码为abcdef</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415162624.png"></p>
<p>:point_right: 执行上述执行后，按照下列步骤操作：</p>
<ul>
<li>停止docker的halo容器服务<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a //查看当前halo容器对应的ID</span><br><span class="line">docker stop HALO_ID //停止halo服务</span><br></pre></td></tr></table></figure></li>
<li>修改配置文件中H2数据库密码, 并关闭h2-console功能（修改true为false）</li>
<li>启动docker的halo容器服务<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">docker stop HALO_ID <span class="comment">//启动halo服务</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>halo</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP算法</title>
    <url>/posts/2da0528d/</url>
    <content><![CDATA[<h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><pre><code>给出字符串str1, 字符串str2, len(str1) &gt; len(str2), 求出str2在str1中的位置, 如果不存在输出-1;
样例1:
输入: str1 = &quot;asfdgdg&quot; str2 = &quot;dg&quot;
输出: 4
样例2: str1 = &quot;asfdgdg&quot; str2 = &quot;dsg&quot;
输出: -1
</code></pre>
<span id="more"></span>
<h3 id="问题建模"><a href="#问题建模" class="headerlink" title="问题建模"></a>问题建模</h3><p><strong>解决的问题</strong>：判断一个字符串是否是另一个字符串的一个子串</p>
<p>假设str1.len = N,  str2.len = M, 且(N &gt;= M)</p>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>很容易想到常规的解题思路，使用暴力算法，在 str1 的每一个位置进行判断。</p>
<p>其时间复杂度为：<code>O(N*M)</code>。</p>
<h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><h4 id="前缀等于后缀的最大长度"><a href="#前缀等于后缀的最大长度" class="headerlink" title="前缀等于后缀的最大长度"></a>前缀等于后缀的最大长度</h4><p>在理解KMP算法之前，我们需要了解<strong>前缀等于后缀的最大长度</strong>的概念，给出一个字符串str，可以得到唯一的一个前缀等于后缀的最大长度。</p>
<p>前缀、后缀比较容易理解，如果<strong>不考虑字符串本身</strong>，对于字符串abamaba，其前缀有a、ab、aba、abam、abama、abamab，后缀有a、ba、aba、maba、amaba、bambba。前缀与后缀相等的字符串包括a、aba。那么前缀等于后缀的最大长度的字符串为aba，最大长度为3。</p>
<h4 id="获得str2的next数组"><a href="#获得str2的next数组" class="headerlink" title="获得str2的next数组"></a>获得str2的next数组</h4><p>首先明确的一点是next数组长度与<strong>str2</strong>的长度相等，即为M。</p>
<p><code>next[i]</code>：<code>str2[0:i-1]</code>这个字符串的 <em>前缀等于后缀的最大长度</em>。</p>
<p>默认next[0] = -1, next[1] = 0。</p>
<p>举个例子：求出字符串abcmabc的next数组</p>
<p>其结果为：</p>
<table>
<thead>
<tr>
<th>index</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">6</th>
</tr>
</thead>
<tbody><tr>
<td>next数组值</td>
<td align="center">-1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">2</td>
</tr>
</tbody></table>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-05/20200517183539.png"></p>
<br>

<p>接下来讲述求解next数组的过程，当然也可以先跳过这一部分看下一节，先了解KMP算法如何通过next数组来加速匹配的过程。以字符串<code>ababdababam</code>为例，首先说明的是求next[i]的值需要用到next[0] ~ next[i-1]的结果，所以整个求解next数组过程就是遍历一次字符串的过程。</p>
<p>假设此时我们遍历到该字符串最后一个字符<code>m</code>的位置，我们要得到字符串<em>ababdababa</em>的<em>前缀等于后缀的最大长度</em>，从而求得next[10]的值。此时我们已经求得next[0]~next[9]的值，结果如下表。</p>
<table>
<thead>
<tr>
<th>index</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
</tr>
</thead>
<tbody><tr>
<td>当前子串</td>
<td></td>
<td>a</td>
<td>ab</td>
<td>aba</td>
<td>abab</td>
<td>ababd</td>
<td>ababda</td>
<td>ababdab</td>
<td>ababdaba</td>
<td>ababdabab</td>
<td>ababdababa</td>
</tr>
<tr>
<td>next数组值</td>
<td>-1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>?</td>
</tr>
</tbody></table>
<p>我们首先比较str[next[9]] == str[9]，发现 ‘d’ != ‘a’。接着再比较str[ next[ next[9] ] ] == str[9]  –&gt; next[next[4]] == str[9]，即比较str[2] == str[9]，发现’a’ = ‘a’，结束过程，next[10] = next[4] + 1=3，对应的前后缀为aba。</p>
<p>观察上述过程，可以发现首先看next[9]的位置，再看next[next[9]]的位置，如果我们得到的索引&lt;=0，说明可以直接将next[10] = 0。</p>
<p>KMP算法最难理解就是上面的过程，这个需要自己仔细思考。</p>
<h4 id="KMP算法过程"><a href="#KMP算法过程" class="headerlink" title="KMP算法过程"></a>KMP算法过程</h4><p>首先需要说明的是KMP算法的时间复杂度为O(N)，一次遍历即可完成操作。</p>
<p>假设str1 = dabckpabckp，str2 = abckpabca。</p>
<p>过程如下：</p>
<ol>
<li>初始化指向str1位置指针i=0，指向str2位置指针j=0.</li>
<li>将str1[0]与str2[0]比较(因为i = 0 且 j = 0)，发现字符不相等，i++，此时i = 1。</li>
<li>比较str1[1]与str2[0]，字符相等，i++，j++以此类推，直到比较到i=9，j=8的时候。</li>
<li>发现str1[9] != str2[8]，如图1所示。</li>
<li>接下来调整j = next[j]，即j = next[8] = 3，如图2所示。</li>
<li>将str1[9]与str2[3]继续比较。</li>
<li>重复上述过程，最终如果全部匹配完成，说明str1包含str2。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-05/%E7%BB%98%E5%9B%BE1.png"></p>
<h3 id="KMP算法实现-C"><a href="#KMP算法实现-C" class="headerlink" title="KMP算法实现(C++)"></a>KMP算法实现(C++)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	KMP算法实现 </span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 10000</span></span><br><span class="line"><span class="keyword">int</span> next[MAX_LEN] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNextArray</span><span class="params">(string s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// s1中s2作为子串的位置 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subStringIndexof</span><span class="params">(string s1, string s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i1,i2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">getNextArray</span>(s2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= s2.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;next[i]&lt;&lt;endl;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">while</span>(i1 &lt; s1.<span class="built_in">length</span>() &amp;&amp; i2 &lt; s2.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s1[i1] == s2[i2])</span><br><span class="line">        &#123;</span><br><span class="line">            i1++;</span><br><span class="line">            i2++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next[i2] == <span class="number">-1</span>)&#123;</span><br><span class="line">            i1++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i2 = next[i2];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> i2==s2.<span class="built_in">length</span>()?(i1-i2):<span class="number">-1</span>;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNextArray</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">length</span>() == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> cn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= s.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i<span class="number">-1</span>] == s[cn])</span><br><span class="line">        &#123;</span><br><span class="line">            next[i++] = ++cn;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cn &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            cn = next[cn];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            next[i++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1 = <span class="string">&quot;abbbffdbbffsf&quot;</span>;</span><br><span class="line">    string s2 = <span class="string">&quot;bffssbffs&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">subStringIndexof</span>(s1,s2)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><h4 id="1-2018校招-京东-两个子串"><a href="#1-2018校招-京东-两个子串" class="headerlink" title="1. 2018校招-京东-两个子串"></a>1. 2018校招-京东-两个子串</h4><p><strong>题目描述</strong><br>给定一个字符串s, 请计算输出含有连续两个s作为子串的最短字符串。 注意两个s可能有重叠部分。例如,”ababa”含有两个”aba”.</p>
<p><strong>输入描述:</strong></p>
<blockquote>
<p>输入包括一个字符串s,字符串长度length(1 ≤ length ≤ 50),s中每个字符都是小写字母.</p>
</blockquote>
<p><strong>输出描述:</strong></p>
<blockquote>
<p>输出一个字符串,即含有连续两个s作为子串的最短字符串。</p>
</blockquote>
<p><strong>思路:</strong><br>使用next数组, 求出最大前缀和后缀长度,输出即可.</p>
<p><a href="https://www.nowcoder.com/practice/abf0f0d6b4c44676b44e66060286c45a?tpId=90&tqId=30835&tPage=3&rp=3&ru=/ta/2018test&qru=/ta/2018test/question-ranking">牛客网题目链接</a></p>
<p><strong>AC代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNextArray</span><span class="params">(<span class="keyword">int</span>* next,string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> nex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= s.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i<span class="number">-1</span>] == s[nex])</span><br><span class="line">            next[i++] = ++nex;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nex &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            nex = next[nex];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            next[i++] = <span class="number">0</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next[s.<span class="built_in">length</span>()];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">60</span>];</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> max_str = <span class="built_in">getNextArray</span>(next,s);</span><br><span class="line">        cout&lt;&lt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = max_str; i &lt; s.<span class="built_in">length</span>();i++) cout&lt;&lt;s[i];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;		</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-字符串重复问题"><a href="#2-字符串重复问题" class="headerlink" title="2. 字符串重复问题"></a>2. 字符串重复问题</h4><blockquote>
<p>已知字符串是由某个子串重复的得到,如abcabcabc是由子串abc重复得到,求字符串的子串.</p>
</blockquote>
<p><strong>思路</strong><br>可以使用KMP算法中的next数组,求出最大前缀长度, 原来字符串除去最大前缀剩下的部分就是要求的子串.</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNextArray</span><span class="params">(<span class="keyword">int</span>* next,string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> nex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= s.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i<span class="number">-1</span>] == s[nex])</span><br><span class="line">            next[i++] = ++nex;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nex &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            nex = next[nex];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            next[i++] = <span class="number">0</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next[s.<span class="built_in">length</span>()];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">60</span>];</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = max_str; i &lt; s.<span class="built_in">length</span>();i++) cout&lt;&lt;s[i];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;		</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-两个字符串改成两个二叉树"><a href="#3-两个字符串改成两个二叉树" class="headerlink" title="3. 两个字符串改成两个二叉树"></a>3. 两个字符串改成两个二叉树</h4><blockquote>
<p>tree2在tree1中的位置</p>
</blockquote>
<p><strong>思路</strong><br>将树进行序列化, 然后再使用字符串的KMP算法求解</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>kmp</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-001-两数之和</title>
    <url>/posts/a239384e/</url>
    <content><![CDATA[<blockquote>
<p>题目链接：<a href="https://leetcode-cn.com/problems/two-sum/">https://leetcode-cn.com/problems/two-sum/</a></p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>难度：简单</p>
</blockquote>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p><strong>示例</strong>:</p>
<blockquote>
<p>给定 nums = [2, 7, 11, 15], target = 9</p>
<p>因为 nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9<br>所以返回 [<strong>0, 1</strong>]</p>
</blockquote>
<h3 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h3><ul>
<li>使用C++的<code>map</code>，键： <code>target - 遍历过的元素值</code>  值：<code>遍历过的元素值索引</code></li>
<li>时间复杂度 <code>O(nlogn)</code></li>
<li>空间复杂度<code>O(n)</code></li>
<li>C++中<code>map</code>使用红黑树实现，<code>hash_map</code>使用哈希表实现，<code>hash_map</code>相对来说查找元素更快</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; numMap;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">int</span> t,i;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = nums.<span class="built_in">begin</span>(); it != nums.<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            t = target - *it;</span><br><span class="line">            <span class="keyword">if</span>(numMap.<span class="built_in">find</span>(*it) != numMap.<span class="built_in">end</span>())  <span class="comment">// 之前有元素 + *it = target</span></span><br><span class="line">            &#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(numMap[*it]);</span><br><span class="line">                v.<span class="built_in">push_back</span>(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                numMap[t] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><h4 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h4><p>暴力法很简单，遍历每个元素 x，并查找是否存在一个值与 target−x 相等的目标元素。</p>
<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, j &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：<code>O(n^2)</code><br>对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗费 O(n)的时间。因此时间复杂度为 <code>O(n^2)</code>。</li>
<li>空间复杂度：<code>O(1)</code>。</li>
</ul>
<h4 id="方法二：两遍哈希表"><a href="#方法二：两遍哈希表" class="headerlink" title="方法二：两遍哈希表"></a>方法二：两遍哈希表</h4><p>为了对运行时间复杂度进行优化，我们需要一种更有效的方法来检查数组中是否存在目标元素。如果存在，我们需要找出它的索引。保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。</p>
<p>通过以空间换取速度的方式，我们可以将查找时间从 O(n) 降低到 O(1)。哈希表正是为此目的而构建的，它支持以 <em>近似</em> 恒定的时间进行快速查找。我用“近似”来描述，是因为一旦出现冲突，查找用时可能会退化到 O(n)。但只要你仔细地挑选哈希函数，在哈希表中进行查找的用时应当被摊销为 O(1)。</p>
<p>一个简单的实现使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素<code>target−nums[i]</code>是否存在于表中。注意，该目标元素不能是 <code>nums[i]</code> 本身！</p>
<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, map.get(complement) &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：<code>O(n) </code><br>我们把包含有 n个元素的列表遍历两次。由于哈希表将查找时间缩短到 O(1) ，所以时间复杂度为 O(n)。</li>
<li>空间复杂度：<code>O(n) </code><br>所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 n个元素。</li>
</ul>
<h4 id="方法三：一遍哈希表"><a href="#方法三：一遍哈希表" class="headerlink" title="方法三：一遍哈希表"></a>方法三：一遍哈希表</h4><p>事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。</p>
<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：<code>O(n)</code>，<br>我们只遍历了包含有 n 个元素的列表一次。在表中进行的每次查找只花费 O(1)的时间。</li>
<li>空间复杂度：<code>O(n)</code>，<br>所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 n个元素。</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下将python脚本封装成服务</title>
    <url>/posts/db70b640/</url>
    <content><![CDATA[<blockquote>
<p>将脚本封装成服务方便后台运行</p>
</blockquote>
<span id="more"></span>

<h1 id="nohup后台运行"><a href="#nohup后台运行" class="headerlink" title="nohup后台运行"></a>nohup后台运行</h1><blockquote>
<p>nohup指不断地运行，是no hang up的缩写，指不间断，不挂断。运行一个进程的时候，不想让其在你退出账号时关闭，即可用nohup。nohup在不规定的情况下，所以输出内容会到nohup.out中</p>
</blockquote>
<p>运行示例：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">nohup python my.py &gt;&gt; my.<span class="built_in">log</span> <span class="number">2</span>&gt;<span class="meta">&amp;1 &amp;</span></span><br><span class="line">nohup tomcat.sh &gt; /dev/<span class="literal">null</span> <span class="number">2</span>&gt;<span class="meta">&amp;1 &amp;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p><code>&gt;</code>和<code>&gt;&gt;</code>都是将输出重定向到指定位置（如文件），区别在于前者重写文件，后者追加到文件</p>
</li>
<li><p><code>/dev/null</code>相当于一个垃圾箱，如果不想知道输出内容，可以指定输出到次数</p>
</li>
<li><p>关于0、1、2</p>
<p><code>0</code> 表示stdin标准输入，用户键盘输入的内容<br><code>1</code> 表示stdout标准输出，输出到显示屏的内容<br><code>2</code> 表示stderr标准错误，报错内容</p>
</li>
<li><p><code>2&gt;&amp;1</code>是一个整体，<code>&gt;</code>左右不能有空格，即将错误内容重定向输入到标准输出中去。</p>
</li>
<li><p><code>&amp;</code>为后台运行</p>
</li>
</ol>
<h1 id="封装成system服务"><a href="#封装成system服务" class="headerlink" title="封装成system服务"></a>封装成system服务</h1><p>这个方法只适用于使用systemd的Linux系统，现在流行的Linux发行版都使用systemd。后台服务程序是随系统自启动的，我们只要把Python脚本配置为服务就行了。需要注意的一点是你Python脚本的启动时机，它依赖不依赖其他服务（网络连接、一些分区的挂载等等）。</p>
<p>假设我们想将一个位置为<code>/home/autorun.py</code>的python脚本封装成服务。</p>
<h2 id="创建Unit配置文件"><a href="#创建Unit配置文件" class="headerlink" title="创建Unit配置文件"></a>创建Unit配置文件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/lib/</span>systemd<span class="regexp">/system/</span>autorun.service</span><br></pre></td></tr></table></figure>

<p>向文件中写入以下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Description</span>=Test Service</span><br><span class="line"></span><br><span class="line"><span class="attr">After</span>=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Type</span>=idle</span><br><span class="line"></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/python /home/snail/autorun.py</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<p>上面定义了一个叫 Test Service 的服务，它在multi-user环境起来之后运行；ExecStart参数指定我们要运行的程序，注意使用绝对路径；idle确保脚本在其他东西加载完成之后运行，它的默认值是simple。为了获得脚本的输出信息，我们可以重定向到文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ExecStart=<span class="regexp">/usr/</span>bin<span class="regexp">/python /</span>home<span class="regexp">/snail/</span>autorun.py &gt; <span class="regexp">/home/</span>snail/autorun.log <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>之后更改配置文件的权限：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo chmod <span class="number">644</span> <span class="regexp">/lib/</span>systemd<span class="regexp">/system/</span>autorun.service</span><br></pre></td></tr></table></figure>
<h2 id="使配置文件生效"><a href="#使配置文件生效" class="headerlink" title="使配置文件生效"></a>使配置文件生效</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable <span class="built_in">auto</span>run.service</span><br><span class="line">systemctl start <span class="built_in">auto</span>run.service</span><br><span class="line">systemctl status <span class="built_in">auto</span>run.service</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode-002-两数相加</title>
    <url>/posts/b190b0aa/</url>
    <content><![CDATA[<blockquote>
<p>题目链接：<a href="https://leetcode-cn.com/problems/add-two-numbers/">https://leetcode-cn.com/problems/add-two-numbers/</a> </p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>难度：中等</p>
</blockquote>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p><strong>示例</strong>：</p>
<blockquote>
<p><strong>输入</strong>：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br><strong>输出</strong>：7 -&gt; 0 -&gt; 8<br><strong>原因</strong>：342 + 465 = 807</p>
</blockquote>
<h3 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h3><pre><code>两个链表同时从头开始遍历，逐位相加，保存进位至下次加法使用。
</code></pre>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *retSum=<span class="literal">NULL</span>, *t1, *t2;</span><br><span class="line">        <span class="keyword">int</span> val1, val2, add=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            val1 = (l1 == <span class="literal">NULL</span>)?<span class="number">0</span>:l1-&gt;val;</span><br><span class="line">            val2 = (l2 == <span class="literal">NULL</span>)?<span class="number">0</span>:l2-&gt;val;</span><br><span class="line">            t1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>((val2 + val1 + add)%<span class="number">10</span>);</span><br><span class="line">            add = (val2 + val1 + add)/<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(retSum == <span class="literal">NULL</span>)</span><br><span class="line">                retSum = t1;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                t2-&gt;next = t1;</span><br><span class="line">            t2 = t1;</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>)</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>)</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(add &gt; <span class="number">0</span>)</span><br><span class="line">            t2-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(add);</span><br><span class="line">        <span class="keyword">return</span> retSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上述代码存在一个显著的不足之处：在while循环内需要判断返回的链表头指针<code>retSum</code>是否为空。</p>
<p>看了官方题解后，发现可以初始化头指针为0，最后返回<code>retSum-&gt;next</code>就行了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *retSum, *t;</span><br><span class="line">        retSum = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        t = retSum;</span><br><span class="line">        <span class="keyword">int</span> val1, val2, add=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            val1 = (l1 == <span class="literal">NULL</span>)?<span class="number">0</span>:l1-&gt;val;</span><br><span class="line">            val2 = (l2 == <span class="literal">NULL</span>)?<span class="number">0</span>:l2-&gt;val;</span><br><span class="line">            t-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>((val2 + val1 + add)%<span class="number">10</span>);</span><br><span class="line">            add = (val2 + val1 + add)/<span class="number">10</span>;</span><br><span class="line">            t = t-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>)</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>)</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(add &gt; <span class="number">0</span>)</span><br><span class="line">            t-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(add);</span><br><span class="line">        t = retSum-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> retSum;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><h4 id="方法：初等数学"><a href="#方法：初等数学" class="headerlink" title="方法：初等数学"></a>方法：初等数学</h4><p><strong>思路</strong></p>
<p>我们使用变量来跟踪进位，并从包含最低有效位的表头开始模拟逐位相加的过程。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/2_add_two_numbers.svg"><br><em>图1，对两数相加方法的可视化: 342+465=807，每个结点都包含一个数字，并且数字按位逆序存储。</em></p>
<p><strong>算法</strong></p>
<p>就像你在纸上计算两个数字的和那样，我们首先从最低有效位也就是列表 l1和 l2 的表头开始相加。由于每位数字都应当处于 0…90 的范围内，我们计算两个数字的和时可能会出现 “溢出”。例如，5+7=12。在这种情况下，我们会将当前位的数值设置为 222，并将进位 carry=1 带入下一次迭代。进位 carry 必定是 0 或 1，这是因为两个数字相加（考虑到进位）可能出现的最大和为 9+9+1=19。</p>
<p>伪代码如下：</p>
<ul>
<li>将当前结点初始化为返回列表的哑结点。</li>
<li>将进位 carry 初始化为 0。</li>
<li>将 p 和 q 分别初始化为列表 l1 和 l2的头部。</li>
<li>遍历列表 l1 和 l2 直至到达它们的尾端。<ul>
<li>将 x 设为结点 p 的值。如果 p已经到达 l1 的末尾，则将其值设置为 0。</li>
<li>将 y设为结点 q的值。如果 q 已经到达 l2 的末尾，则将其值设置为 0。</li>
<li>设定 sum=x+y+carry。</li>
<li>更新进位的值，carry=sum/10。</li>
<li>创建一个数值为 (sum mod 10)的新结点，并将其设置为当前结点的下一个结点，然后将当前结点前进到下一个结点。</li>
<li>同时，将 p 和 q 前进到下一个结点。</li>
</ul>
</li>
<li>检查 carry=1 是否成立，如果成立，则向返回列表追加一个含有数字 1 的新结点。</li>
<li>返回哑结点的下一个结点。</li>
</ul>
<p>请注意，我们使用哑结点来简化代码。如果没有哑结点，则必须编写额外的条件语句来初始化表头的值。</p>
<p>请特别注意以下情况：</p>
<table>
<thead>
<tr>
<th>测试用例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>l1=[0,1]，l2=[0,1,2]</td>
<td>当一个列表比另一个列表长时</td>
</tr>
<tr>
<td>l1=[]，l2=[0,1]</td>
<td>当一个列表为空时，即出现空列表</td>
</tr>
<tr>
<td>l1=[9,9]，l2=[1]</td>
<td>求和运算最后可能出现额外的进位，这一点很容易被遗忘</td>
</tr>
</tbody></table>
<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode p = l1, q = l2, curr = dummyHead;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> || q != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = (p != <span class="keyword">null</span>) ? p.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (q != <span class="keyword">null</span>) ? q.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = carry + x + y;</span><br><span class="line">        carry = sum / <span class="number">10</span>;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) p = p.next;</span><br><span class="line">        <span class="keyword">if</span> (q != <span class="keyword">null</span>) q = q.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">&#125;`</span><br></pre></td></tr></table></figure>



<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(max⁡(m,n))，假设 m 和 n 分别表示 l1 和 l2 的长度，上面的算法最多重复 max⁡(m,n) 次。</li>
<li>空间复杂度：O(max⁡(m,n))， 新列表的长度最多为 max⁡(m,n)+1。</li>
</ul>
<p><strong>拓展</strong></p>
<p>如果链表中的数字不是按逆序存储的呢？例如：</p>
<p>(3→4→2)+(4→6→5)=8→0→7</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux服务查看SSH登录失败日志</title>
    <url>/posts/26caa900/</url>
    <content><![CDATA[<blockquote>
<p>查询主要依据 <code>/var/log/secure</code> 文件，有些系统是<code>/var/log/auth.log</code>文件，以下以<code>/var/log/secure</code> 文件为例查询。</p>
</blockquote>
<span id="more"></span>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># 查看哪些IP破解你SSH密码以及次数</span><br><span class="line"><span class="keyword">cat</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/secure | awk &#x27;/Failed/&#123;<span class="keyword">print</span> $(NF-3)&#125;&#x27; | <span class="keyword">sort</span> | uniq -c | awk &#x27;&#123;<span class="keyword">print</span> <span class="variable">$2</span><span class="string">&quot; = &quot;</span><span class="variable">$1</span>;&#125;&#x27;</span><br><span class="line"></span><br><span class="line"># 登录失败的记录</span><br><span class="line">grep -o <span class="string">&quot;Failed password&quot;</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/secure|uniq -c</span><br><span class="line"></span><br><span class="line"># 登录成功的记录</span><br><span class="line">1. grep <span class="string">&quot;Accepted &quot;</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/secure | awk &#x27;&#123;<span class="keyword">print</span> <span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$3</span>,<span class="variable">$9</span>,<span class="variable">$11&#125;</span>&#x27;</span><br><span class="line">2. grep <span class="string">&quot;Accepted password for root&quot;</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/secure | awk &#x27;&#123;<span class="keyword">print</span> <span class="variable">$11&#125;</span>&#x27; | <span class="keyword">sort</span> | uniq -c | <span class="keyword">sort</span> -nr | <span class="keyword">more</span></span><br><span class="line"></span><br><span class="line"># 排序查看哪些IP破解你SSH密码以及次数</span><br><span class="line">1. <span class="keyword">cat</span>  | awk &#x27;/Failed/&#123;<span class="keyword">print</span> $(NF-3)&#125;&#x27; /<span class="keyword">var</span>/<span class="keyword">log</span>/secure | <span class="keyword">sort</span> | uniq -c | <span class="keyword">sort</span> -rn</span><br><span class="line">2. grep <span class="string">&quot;Failed password for root&quot;</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/secure | awk &#x27;&#123;<span class="keyword">print</span> <span class="variable">$11&#125;</span>&#x27; | <span class="keyword">sort</span> | uniq -c | <span class="keyword">sort</span> -nr | <span class="keyword">more</span></span><br></pre></td></tr></table></figure>

<h2 id="恶意IP检测工具"><a href="#恶意IP检测工具" class="headerlink" title="恶意IP检测工具"></a>恶意IP检测工具</h2><p>网址：<a href="https://www.abuseipdb.com/">https://www.abuseipdb.com/</a><br>显示结果如下图所示:</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415171504.png"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux操作系统源</title>
    <url>/posts/2480d896/</url>
    <content><![CDATA[<p>记录常见linux操作系统的源以及换源方式。</p>
<span id="more"></span>

<h1 id="Linux发行版分类"><a href="#Linux发行版分类" class="headerlink" title="Linux发行版分类"></a>Linux发行版分类</h1><p>Linux的发行版本根据维护主体的不同可以大体分为两类，一类是商业公司维护的发行版本，一类是社区组织维护的发行版本，前者以著名的Red Hat（RHEL红帽）为代表，后者以Debian为代表。</p>
<p>更多介绍见 <a href="https://www.edrawsoft.cn/linux-classify-function/">https://www.edrawsoft.cn/linux-classify-function/</a></p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></p>
<h2 id="RedHat系列-基于RPM"><a href="#RedHat系列-基于RPM" class="headerlink" title="RedHat系列(基于RPM)"></a>RedHat系列(基于RPM)</h2><p>Redhat系列的包管理方式采用的是基于RPM包和YUM包的管理方式，包分发方式是编译好的二进制文件。</p>
<ul>
<li>RHEL （Redhat Enterprise Linux）：也就是所谓的Redhat Advance Server，收费版本，稳定性非常好，适合服务器使用。</li>
<li>Fedora Core ：由原来的Redhat桌面版本发展而来，免费版本，稳定性较差，最好只用于桌面应用， 用户可免费体验到最新的技术或工具，而功能成熟后会被加入到RHEL系统中。因此也被称为RHEL系统的“试验田”。</li>
<li>CentOS：RHEL的社区克隆版本，免费版本，稳定性非常好，适合服务器使用，CentOS 是RHEL源代码再编译的产物，而且在RHEL的基础上修正了不少已知的 Bug ，相对于其他 Linux 发行版，其稳定性值得信赖。</li>
<li>OpenSUSE： 德国著名的Linux系统，全球范围内有着不错的声誉及市场占有率，发行量在欧洲占第一位。。OpenSUSE对个人来说是完全免费的，包括使用和在线更新。  </li>
</ul>
<h2 id="Debian系列"><a href="#Debian系列" class="headerlink" title="Debian系列"></a>Debian系列</h2><p>包括Debian和Ubuntu等。Debian是社区类Linux的典范，是迄今为止最遵循GNU规范的Linux系统。提供了接近十万种不同的开源软件支持，在国外用于很高的认可度和使用率。对于各类内核架构支持性良好，稳定性、安全性强更有免费的技术支持。</p>
<p>Debian最具特色的是apt-get / dpkg包管理方式。<br>分为三个版本分支(branch):</p>
<ul>
<li>unstable，为最新的测试版本，其中包括最新的软件包，但是也有相对较多的bug，适合桌面用户。</li>
<li>testing，经过unstable中的测试，相对较为稳定，也支持了不少新技术。</li>
<li>stable，一般只用于服务器，上面的软件包大部分都比较过时，但是稳定和安全性都非常的高。</li>
</ul>
<h1 id="Debian系列-1"><a href="#Debian系列-1" class="headerlink" title="Debian系列"></a>Debian系列</h1><h2 id="换源方式"><a href="#换源方式" class="headerlink" title="换源方式"></a>换源方式</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list /</span>etc<span class="regexp">/apt/</span>sources.list.bak <span class="comment">#备份原来的源</span></span><br><span class="line">vim <span class="regexp">/etc/</span>apt/sources.list <span class="comment">#使用vim编辑器输入新的源</span></span><br><span class="line">apt-get update <span class="comment">#更新</span></span><br></pre></td></tr></table></figure>

<h2 id="debian9源"><a href="#debian9源" class="headerlink" title="debian9源"></a>debian9源</h2><h3 id="debian9美国官方源"><a href="#debian9美国官方源" class="headerlink" title="debian9美国官方源"></a>debian9美国官方源</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> stretch main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> stretch-proposed-updates main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> stretch main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> stretch-proposed-updates main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> stretch-backports main contrib non-free</span><br><span class="line">deb-src http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> stretch-backports main contrib non-free</span><br><span class="line">deb http:<span class="regexp">//</span>security.debian.org<span class="regexp">/ stretch/u</span>pdates main</span><br><span class="line">deb-src http:<span class="regexp">//</span>security.debian.org<span class="regexp">/ stretch/u</span>pdates main</span><br></pre></td></tr></table></figure>

<h3 id="debian9-163镜像源"><a href="#debian9-163镜像源" class="headerlink" title="debian9 163镜像源"></a>debian9 163镜像源</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> stretch main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> stretch-updates main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> stretch-backports main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> stretch main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> stretch-updates main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> stretch-backports main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian-security/</span> stretch/updates main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian-security/</span> stretch/updates main non-free contrib</span><br></pre></td></tr></table></figure>

<h3 id="debian9-中科大镜像源"><a href="#debian9-中科大镜像源" class="headerlink" title="debian9 中科大镜像源"></a>debian9 中科大镜像源</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> stretch main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> stretch main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> stretch-updates main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> stretch-updates main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> stretch-backports main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> stretch-backports main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian-security/</span> stretch/updates main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian-security/</span> stretch/updates main contrib non-free</span><br></pre></td></tr></table></figure>

<h3 id="debian9-阿里云镜像源"><a href="#debian9-阿里云镜像源" class="headerlink" title="debian9 阿里云镜像源"></a>debian9 阿里云镜像源</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> stretch main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> stretch main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian-security stretch/u</span>pdates main</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian-security stretch/u</span>pdates main</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> stretch-updates main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> stretch-updates main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> stretch-backports main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> stretch-backports main non-free contrib</span><br></pre></td></tr></table></figure>

<h3 id="debian9-清华镜像源"><a href="#debian9-清华镜像源" class="headerlink" title="debian9 清华镜像源"></a>debian9 清华镜像源</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> stretch main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> stretch main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> stretch-updates main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> stretch-updates main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> stretch-backports main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> stretch-backports main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian-security/</span> stretch/updates main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian-security/</span> stretch/updates main contrib non-free</span><br></pre></td></tr></table></figure>



<h2 id="debian10源"><a href="#debian10源" class="headerlink" title="debian10源"></a>debian10源</h2><h3 id="debian10美国官方源"><a href="#debian10美国官方源" class="headerlink" title="debian10美国官方源"></a>debian10美国官方源</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> buster main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> buster-proposed-updates main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> buster main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> buster-proposed-updates main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> buster-backports main contrib non-free</span><br><span class="line">deb-src http:<span class="regexp">//</span>ftp.us.debian.org<span class="regexp">/debian/</span> buster-backports main contrib non-free</span><br><span class="line">deb http:<span class="regexp">//</span>security.debian.org<span class="regexp">/ buster/u</span>pdates main</span><br><span class="line">deb-src http:<span class="regexp">//</span>security.debian.org<span class="regexp">/ buster/u</span>pdates main</span><br></pre></td></tr></table></figure>



<h3 id="debian10阿里源"><a href="#debian10阿里源" class="headerlink" title="debian10阿里源"></a>debian10阿里源</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster-updates main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster-backports main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster-updates main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster-backports main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian-security/</span> buster/updates main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian-security/</span> buster/updates main non-free contrib</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="debian10网易源"><a href="#debian10网易源" class="headerlink" title="debian10网易源"></a>debian10网易源</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> buster main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> buster-updates main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> buster-backports main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> buster main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> buster-updates main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian/</span> buster-backports main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian-security/</span> buster/updates main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/debian-security/</span> buster/updates main non-free contrib</span><br></pre></td></tr></table></figure>



<h3 id="debian10中科大源"><a href="#debian10中科大源" class="headerlink" title="debian10中科大源"></a>debian10中科大源</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> buster main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> buster-updates main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> buster-backports main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian-security/</span> buster/updates main contrib non-free</span><br><span class="line"> </span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> buster main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> buster-updates main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian/</span> buster-backports main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian-security/</span> buster/updates main contrib non-free</span><br></pre></td></tr></table></figure>



<h2 id="ubuntu16-04源"><a href="#ubuntu16-04源" class="headerlink" title="ubuntu16.04源"></a>ubuntu16.04源</h2><h3 id="官方源"><a href="#官方源" class="headerlink" title="官方源"></a>官方源</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//</span>archive.ubuntu.com<span class="regexp">/ubuntu/</span> xenial main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//</span>archive.ubuntu.com<span class="regexp">/ubuntu/</span> xenial-security main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//</span>archive.ubuntu.com<span class="regexp">/ubuntu/</span> xenial-updates main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//</span>archive.ubuntu.com<span class="regexp">/ubuntu/</span> xenial-proposed main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//</span>archive.ubuntu.com<span class="regexp">/ubuntu/</span> xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//</span>archive.ubuntu.com<span class="regexp">/ubuntu/</span> xenial main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//</span>archive.ubuntu.com<span class="regexp">/ubuntu/</span> xenial-security main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//</span>archive.ubuntu.com<span class="regexp">/ubuntu/</span> xenial-updates main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//</span>archive.ubuntu.com<span class="regexp">/ubuntu/</span> xenial-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//</span>archive.ubuntu.com<span class="regexp">/ubuntu/</span> xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>





<h2 id="ubuntu18-04源"><a href="#ubuntu18-04源" class="headerlink" title="ubuntu18.04源"></a>ubuntu18.04源</h2><p>待添加</p>
<h1 id="RedHat系列"><a href="#RedHat系列" class="headerlink" title="RedHat系列"></a>RedHat系列</h1><h2 id="yum、epel、rpm"><a href="#yum、epel、rpm" class="headerlink" title="yum、epel、rpm"></a>yum、epel、rpm</h2><p>repo是配置源的，即配置从哪里下载包（以及依赖关系）的。</p>
<p>epel是作为桥的，centos等企业linux不具有repo，yum的功能，所以需要安装epel，使得其具有yum功能。</p>
<p>centos是redhat的开源版本，是企业linux系列的，没有yum功能, 所以需要配置epel。</p>
<p>配置了epel，又需要配置repo，以使得软件源有软件，且软件是较新的较全的。</p>
<br>

<p>RPM，全称为RPM Package Manager，是由Red Hat推出的软件包管理系统，现在在各种发行版中普遍使用。RPM仅适用于安装用RPM来打包的软件，目前是GNU/Linux下软件包资源最丰富的软件包类型。</p>
<p>Yum (Yellow dog Updater, Modified) 是一个基于 RPM 包管理的字符前端软件包管理器，能够从指定的服务器自动下载 RPM 包并且安装，可以自动解决处理包依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装，更方便的添加/删除/更新RPM包，便于管理系统的更新问题。被Yellow Dog Linux本身，以及Fedora、Red Hat Enterprise Linux采用。</p>
<p>Yum和RPM的关系就如同apt（前端）和dpkg（后端）。</p>
<h2 id="换源方式-1"><a href="#换源方式-1" class="headerlink" title="换源方式"></a>换源方式</h2><p>如果需要备份现有源，可以参考以下命令</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/etc/yum</span>.repos.d/backup</span><br><span class="line">mv <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/*.* /</span>etc<span class="regexp">/yum.repos.d/</span>backup</span><br></pre></td></tr></table></figure>

<p>换源过程</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">使用wegt或curl命令下载repo文件到<span class="regexp">/etc/yum</span>.repos.d/文件下</span><br></pre></td></tr></table></figure>

<p>更新源命令</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum</span> clean <span class="literal">all</span></span><br><span class="line"><span class="attribute">yum</span> makecache</span><br><span class="line"><span class="comment">#查看源列表</span></span><br><span class="line"><span class="attribute">yum</span> repolist <span class="literal">all</span></span><br></pre></td></tr></table></figure>

<h2 id="Cento7-换源"><a href="#Cento7-换源" class="headerlink" title="Cento7 换源"></a>Cento7 换源</h2><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><p>阿里云的各种源 <a href="http://mirrors.aliyun.com/repo/">http://mirrors.aliyun.com/repo/</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -O <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/CentOS7-Aliyun.repo http:/</span><span class="regexp">/mirrors.aliyun.com/</span>repo/Centos-<span class="number">7</span>.repo</span><br><span class="line">wget -O <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/epel-7-Aliyun.repo http:/</span><span class="regexp">/mirrors.aliyun.com/</span>repo/epel-<span class="number">7</span>.repo</span><br></pre></td></tr></table></figure>

<h3 id="网易源"><a href="#网易源" class="headerlink" title="网易源"></a>网易源</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> -O /etc/yum.repos.d/CentOS<span class="number">7</span>-<span class="number">163</span>-Base.repo http://mirrors.<span class="number">163</span>.com/.help/CentOS<span class="number">7</span>-Base-<span class="number">163</span>.repo</span><br></pre></td></tr></table></figure>



<h1 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h1><ol>
<li><p><a href="https://www.cnblogs.com/xiaojianliu/articles/9418081.html">https://www.cnblogs.com/xiaojianliu/articles/9418081.html</a></p>
</li>
<li><p><a href="https://blog.csdn.net/toopoo/article/details/104514504">https://blog.csdn.net/toopoo/article/details/104514504</a></p>
</li>
<li><p><a href="https://blog.csdn.net/fantaxy025025/article/details/84918199">https://blog.csdn.net/fantaxy025025/article/details/84918199</a></p>
</li>
<li><p><a href="https://0066.in/archives/17">https://0066.in/archives/17</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>换源</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常用命令</title>
    <url>/posts/92cd9797/</url>
    <content><![CDATA[<blockquote>
<p>常用的MySQL命令，记录下来，以便查询</p>
</blockquote>
<span id="more"></span>

<ol>
<li><p>压缩版Mysql下载安装教程: <a href="https://blog.csdn.net/Recky_wiers/article/details/79243804">https://blog.csdn.net/Recky_wiers/article/details/79243804</a></p>
</li>
<li><p>mysql教程: <a href="https://blog.csdn.net/qq_34115899/article/details/81190461">https://blog.csdn.net/qq_34115899/article/details/81190461</a></p>
</li>
<li><p>查看mysql版本</p>
<figure class="highlight diff"><figcaption><span>查看版本</span></figcaption><table><tr><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动和关闭mysql服务</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">net start mysql <span class="regexp">//</span>启动mysql服务</span><br><span class="line">net stop mysql <span class="regexp">//</span>停止mysql服务</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改密码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -p password <span class="regexp">//</span>执行后会让用户输入旧密码，再输入两次新密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录mysql账户</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mysql -u root -p <span class="regexp">//</span>命令完成后输入密码登录</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接远程主机上的mysql</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">mysql</span> -h <span class="built_in">ip</span> -u root -p password</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看mysql数据库的存储位置</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> &quot;%datadir%&quot;;</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3高级编程第2版-语法类级别以上</title>
    <url>/posts/700b7704/</url>
    <content><![CDATA[<blockquote>
<p>学习总结：Python高级编程第2版-语法最佳实践-类级别以上</p>
<ul>
<li>子类化内置类型</li>
<li>访问超类中的方法</li>
<li>高级属性访问模式</li>
</ul>
</blockquote>
<span id="more"></span>

<h1 id="子类化内置类型"><a href="#子类化内置类型" class="headerlink" title="子类化内置类型"></a>子类化内置类型</h1><p>Python中的类都有一个共同的祖先<code>object</code>。当需要实现与某个内置类型相似的行为时，可以将这个内置类型子类化。</p>
<h2 id="子类化dict"><a href="#子类化dict" class="headerlink" title="子类化dict"></a>子类化dict</h2><p>我们创建子类 distinctdict 继承 dict ，添加新元素时不允许多个键对应相同的键值，否则触发自定义异常<code>DistinctError</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DistinctError</span>(<span class="params">ValueError</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;如果向distinctdict添加重复value，则触发该异常&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">distinctdict</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">in</span> self.values():</span><br><span class="line">            <span class="keyword">if</span> (key <span class="keyword">in</span> self <span class="keyword">and</span> self[key] != value) <span class="keyword">or</span> key <span class="keyword">not</span> <span class="keyword">in</span> self:</span><br><span class="line">                <span class="keyword">raise</span> DistinceError(<span class="string">&quot;This value already exists for different key&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__setitem__(key, value)</span><br></pre></td></tr></table></figure>

<h2 id="子类化list"><a href="#子类化list" class="headerlink" title="子类化list"></a>子类化list</h2><p>我们创建子类Folder继承list，管理序列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Folder</span>(<span class="params"><span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dir</span>(<span class="params">self, nesting=<span class="number">0</span></span>):</span></span><br><span class="line">        offset = <span class="string">&quot;  &quot;</span>*nesting</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s%s/&quot;</span> % (offset, self.name))</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(element, <span class="string">&#x27;dir&#x27;</span>):</span><br><span class="line">                element.<span class="built_in">dir</span>(nesting+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s  %s&quot;</span> % (offset, element))</span><br></pre></td></tr></table></figure>

<p>在交互式shell中测试，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree = Folder(<span class="string">&#x27;project&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree.append(<span class="string">&#x27;README.md&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree.<span class="built_in">dir</span>()</span><br><span class="line">project/</span><br><span class="line">  README.md</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>src = Folder(<span class="string">&quot;src&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>src.append(<span class="string">&quot;script.py&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree.append(src)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree.<span class="built_in">dir</span>()</span><br><span class="line">project/</span><br><span class="line">  README.md</span><br><span class="line">  src/</span><br><span class="line">    script.py</span><br></pre></td></tr></table></figure>

<h1 id="访问超类中的方法"><a href="#访问超类中的方法" class="headerlink" title="访问超类中的方法"></a>访问超类中的方法</h1><p><code>super</code>是一个内置类，可用于访问某个对象的超类的属性。</p>
<blockquote>
<p> Python官方文档将super作为内置函数给出，虽然它的用法与函数类似，但实际上它是一个内置类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">super</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">super</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="旧的写法与新的写法"><a href="#旧的写法与新的写法" class="headerlink" title="旧的写法与新的写法"></a>旧的写法与新的写法</h2><p>旧的写法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mama</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mama: Hello&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">says</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;do your homework&quot;</span>)</span><br><span class="line">        self.say_hello()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sister</span>(<span class="params">Mama</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sister: Hello&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">says</span>(<span class="params">self</span>):</span></span><br><span class="line">        Mama.says(self)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;and clean your bedroom&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>上述例子中<code>Mama.says(self)</code>表明调用超类中的方法，传入的是子类本身self, 下面是执行案例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Sister().says()</span><br><span class="line">do your homework</span><br><span class="line">Sister: Hello</span><br><span class="line"><span class="keyword">and</span> clean your bedroom</span><br></pre></td></tr></table></figure>

<p>下面展示使用super的写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mama</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mama: Hello&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">says</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;do your homework&quot;</span>)</span><br><span class="line">        self.say_hello()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sister</span>(<span class="params">Mama</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sister: Hello&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">says</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Sister, self).says() <span class="comment"># 或者super().says()</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;and clean your bedroom&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>super 可以在方法内部使用，也可以在方法外部使用，下面的例子是在方法外部使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>anita = Sister()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>anita.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Sister</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">super</span>(<span class="params">anita.__class__, anita</span>).<span class="title">says</span>()</span></span><br><span class="line"><span class="class"><span class="title">do</span> <span class="title">your</span> <span class="title">homework</span></span></span><br><span class="line"><span class="class"><span class="title">Sister</span>:</span> Hello</span><br></pre></td></tr></table></figure>

<p>super 的第二个参数是可选的，如果只提供第一个参数，那么super返回的是一个未绑定的类型，这一点与classmethod 在一起使用时特别有用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pizza</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, toppings</span>):</span></span><br><span class="line">        self.toppings = toppings</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pizza with: &quot;</span> + <span class="string">&quot; and &quot;</span>.join(self.toppings)</span><br><span class="line">   	</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recommend</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls([<span class="string">&quot;spam&quot;</span>, <span class="string">&quot;ham&quot;</span>, <span class="string">&quot;eggs&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VikingPizza</span>(<span class="params">Pizza</span>):</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recommend</span>(<span class="params">cls</span>):</span></span><br><span class="line">        recommended = <span class="built_in">super</span>().recommend() <span class="comment"># 书中是super(VikingPizza).recommend()，但是python3.7.9运行报错</span></span><br><span class="line">        recommended.toppings += [<span class="string">&#x27;spam&#x27;</span>] * <span class="number">5</span></span><br><span class="line">        <span class="keyword">return</span> recommended</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<ul>
<li>多继承中super将变得非常难用</li>
<li>需要理解何时避免使用 super </li>
<li>需要理解方法解析顺序（Method Resolution Order, MRO)</li>
</ul>
<h2 id="理解Python的MRO"><a href="#理解Python的MRO" class="headerlink" title="理解Python的MRO"></a>理解Python的MRO</h2><p>Python的解析方法基于C3，C3是为Dylan编程语言构建的MRO，参考文档位于 <a href="https://www.python.org/download/releases/2.3/mro/">https://www.python.org/download/releases/2.3/mro/</a> 。描述了C3是如何构建一个类的线性化（优先级，祖先的有序列表）。</p>
<ul>
<li>L[MyClass(Basel, Base2)] = MyClass +  merge(L[Basel],  L[Base2],  Basel, Base2)</li>
<li>C的线性化是C加上父类的线性化和父类列表的合并的总和</li>
<li>merge算法负责删除重复项并保持正确的顺序</li>
</ul>
<p>类的<code>__mro__</code>属性保存了线性化的计算结果，也可以调用 <code>.mro()</code>获取。</p>
<h2 id="使用super易犯的错误"><a href="#使用super易犯的错误" class="headerlink" title="使用super易犯的错误"></a>使用super易犯的错误</h2><p>如果在多继承下使用了 super ，这是非常危险的，主要原因在于类的初始化。在Python中，基类不会在<code>__init__()</code>中被隐式的调用，所以需要开发人员来调用它们。</p>
<h3 id="混用super与显示类调用"><a href="#混用super与显示类调用" class="headerlink" title="混用super与显示类调用"></a>混用super与显示类调用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A, B</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        A.__init__(self)</span><br><span class="line">        B.__init__(self)</span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.mro()</span><br><span class="line">[&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">C</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">A</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">B</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;]</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params"><span class="string">&quot;MRO:&quot;</span>, [x.__name__ <span class="keyword">for</span> x <span class="keyword">in</span> C.mro(<span class="params"></span>)]</span>)</span></span><br><span class="line"><span class="class"><span class="title">MRO</span>:</span> [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;object&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C()</span><br><span class="line">C A B B &lt;__main__.C <span class="built_in">object</span> at <span class="number">0x0000028B7F5FBD08</span>&gt;</span><br></pre></td></tr></table></figure>

<p>出现上面输出的原因是C的实例调用了A的<code>__init__()</code>函数，使得<code>super(A, self).__init__()</code>调用了<code>B.__init__()</code>方法。</p>
<p>super 应被用到整个类的层次结构中，但不幸的是，有时这种层次结构位于第三方代码中，你无法确定外部包代码中是否使用了 super 。如果需要对第三方类进行子类化，最好总是查看其内部代码以及MRO中其他类的内部代码。</p>
<h3 id="不同种类的参数"><a href="#不同种类的参数" class="headerlink" title="不同种类的参数"></a>不同种类的参数</h3><p>使用 super 的另一个问题是初始化过程中的参数传递。如果没有相同的签名，一个类怎么能调用其基类的<code>__init__()</code>代码呢？这会导致下列问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonBase</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;CommonBase&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span>(<span class="params">CommonBase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Base1&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span>(<span class="params">CommonBase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, arg</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Base2&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(<span class="params">Base1, Base2</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, arg</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;MyClass&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__init__(arg)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyClass()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: __init__() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;arg&#x27;</span>    </span><br></pre></td></tr></table></figure>

<p>创建MyClass会报错，原因是其与父类Bas1的<code>__init__()</code>签名不匹配。</p>
<p>解决这种问题的办法之一是将所有类的参数都写成<code>*args, **kwargs</code>这种形式，但这会导致代码很脆弱，任何参数都能被接受。</p>
<p>另一种方式是在MyClass中显示调用<code>__init__()</code>，但这会导致和上一小节相同的问题。</p>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li><strong>避免使用多继承</strong>：使用设计模式来代替它</li>
<li><strong>super的使用必须一致</strong>：在类的层次结构中，要么不用super，要么全用super</li>
<li><strong>调用父类时必须查看类的层次结构</strong></li>
</ul>
<h1 id="高级属性访问模式"><a href="#高级属性访问模式" class="headerlink" title="高级属性访问模式"></a>高级属性访问模式</h1><p>C++和JAVA中有private关键字保护属性，但是在Python中与其最接近的是<strong>名称修饰</strong>(name mangling)，每当在一个属性前面加上<code>__</code>前缀，解释器就会立即将其<strong>重命名</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>  __secret = <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__secret</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;A&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;__secret&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(a)</span><br><span class="line">[<span class="string">&#x27;_A__secret&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>可以看出 <code>__secret</code>属性被重命名为<code>_A__secret</code>。</p>
<p><strong>Python提供这一特性是为了避免继承中的名称冲突</strong>。</p>
<p>在Python中，如果一个属性不是公有的，约定以前缀<code>_</code>开头，这是流行的写法。</p>
<p><strong>Python中还有其他可用机制来构建类的公有代码和私有代码，应该使用descriptor和property这些OOP设计的关键特性来设计一个清晰的API。</strong></p>
<h2 id="descriptor-描述符"><a href="#descriptor-描述符" class="headerlink" title="descriptor - 描述符"></a>descriptor - 描述符</h2><ul>
<li><p>描述符允许我们自定义在引用一个对象的属性应该完成的事情。</p>
</li>
<li><p>描述符是Python中复杂属性访问的基础。</p>
</li>
<li><p>描述符在内部用于实现 <code>property</code>、<code>方法</code>、<code>类方法</code>、<code>静态方法</code>、<code>super类型</code>。</p>
</li>
<li><p>描述符是一个类，定义了另一个类的属性访问方式，即一个类可以将属性管理委托给另一个类。</p>
</li>
</ul>
<p><strong>描述符协议</strong>：描述符类基于下面三个特殊方法</p>
<ol>
<li><code>__set__(self, obj, type=None)</code>: 设置属性时将调用这一方法，称为setter</li>
<li><code>__get__(self, obj, value)</code>: 获取属性时将调用这一方法，称为getter</li>
<li><code>__delete__(self, obj)</code>: 对属性调用 del 或 调用delattr方法时将调用这一方法</li>
</ol>
<p><strong>数据描述符</strong>：实现了<code>__set__</code>和<code>__get__</code>的描述符</p>
<p><strong>非数据描述符</strong>：只实现了<code>__get__</code>的描述符</p>
<p>在每次属性查找时，这个协议的方法实际上由对象的特殊方法<code>__getattribute__()</code>调用（不要与<code>__getattr__()</code>混淆，后者用于其他目的）。</p>
<p>每次通过点号，形式为(instance.attribute)，或者<code>getattr(instance, &#39;attribute&#39;)</code>函数执行来执行这样的查找时，都会隐式地调用<code>__getattribute__()</code>方法，它按下列顺序查找属性：</p>
<ol>
<li>验证该属性是否为对象的数据描述符</li>
<li>如果不是，查看该属性是否能在实例对象的<code>__dict__</code>中找到。</li>
<li>最后，查看该属性是否为对象的非数据描述符</li>
</ol>
<h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RevealAccess</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个数据描述符&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, initval=<span class="literal">None</span>, name=<span class="string">&quot;var&quot;</span></span>):</span></span><br><span class="line">        self.val = initval</span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, obj, objtype</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Get&quot;</span>, self.name)</span><br><span class="line">        <span class="keyword">return</span> self.val</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span>(<span class="params">self, obj, val</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Set&quot;</span>, self.name)</span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    x = RevealAccess(<span class="number">10</span>, <span class="string">&#x27;var &quot;x&quot;&#x27;</span>)</span><br><span class="line">    y = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.x</span><br><span class="line">Get var <span class="string">&quot;x&quot;</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.x = <span class="number">20</span></span><br><span class="line"><span class="type">Set</span> var <span class="string">&quot;x&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.x</span><br><span class="line">Get var <span class="string">&quot;x&quot;</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.y</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>数据描述符和非数据描述符的区别很重要。</p>
<ul>
<li><p>Python已经使用描述符协议将类函数绑定为实例方法</p>
</li>
<li><p>描述符还支持了classmethod和staticmethod装饰器背后的机制</p>
</li>
</ul>
<p>函数和lambda表达式是非数据描述符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span> <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hasattr</span>(func, <span class="string">&#x27;__get__&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hasattr</span>(fun, <span class="string">&#x27;__set__&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hasattr</span>(<span class="keyword">lambda</span>: <span class="literal">None</span>, <span class="string">&#x27;__get__&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hasattr</span>(<span class="keyword">lambda</span>: <span class="literal">None</span>, <span class="string">&#x27;__set__&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>因此，如果没有<code>__dict__</code>优先于非数据描述符，我们不可能在运行时在已经构建好的实例上动态覆写特定的方法。幸运的是，多亏了Python的描述符工作方式，由于这一工作方法，使得开发人员可以使用一种叫做<strong>猴子补丁</strong>（monkey-patching）的流行技术来改变实例的工作方式，而不需要子类化。</p>
<h3 id="例子-延迟求值属性"><a href="#例子-延迟求值属性" class="headerlink" title="例子 - 延迟求值属性"></a>例子 - 延迟求值属性</h3><p>将类属性的初始化延迟到被实例访问时。</p>
<ul>
<li>情况一：这些属性的初始化依赖全局上下文</li>
<li>情况二：初始化的代价很大，在导入类的时候不知道是否会用到这个属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitOnAccess</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, klass, *args, **kwargs</span>):</span></span><br><span class="line">        self.klass = klass</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        self._initialized = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span>(<span class="params">self, instance, owner</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._initialized <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._initialized = self.klass(*self.args, **self.kwargs)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;initialized&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;cached&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self._initialized</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line"><span class="meta">... </span>    value = InitOnAccess(<span class="built_in">list</span>, <span class="string">&quot;argument&quot;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.value</span><br><span class="line">initialized</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;t&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.value</span><br><span class="line">cached</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;t&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="property"><a href="#property" class="headerlink" title="property"></a>property</h2><p>property提供了一个内置的描述符类型，它知道如何将一个属性链接到一组方法上。</p>
<p>property接受4个可选参数：fget、fset、fdel和doc。最后一个参数可以用来定义一个链接到属性的 docstring，就像是一个方法一样。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x1, y1, x2, y2</span>):</span></span><br><span class="line">        self.x1, self.y1 = x1, y1</span><br><span class="line">        self.x2, self.y2 = x2, y2</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;rectangle width&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.x2 - self.x1</span><br><span class="line"><span class="meta">    @width.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.x2 = self.x1 + value</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;rectangle height&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.y2 - self.y1</span><br><span class="line"><span class="meta">    @height.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.y2 = self.y1 + value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#125;(&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;)&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            self.__class__.__name__, </span><br><span class="line">            self.x1, self.y1, self.x2, self.y2</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rec = Rectangle(<span class="number">10</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">24</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rec.width, rec.height</span><br><span class="line">(<span class="number">15</span>, <span class="number">14</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rec.width = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rec</span><br><span class="line">Rectangle(<span class="number">10</span>, <span class="number">10</span>, <span class="number">110</span>, <span class="number">24</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rec.height = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rec</span><br><span class="line">Rectangle(<span class="number">10</span>, <span class="number">10</span>, <span class="number">110</span>, <span class="number">110</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(Rectangle)</span><br><span class="line">Help on <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="title">in</span> <span class="title">module</span> <span class="title">__main__</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>(<span class="params">builtins.<span class="built_in">object</span></span>)</span></span><br><span class="line"><span class="class"> |  <span class="title">Rectangle</span>(<span class="params">x1, y1, x2, y2</span>)</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  <span class="title">Methods</span> <span class="title">defined</span> <span class="title">here</span>:</span></span><br><span class="line"> |</span><br><span class="line"> |  __init__(self, x1, y1, x2, y2)</span><br><span class="line"> |      Initialize self.  See <span class="built_in">help</span>(<span class="built_in">type</span>(self)) <span class="keyword">for</span> accurate signature.</span><br><span class="line"> |</span><br><span class="line"> |  __repr__(self)</span><br><span class="line"> |      Return <span class="built_in">repr</span>(self).</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data descriptors defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __dict__</span><br><span class="line"> |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined)</span><br><span class="line"> |</span><br><span class="line"> |  __weakref__</span><br><span class="line"> |      <span class="built_in">list</span> of weak references to the <span class="built_in">object</span> (<span class="keyword">if</span> defined)</span><br><span class="line"> |</span><br><span class="line"> |  height</span><br><span class="line"> |      rectangle height</span><br><span class="line"> |</span><br><span class="line"> |  width</span><br><span class="line"> |      rectangle width</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="槽"><a href="#槽" class="headerlink" title="槽"></a>槽</h2><p>允许开发人员使用<code>__slots__</code>属性为指定的类设置一个静态属性列表，并在类的每个实例中跳过<code>__dict__</code>字典的创建过程，它可以为属性很少的类解决内存空间，因为每个实例都没有创建<code>__dict__</code>。</p>
<p>除此之外，它还可以有助于签名需要被冻结的类，但是对派生类就解除了这个限制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Frozen</span>:</span></span><br><span class="line"><span class="meta">... </span>    __slots__ = [<span class="string">&#x27;ice&#x27;</span>, <span class="string">&#x27;cream&#x27;</span>]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;__dict__&#x27;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(Frozen)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;ice&#x27;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(Frozen)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frozen = Frozen()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frozen.ice = <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frozen.cream = <span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frozen.icy = <span class="literal">True</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;Frozen&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;icy&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python_syntax</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3高级编程第2版-有用的设计模式</title>
    <url>/posts/afd7e303/</url>
    <content><![CDATA[<blockquote>
<p>学习总结：Python高级编程第2版 - 有用的设计模式</p>
<ul>
<li>创建型模式：用于生成具有特定行为的对象</li>
<li>单例模式</li>
<li>结构型模式：有助于为特定用例构建代码</li>
<li>适配器模式</li>
<li>代理模式</li>
<li>外观模式</li>
<li>行为模式：有助于分配责任和封装行为</li>
<li>观察者模式</li>
<li>访问者模式</li>
<li>模板模式</li>
</ul>
</blockquote>
<span id="more"></span>

<h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="通过-new-方法实现"><a href="#通过-new-方法实现" class="headerlink" title="通过__new__方法实现"></a>通过<code>__new__</code>方法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls._instance = <span class="built_in">super</span>().__new__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br></pre></td></tr></table></figure>

<p>这种方式不适用于继承的情况。如果你已经创建了一个基类的实例，那么当你尝试对你的单例基类进行子类化并创建一个新的子类的实例时，问题就开始了。</p>
<h3 id="通过-call-方法实现"><a href="#通过-call-方法实现" class="headerlink" title="通过__call__方法实现"></a>通过<code>__call__</code>方法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span><br><span class="line">    _instance = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> cls._instance:</span><br><span class="line">            cls._instance[cls] = <span class="built_in">super</span>().__call__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance[cls]</span><br></pre></td></tr></table></figure>

<h3 id="通过共享-dict-实现"><a href="#通过共享-dict-实现" class="headerlink" title="通过共享__dict__实现"></a>通过共享<code>__dict__</code>实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span><br><span class="line">    _state = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        ob = <span class="built_in">super</span>().__new__(cls, *args, **kwargs)</span><br><span class="line">        ob.__dict__ = cls._state</span><br><span class="line">        <span class="keyword">return</span> ob</span><br></pre></td></tr></table></figure>

<p>这种方式不适用于子类重写 <code>__getattr__</code>函数的情况。</p>
<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1>]]></content>
      <categories>
        <category>python_syntax</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3高级编程第2版-语法类级别以下</title>
    <url>/posts/70c4792/</url>
    <content><![CDATA[<blockquote>
<p>学习总结：Python高级编程第2版-语法最佳实践-类级别以下</p>
<ul>
<li>字符串与字节</li>
<li>集合类型</li>
<li>迭代器</li>
<li>生成器</li>
<li>装饰器</li>
<li>上下文管理器 - with语句</li>
<li>for … else …</li>
<li>函数注解</li>
</ul>
</blockquote>
<span id="more"></span>

<h1 id="字符串与字节"><a href="#字符串与字节" class="headerlink" title="字符串与字节"></a>字符串与字节</h1><ul>
<li>str: 字符串</li>
<li> bytes: 字节数组</li>
<li>bytearray: 可变字节数组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">bytes</span>([<span class="number">100</span>,<span class="number">121</span>,<span class="number">101</span>]))</span><br><span class="line"><span class="string">b&#x27;dye&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="string">b&#x27;dye&#x27;</span>)</span><br><span class="line">[<span class="number">100</span>, <span class="number">121</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = <span class="string">b&quot;你好&quot;</span></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: <span class="built_in">bytes</span> can only contain ASCII literal characters.</span><br></pre></td></tr></table></figure>

<p>Unicode字符串中包含无法用字节表示的”抽象”文本. 因此<strong>如果Unicode字符串没有被转换成二进制数据的话，是无法保存在磁盘中或通过网络发送的</strong>。</p>
<p>将字符串对象编码为字节序列的方式：</p>
<ul>
<li>str.encode(encoding, errors)</li>
<li>bytes(source, encoding, errors)</li>
</ul>
<p>将二进制数据转化为字符串的方式：</p>
<ul>
<li>bytes.decode(encoding, errors)</li>
<li>str(source, encoding, error)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;你好&quot;</span>.encode()</span><br><span class="line"><span class="string">b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="string">&quot;你好&quot;</span>.encode()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="string">b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.decode()</span><br><span class="line"><span class="string">&#x27;你好&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">type</span>(t))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">bytes</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="数据结构进阶"><a href="#数据结构进阶" class="headerlink" title="数据结构进阶"></a>数据结构进阶</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>下面的用法几乎适用于任何可迭代对象</p>
<h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>

<h3 id="enumerate-枚举"><a href="#enumerate-枚举" class="headerlink" title="enumerate(枚举)"></a>enumerate(枚举)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, ele <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i, ele)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="zip-压包解包"><a href="#zip-压包解包" class="headerlink" title="zip 压包解包"></a>zip 压包解包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>]):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(item)</span><br><span class="line">...</span><br><span class="line">(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">zip</span>(*<span class="built_in">zip</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>])):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(item)</span><br><span class="line">...</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,*c = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="字典推导"><a href="#字典推导" class="headerlink" title="字典推导"></a>字典推导</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;i:i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">8</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="keys-values-items"><a href="#keys-values-items" class="headerlink" title="keys() values() items()"></a>keys() values() items()</h3><p>三者返回的是视图对象</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合推导"><a href="#集合推导" class="headerlink" title="集合推导"></a>集合推导</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;i <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>)&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="set-和frozenset"><a href="#set-和frozenset" class="headerlink" title="set()和frozenset()"></a>set()和frozenset()</h3><p><strong>frozenset()</strong> 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</p>
<h2 id="collections库"><a href="#collections库" class="headerlink" title="collections库"></a>collections库</h2><ul>
<li>Counter：字典的子类，提供了可哈希对象的计数功能</li>
<li>defaultdict：字典的子类，提供了一个工厂函数，为字典查询提供了默认值</li>
<li>OrderedDict：字典的子类，保留了他们被添加的顺序</li>
<li>namedtuple：创建命名元组子类的工厂函数</li>
<li>deque：类似列表容器，实现了在两端快速添加(append)和弹出(pop)</li>
<li>ChainMap：类似字典的容器类，将多个映射集合到一个视图里面</li>
</ul>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>迭代器只不过是实现迭代器协议的容器对象。它基于以下两个方法：</p>
<ul>
<li>__next__：返回容器下一个元素</li>
<li>__iter__：返回迭代器本身</li>
</ul>
<h2 id="使用iter函数"><a href="#使用iter函数" class="headerlink" title="使用iter函数"></a>使用iter函数</h2><p>迭代器可以利用内置iter函数和一个序列来构建，如下例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = <span class="built_in">iter</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(obj)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(obj)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(obj)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(obj)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>

<p>当遍历结束后，可以得到StopIteration异常，捕获到这种异常可停止循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = <span class="built_in">iter</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义迭代器"><a href="#自定义迭代器" class="headerlink" title="自定义迭代器"></a>自定义迭代器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIter</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, step</span>):</span></span><br><span class="line">        self.step = step</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;return the next element&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.step &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.step -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.step+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;return the iterator self&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> ele <span class="keyword">in</span> MyIter(<span class="number">4</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(ele)</span><br><span class="line">...</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>基于yield语句，生成器可以暂停函数并返回一个中间结果。该函数会保存执行上下文，稍后在必要时可以恢复。</p>
<h2 id="斐波那契数列简单生成器"><a href="#斐波那契数列简单生成器" class="headerlink" title="斐波那契数列简单生成器"></a>斐波那契数列简单生成器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>():</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib = fibonacci()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(fib)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(fib)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(fib)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(fib)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(fib)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">generator</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>该函数返回一个generator对象，该对象是一个特殊的迭代器，它知道如何保存上下文。</p>
<p>上述斐波那契数列迭代器对象可以被无限次调用，就像是数列一样。</p>
<h2 id="send函数"><a href="#send函数" class="headerlink" title="send函数"></a>send函数</h2><p>send函数的作用和next类似，但会将send函数内部传入的值变为yield的返回值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">MyGenerator</span>():</span></span><br><span class="line"><span class="meta">... </span>    value = <span class="keyword">yield</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> value</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gen = MyGenerator()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(gen)</span><br><span class="line"><span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(gen)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(gen)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gen = MyGenerator()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(gen)</span><br><span class="line"><span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gen.send(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line"><span class="string">&#x27;Hi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gen = MyGenerator()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gen.send(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: can<span class="string">&#x27;t send non-None value to a just-started generator</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; gen = MyGenerator()</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; gen.send(None)</span></span><br><span class="line"><span class="string">&#x27;</span>Hello<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; gen.send(&quot;Hi&quot;)</span></span><br><span class="line"><span class="string">&#x27;</span>Hi<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>



<p>send函数可以根据客户端代码来改变自身行为，为了完成这一行为，还添加了两个函数：</p>
<ul>
<li>throw：允许客户端发送要抛出的各类异常</li>
<li>close：引发特定异常，GeneratorExit</li>
</ul>
<h2 id="类成员函数作为生成器"><a href="#类成员函数作为生成器" class="headerlink" title="类成员函数作为生成器"></a>类成员函数作为生成器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">yield</span> b</span><br><span class="line"><span class="meta">... </span>            a, b = b, a + b</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aa = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, obj <span class="keyword">in</span> <span class="built_in">enumerate</span>(aa.fibonacci()):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i, obj)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> i &gt; <span class="number">5</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">break</span></span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="number">6</span> <span class="number">13</span></span><br></pre></td></tr></table></figure>

<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>装饰器是一个可调用对象，即函数或者实现了<code>__call__</code>方法的类。</p>
<h2 id="staticmethod和-classmethod"><a href="#staticmethod和-classmethod" class="headerlink" title="@staticmethod和@classmethod"></a>@staticmethod和@classmethod</h2><ul>
<li>@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。</li>
<li>@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。</li>
<li>@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简化前写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;staticmethod&quot;</span>)</span><br><span class="line">    static_method = <span class="built_in">staticmethod</span>(static_method)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span>(<span class="params">cls</span>):</span></span><br><span class="line">        cls.static_method()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;classmethod&quot;</span>)</span><br><span class="line">    class_method = <span class="built_in">classmethod</span>(class_method)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 简化后写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;staticmethod&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span>(<span class="params">cls</span>):</span></span><br><span class="line">        cls.static_method()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;classmethod&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="无参装饰器"><a href="#无参装饰器" class="headerlink" title="无参装饰器"></a>无参装饰器</h2><h3 id="作为一个函数"><a href="#作为一个函数" class="headerlink" title="作为一个函数"></a>作为一个函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用装饰器之前</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_sth</span>(<span class="params">words=<span class="string">&quot;Hello&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(words)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 调用&quot;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">say_sth = decorator(say_sth)</span><br><span class="line">say_sth(<span class="string">&quot;Hi~&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器之后</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 调用&quot;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_sth</span>(<span class="params">words=<span class="string">&quot;Hello&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(words)</span><br><span class="line"> say_sth(<span class="string">&quot;Hi~&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="作为一个类"><a href="#作为一个类" class="headerlink" title="作为一个类"></a>作为一个类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用装饰器之前</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, function</span>):</span></span><br><span class="line">        self.function = function</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 调用&quot;</span> % self.function.__name__)</span><br><span class="line">        <span class="keyword">return</span> self.function(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_sth</span>(<span class="params">words=<span class="string">&quot;Hello&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(words)</span><br><span class="line"></span><br><span class="line">say_sth = DecoratorClass(say_sth)</span><br><span class="line">say_sth(<span class="string">&quot;Hi~&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器之后</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, function</span>):</span></span><br><span class="line">        self.function = function</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 调用&quot;</span> % self.function.__name__)</span><br><span class="line">        <span class="keyword">return</span> self.function(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">@DecoratorClass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_sth</span>(<span class="params">words=<span class="string">&quot;Hello&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(words)</span><br><span class="line"></span><br><span class="line">say_sth(<span class="string">&quot;Hi~&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="带参装饰器"><a href="#带参装饰器" class="headerlink" title="带参装饰器"></a>带参装饰器</h2><h3 id="作为一个函数-1"><a href="#作为一个函数-1" class="headerlink" title="作为一个函数"></a>作为一个函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用装饰器之前</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_sth</span>(<span class="params">words=<span class="string">&quot;Hello&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(words)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">say=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_wrapper</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">if</span> say:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s 调用&quot;</span> % func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> inner_wrapper</span><br><span class="line"></span><br><span class="line">say_sth = decorator(say=<span class="literal">False</span>)(say_sth)</span><br><span class="line">say_sth(<span class="string">&quot;Hi~&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器之后</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">say=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_wrapper</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">if</span> say:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s 调用&quot;</span> % func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> inner_wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator(<span class="params">say=<span class="literal">False</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_sth</span>(<span class="params">words=<span class="string">&quot;Hello&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(words)</span><br><span class="line"></span><br><span class="line">say_sth(<span class="string">&quot;Hi~&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="作为一个类-1"><a href="#作为一个类-1" class="headerlink" title="作为一个类"></a>作为一个类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用装饰器之前</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, say=<span class="literal">True</span></span>):</span></span><br><span class="line">        self.say = say</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">if</span> self.say:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s 调用&quot;</span> % func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_sth</span>(<span class="params">words=<span class="string">&quot;Hello&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(words)</span><br><span class="line"></span><br><span class="line">say_sth = DecoratorClass(say=<span class="literal">False</span>)(say_sth)</span><br><span class="line">say_sth(<span class="string">&quot;Hi~&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器之后</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, say=<span class="literal">True</span></span>):</span></span><br><span class="line">        self.say = say</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">if</span> self.say:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s 调用&quot;</span> % func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@DecoratorClass(<span class="params">say=<span class="literal">False</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_sth</span>(<span class="params">words=<span class="string">&quot;Hello&quot;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(words)</span><br><span class="line"></span><br><span class="line">say_sth(<span class="string">&quot;Hi~&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="保存函数元数据"><a href="#保存函数元数据" class="headerlink" title="保存函数元数据"></a>保存函数元数据</h2><p>上述示例均未保存函数的元数据（主要是文档字符串和原始函数名）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">DecoratorClass</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, say=<span class="literal">True</span></span>):</span></span><br><span class="line"><span class="meta">... </span>        self.say = say</span><br><span class="line">...</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, func</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="string">&quot;&quot;&quot;wrapper doc&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> self.say:</span><br><span class="line"><span class="meta">... </span>                <span class="built_in">print</span>(<span class="string">&quot;%s 调用&quot;</span> % func.__name__)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> wrapper</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@DecoratorClass(say=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">say_sth</span>(<span class="params">words=<span class="string">&quot;Hello&quot;</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">&quot;&quot;&quot;say_sth doc&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(words)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>say_sth.__name__</span><br><span class="line"><span class="string">&#x27;wrapper&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>say_sth.__doc__</span><br><span class="line"><span class="string">&#x27;wrapper doc&#x27;</span></span><br></pre></td></tr></table></figure>

<p>为了解决这个问题，我们需要使用functools中的wraps()装饰器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">DecoratorClass</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, say=<span class="literal">True</span></span>):</span></span><br><span class="line"><span class="meta">... </span>        self.say = say</span><br><span class="line">...</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, func</span>):</span></span><br><span class="line"><span class="meta">... </span>        @wraps(func)</span><br><span class="line"><span class="meta">... </span>        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="string">&quot;&quot;&quot;wrapper doc&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> self.say:</span><br><span class="line"><span class="meta">... </span>                <span class="built_in">print</span>(<span class="string">&quot;%s 调用&quot;</span> % func.__name__)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> wrapper</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@DecoratorClass(say=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">say_sth</span>(<span class="params">words=<span class="string">&quot;Hello&quot;</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">&quot;&quot;&quot;say_sth doc&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(words)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>say_sth.__name__</span><br><span class="line"><span class="string">&#x27;say_sth&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>say_sth.__doc__</span><br><span class="line"><span class="string">&#x27;say_sth doc&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="上下文管理器-with-语句"><a href="#上下文管理器-with-语句" class="headerlink" title="上下文管理器 - with 语句"></a>上下文管理器 - with 语句</h1><ul>
<li>关闭一个文件</li>
<li>释放一个锁</li>
<li>创建一个临时的代码布丁</li>
<li>在特殊环境运行中受保护的代码</li>
</ul>
<h2 id="作为一个类-2"><a href="#作为一个类-2" class="headerlink" title="作为一个类"></a>作为一个类</h2><p>任何实现了上下文管理器协议的对象都可以用作上下文管理器，该协议包含两个方法：</p>
<ul>
<li><code>__enter__(self)</code>:  任何返回值都会绑定到指定的as子句</li>
<li><code>__exit__(self, exc_type, exc_value, traceback)</code>: 退出时需要执行的操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileOpen</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,filename, mode, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span></span><br><span class="line">        self.filename = filename</span><br><span class="line">        self.mode = mode</span><br><span class="line">        self.encoding=encoding</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(self.filename, self.mode, encoding=self.encoding)</span><br><span class="line">        <span class="keyword">return</span> self.fp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_value, traceback</span>):</span></span><br><span class="line">        self.fp.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> FileOpen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.readline())</span><br></pre></td></tr></table></figure>

<h2 id="作为一个函数-2"><a href="#作为一个函数-2" class="headerlink" title="作为一个函数"></a>作为一个函数</h2><p>使用contextlib模块，yield分割语句。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FileOpen</span>(<span class="params">file_name, mode, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span></span><br><span class="line">    file_handler = <span class="built_in">open</span>(file_name, mode, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> file_handler</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;the exception was thrown&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        file_handler.close()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> FileOpen(<span class="string">&quot;test1.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.readline())</span><br></pre></td></tr></table></figure>



<h1 id="for-…-else-…-语句"><a href="#for-…-else-…-语句" class="headerlink" title="for … else … 语句"></a>for … else … 语句</h1><p>else子句在for循环语句中正常循环结束才会执行，如果由于break语句退出循环，则else子句不会被执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>     <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>     <span class="built_in">print</span>(<span class="string">&quot;no break&quot;</span>)</span><br><span class="line">...</span><br><span class="line">no <span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<h1 id="函数注解"><a href="#函数注解" class="headerlink" title="函数注解"></a>函数注解</h1><p>可以指定参数类型和返回值类型，但是实际调用时，并不会强制要求参数与注解类型一致。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a: <span class="built_in">str</span>, b: <span class="built_in">int</span> = <span class="number">2</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a + <span class="built_in">str</span>(b)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test.__annotations__</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;, &#x27;<span class="title">b</span>&#x27;:</span> &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;, &#x27;<span class="title">return</span>&#x27;:</span> &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;&#125;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">test</span>(<span class="params"><span class="string">&quot;11&quot;</span>, <span class="string">&quot;33&quot;</span></span>)</span></span><br><span class="line"><span class="class">&#x27;1133&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python_syntax</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫下载腾讯课堂回放视频</title>
    <url>/posts/21543/</url>
    <content><![CDATA[<blockquote>
<p>在爬取了长江雨课堂回放的音频之后，又想尝试爬取腾讯课堂回放视频了，用于爬虫学习。</p>
</blockquote>
<span id="more"></span>

<h2 id="爬取分析"><a href="#爬取分析" class="headerlink" title="爬取分析"></a>爬取分析</h2><ol>
<li><p>前言</p>
<ul>
<li><p>难点</p>
<p>（1）提供<code>plskey</code>和<code>pskey</code>(cookie中给出)</p>
<p>（2）<code>edk</code>解密视频</p>
</li>
<li><p>说明</p>
<p>利用本代码下载视频时，需要修改代码中的<code>tid</code>(term_id)。</p>
</li>
</ul>
</li>
<li><p>获取课程信息</p>
<ul>
<li><code>url = &quot;https://ke.qq.com/cgi-proxy/agency/exp/get_replay_list_to_c?tid=&#123;&#125;&amp;need_recording=0&amp;page_idx=0&amp;page_size=0&amp;need_all=1&amp;role_type=2&amp;bkn=658893395&amp;r=0.4397&quot;.format(tid)&quot;</code></li>
<li>主要获取课程各个视频的<code>fileid</code></li>
</ul>
</li>
<li><p>根据<code>file_id</code>获取得到文件信息的url参数</p>
<ul>
<li><code>url = &#39;https://ke.qq.com/cgi-bin/qcloud/get_token?term_id=&#123;&#125;&amp;fileId=&#123;&#125;&amp;bkn=658893395&amp;t=0.4467&#39;.format(tid, file_id)</code></li>
<li>主要获取视频的四个参数信息：<code>exper</code> <code>sign</code> <code>t</code> <code>us</code></li>
</ul>
</li>
<li><p>获取视频文件地址</p>
<ul>
<li><code>url = &#39;https://playvideo.qcloud.com/getplayinfo/v2/1258712167/&#123;&#125;?exper=&#123;&#125;&amp;sign=&#123;&#125;&amp;t=&#123;&#125;&amp;us=&#123;&#125;&#39;.format(file_id, video_param[&#39;result&#39;][&#39;exper&#39;],video_param[&#39;result&#39;][&#39;sign&#39;],video_param[&#39;result&#39;][&#39;t&#39;],video_param[&#39;result&#39;][&#39;us&#39;])</code></li>
<li>主要获取视频的m3u8文件地址</li>
<li>对于同一视频来说，有不同清晰度的视频地址，代码中默认选择了最高清晰度</li>
</ul>
</li>
<li><p>获取<code>masterPlayList</code></p>
<ul>
<li><code>https://1258712167.vod2.myqcloud.com/fb8e6c92vodtranscq1258712167/c76dde7c5285890800895871695/drm/voddrm.token.dWluPTMwMzI5NjQ1MTg7dm9kX3R5cGU9MDtjaWQ9MTAxMjM5NDt0ZXJtX2lkPTEwMDgzOTU1MTtwbHNrZXk9cF9sc2tleT0wMDA0MDAwMDFmMWYyMjFkZGI1NzlkN2EzNmM4NjhjOGNmZjZlMGQwYTM2NTliZGZlNWE1ZGYxMTc5MDljZDVmZTgyZGU2MTY4MWY2ODA0Y2UzZWE0MGVmO3Bza2V5PXBfc2tleT1SN0h6Yyp3ZTVpZHBvcjVNdGxVajFyc1dmU3pnYjVWSFk2N2dPR1RIY0hjXw==.master_playlist.m3u8?t=5eb4caaa&amp;exper=0&amp;us=8708789871727437569&amp;sign=bb387e6ca1dfb28451dbb224d41f1bcf</code></li>
<li><code>dWluPTMwMzI5NjQ1MTg7dm9kX3R5cGU9MDtjaWQ9MTAxMjM5NDt0ZXJtX2lkPTEwMDgzOTU1MTtwbHNrZXk9cF9sc2tleT0wMDA0MDAwMDFmMWYyMjFkZGI1NzlkN2EzNmM4NjhjOGNmZjZlMGQwYTM2NTliZGZlNWE1ZGYxMTc5MDljZDVmZTgyZGU2MTY4MWY2ODA0Y2UzZWE0MGVmO3Bza2V5PXBfc2tleT1SN0h6Yyp3ZTVpZHBvcjVNdGxVajFyc1dmU3pnYjVWSFk2N2dPR1RIY0hjXw==</code>是base64码加密后的字符串，其中主要包含<code>plskey</code>和<code>pskey</code></li>
<li>masterPlayList.m3u8文件中含有各个清晰度视频的m3u8地址。</li>
</ul>
</li>
<li><p>下载最高清晰度视频的<code>m3u8</code>文件</p>
<ul>
<li><p><code>https://1258712167.vod2.myqcloud.com/fb8e6c92vodtranscq1258712167/c76dde7c5285890800895871695/drm/voddrm.token.dWluPTMwMzI5NjQ1MTg7dm9kX3R5cGU9MDtjaWQ9MTAxMjM5NDt0ZXJtX2lkPTEwMDgzOTU1MTtwbHNrZXk9cF9sc2tleT0wMDA0MDAwMDFmMWYyMjFkZGI1NzlkN2EzNmM4NjhjOGNmZjZlMGQwYTM2NTliZGZlNWE1ZGYxMTc5MDljZDVmZTgyZGU2MTY4MWY2ODA0Y2UzZWE0MGVmO3Bza2V5PXBfc2tleT1SN0h6Yyp3ZTVpZHBvcjVNdGxVajFyc1dmU3pnYjVWSFk2N2dPR1RIY0hjXw==.v.f30741.m3u8?t=5eb4cbd0&amp;exper=0&amp;us=3781125914949347017&amp;sign=dd6e77288a570373aa881c3ffa06fc19</code></p>
</li>
<li><p>文件内容类似如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#EXTINF:9.999,</span><br><span class="line">v.f30741.ts?start=596637520&amp;end=597994143&amp;type=mpegts&amp;t=5eb4cbd0&amp;exper=0&amp;us=3781125914949347017&amp;sign=dd6e77288a570373aa881c3ffa06fc19</span><br><span class="line">#EXT-X-KEY:METHOD=AES-128,URI=&quot;https://ke.qq.com/cgi-bin/qcloud/get_dk?edk=CiA3PFgfG%2BIQ7set2C1%2FAWxyVYHDD6T%2FukE95OnjE8BwRhCO08TAChiaoOvUBCokOTMyNDg4YmItOWZjYS00MzFiLWJiYjItNjFmMDhjYjNlYmM3&amp;fileId=5285890800895871695&amp;keySource=VodBuildInKMS&amp;token=dWluPTMwMzI5NjQ1MTg7dm9kX3R5cGU9MDtjaWQ9MTAxMjM5NDt0ZXJtX2lkPTEwMDgzOTU1MTtwbHNrZXk9cF9sc2tleT0wMDA0MDAwMDFmMWYyMjFkZGI1NzlkN2EzNmM4NjhjOGNmZjZlMGQwYTM2NTliZGZlNWE1ZGYxMTc5MDljZDVmZTgyZGU2MTY4MWY2ODA0Y2UzZWE0MGVmO3Bza2V5PXBfc2tleT1SN0h6Yyp3ZTVpZHBvcjVNdGxVajFyc1dmU3pnYjVWSFk2N2dPR1RIY0hjXw%3D%3D&quot;,IV=0x00000000000000000000000000000000</span><br><span class="line">#EXTINF:9.999,</span><br><span class="line">v.f30741.ts?start=597994144&amp;end=599294735&amp;type=mpegts&amp;t=5eb4cbd0&amp;exper=0&amp;us=3781125914949347017&amp;sign=dd6e77288a570373aa881c3ffa06fc19</span><br><span class="line">#EXT-X-KEY:METHOD=AES-128,URI=&quot;https://ke.qq.com/cgi-bin/qcloud/get_dk?edk=CiA3PFgfG%2BIQ7set2C1%2FAWxyVYHDD6T%2FukE95OnjE8BwRhCO08TAChiaoOvUBCokOTMyNDg4YmItOWZjYS00MzFiLWJiYjItNjFmMDhjYjNlYmM3&amp;fileId=5285890800895871695&amp;keySource=VodBuildInKMS&amp;token=dWluPTMwMzI5NjQ1MTg7dm9kX3R5cGU9MDtjaWQ9MTAxMjM5NDt0ZXJtX2lkPTEwMDgzOTU1MTtwbHNrZXk9cF9sc2tleT0wMDA0MDAwMDFmMWYyMjFkZGI1NzlkN2EzNmM4NjhjOGNmZjZlMGQwYTM2NTliZGZlNWE1ZGYxMTc5MDljZDVmZTgyZGU2MTY4MWY2ODA0Y2UzZWE0MGVmO3Bza2V5PXBfc2tleT1SN0h6Yyp3ZTVpZHBvcjVNdGxVajFyc1dmU3pnYjVWSFk2N2dPR1RIY0hjXw%3D%3D&quot;,IV=0x00000000000000000000000000000000</span><br><span class="line">#EXTINF:9.999,</span><br><span class="line">v.f30741.ts?start=599294736&amp;end=600615071&amp;type=mpegts&amp;t=5eb4cbd0&amp;exper=0&amp;us=3781125914949347017&amp;sign=dd6e77288a570373aa881c3ffa06fc19</span><br><span class="line">#EXT-X-KEY:METHOD=AES-128,URI=&quot;https://ke.qq.com/cgi-bin/qcloud/get_dk?edk=CiA3PFgfG%2BIQ7set2C1%2FAWxyVYHDD6T%2FukE95OnjE8BwRhCO08TAChiaoOvUBCokOTMyNDg4YmItOWZjYS00MzFiLWJiYjItNjFmMDhjYjNlYmM3&amp;fileId=5285890800895871695&amp;keySource=VodBuildInKMS&amp;token=dWluPTMwMzI5NjQ1MTg7dm9kX3R5cGU9MDtjaWQ9MTAxMjM5NDt0ZXJtX2lkPTEwMDgzOTU1MTtwbHNrZXk9cF9sc2tleT0wMDA0MDAwMDFmMWYyMjFkZGI1NzlkN2EzNmM4NjhjOGNmZjZlMGQwYTM2NTliZGZlNWE1ZGYxMTc5MDljZDVmZTgyZGU2MTY4MWY2ODA0Y2UzZWE0MGVmO3Bza2V5PXBfc2tleT1SN0h6Yyp3ZTVpZHBvcjVNdGxVajFyc1dmU3pnYjVWSFk2N2dPR1RIY0hjXw%3D%3D&quot;,IV=0x00000000000000000000000000000000</span><br><span class="line">#EXTINF:2.286,</span><br><span class="line">v.f30741.ts?start=600615072&amp;end=600980175&amp;type=mpegts&amp;t=5eb4cbd0&amp;exper=0&amp;us=3781125914949347017&amp;sign=dd6e77288a570373aa881c3ffa06fc19</span><br><span class="line">#EXT-X-ENDLIST</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里直接读取倒数第2行和倒数第4行，倒数第2行为视频最后片段地址，倒数第4行中含有<code>edk</code>文件地址</p>
<p>接下来将视频最后片段地址中的<code>start=600615072</code>改为<code>start=0</code>，就是获取整个视频内容。</p>
</li>
</ul>
</li>
<li><p>获取视频加密码（edk）</p>
<ul>
<li><code>https://ke.qq.com/cgi-bin/qcloud/get_dk?edk=CiA3PFgfG%2BIQ7set2C1%2FAWxyVYHDD6T%2FukE95OnjE8BwRhCO08TAChiaoOvUBCokOTMyNDg4YmItOWZjYS00MzFiLWJiYjItNjFmMDhjYjNlYmM3&amp;fileId=5285890800895871695&amp;keySource=VodBuildInKMS&amp;token=dWluPTMwMzI5NjQ1MTg7dm9kX3R5cGU9MDtjaWQ9MTAxMjM5NDt0ZXJtX2lkPTEwMDgzOTU1MTtwbHNrZXk9cF9sc2tleT0wMDA0MDAwMDFmMWYyMjFkZGI1NzlkN2EzNmM4NjhjOGNmZjZlMGQwYTM2NTliZGZlNWE1ZGYxMTc5MDljZDVmZTgyZGU2MTY4MWY2ODA0Y2UzZWE0MGVmO3Bza2V5PXBfc2tleT1SN0h6Yyp3ZTVpZHBvcjVNdGxVajFyc1dmU3pnYjVWSFk2N2dPR1RIY0hjXw%3D%3D</code></li>
<li>此处将edk文件保存到了本地文件夹内</li>
</ul>
</li>
<li><p>下载加密后的视频</p>
<ul>
<li><code>https://1258712167.vod2.myqcloud.com/fb8e6c92vodtranscq1258712167/c76dde7c5285890800895871695/drm/v.f30741.ts?start=0&amp;end=600980175&amp;type=mpegts&amp;t=5eb4cbd0&amp;exper=0&amp;us=3781125914949347017&amp;sign=dd6e77288a570373aa881c3ffa06fc19</code></li>
<li>由于采用requests.get来下载视频，下载速度较慢，可以用IDM或FDM直接下载该视频</li>
</ul>
</li>
<li><p>将加密视频用<code>edk</code>解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="literal">None</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(pathFolder+<span class="string">&quot;get_dk&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">    iv = <span class="string">b&#x27;0000000000000000&#x27;</span></span><br><span class="line">    plain = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(pathFolder+os.path.basename(video_url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>]), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> ff:</span><br><span class="line">            cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">            plain = cipher.decrypt(data)</span><br><span class="line">            ff.write(plain)</span><br></pre></td></tr></table></figure>

<p>上面是解密核心代码，主要参考网上教程的。</p>
</li>
</ol>
<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><ul>
<li><p><code>cookie</code>不需要给出的</p>
</li>
<li><p>只需要修改<code>tid（term_id)</code>下载不同的课程</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200408111505.png"></p>
</li>
<li><p><code>replay_info_list = replay_info_list[0:1]</code>  #控制下载的课程编号，该行代码在中间，自己找 一下，控制下载哪些课程，该行已被注释。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys,base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">tid = <span class="string">&quot;&quot;</span>  <span class="comment"># term_id</span></span><br><span class="line"><span class="keyword">if</span> tid == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请提供tid（修改代码）&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://ke.qq.com/webcourse/index.html&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-mode&#x27;</span>:<span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header1 = &#123;&#125;</span><br><span class="line">header1[<span class="string">&#x27;cookie&#x27;</span>] = <span class="string">&#x27;pgv_pvi=4293054464; pgv_pvid=5788047360; RK=G6x822k8bh; ptcz=914ed5ce06c276aa4953ea7500df39a67fb1df2eb190e9f69ad26cad54b020bb; tvfe_boss_uuid=ba32b6d764747241; _ga=amp-gE1bWJc9yhcUHO9BAikFmA; eas_sid=K1y5l6C477x4G97818d0F5i8L0; ied_qq=o3032964558; XWINDEXGREY=0; psrf_qqrefresh_token=FA06D9F8767666CA0604B4B544856CE3; psrf_qqunionid=CCF53FAF477ACC91C2927167C3818644; psrf_qqopenid=DF48DD6C080208437163660565BEFDD1; psrf_qqaccess_token=D7C1D536872833A8DF266B5C84EF5A76; psrf_access_token_expiresAt=1588309043; ts_uid=5957681050; localInterest=[2002]; ts_refer=ADTAGCLIENT.QQ.5689_.0; index_new_key=&#123;&quot;index_interest_cate_id&quot;:2002&#125;; isHideDealTips=1; iswebp=1; lskey=00010000eb670dafeaa133c037b5dd4233aea70c75f77644b045478d9d660249789c310e4f41c347010f56b1; p_lskey=000400001f1f221ddb579d7a36c868c8cff6e0d0a3659bdfe5a5df117909cd5fe82de61681f6804ce3ea40ef; o_cookie=3032964558; pac_uid=1_3032964558; pgv_si=s5251174400; _qpsvr_localtk=0.7523651816720494; uin=o3032964558; p_uin=o3032964558; tdw_auin_data=-; tdw_data=&#123;&quot;ver4&quot;:&quot;4&quot;,&quot;ver6&quot;:&quot;InClass&quot;,&quot;refer&quot;:&quot;&quot;,&quot;from_channel&quot;:&quot;&quot;,&quot;path&quot;:&quot;r-0.3174627216615984&quot;,&quot;auin&quot;:&quot;-&quot;,&quot;uin&quot;:3032964558,&quot;real_uin&quot;:&quot;3032964558&quot;&#125;; tdw_first_visited=1; skey=@8SOlG6S2o; tdw_data_new_2=&#123;&quot;auin&quot;:&quot;-&quot;,&quot;sourcetype&quot;:&quot;&quot;,&quot;sourcefrom&quot;:&quot;&quot;,&quot;ver9&quot;:&quot;3032964558&quot;,&quot;uin&quot;:&quot;3032964558&quot;,&quot;visitor_id&quot;:&quot;608417608166375&quot;,&quot;ver10&quot;:&quot;&quot;,&quot;url_page&quot;:&quot;&quot;,&quot;url_module&quot;:&quot;&quot;,&quot;url_position&quot;:&quot;&quot;&#125;; pgv_info=ssid=s5064814228; Hm_lvt_0c196c536f609d373a16d246a117fd44=1586068475,1586071931,1586141631,1586245229; tdw_data_testid=; tdw_data_flowid=; pt4_token=T5zeUSCO-rh0DbB23Qv9s-dbbKKk58Lgoeep2x9Qf90_; p_skey=R7Hzc*we5idpor5MtlUj1rsWfSzgb5VHY67gOGTHcHc_; ts_last=ke.qq.com/webcourse/index.html; Hm_lpvt_0c196c536f609d373a16d246a117fd44=1586249333&#x27;</span></span><br><span class="line"></span><br><span class="line">plskey = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pskey = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> header1[<span class="string">&#x27;cookie&#x27;</span>].split(<span class="string">&quot;;&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;p_skey&#x27;</span> <span class="keyword">in</span> i):</span><br><span class="line">        pskey = i.strip()</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;p_lskey&#x27;</span> <span class="keyword">in</span> i):</span><br><span class="line">        plskey = i.strip()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(plskey) == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;plskey未找到&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(pskey) == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;pskey未找到&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">base64_code_raw = <span class="string">&#x27;uin=3032964518;vod_type=0;cid=1012394;term_id=&#123;&#125;;plskey=&#123;&#125;;pskey=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(tid, plskey, pskey)</span><br><span class="line">base64_code = base64.b64encode(base64_code_raw.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">base64_code = <span class="built_in">str</span>(base64_code)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(base64_code)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://ke.qq.com/cgi-proxy/agency/exp/get_replay_list_to_c?tid=&#123;&#125;&amp;need_recording=0&amp;page_idx=0&amp;page_size=0&amp;need_all=1&amp;role_type=2&amp;bkn=658893395&amp;r=0.4397&quot;</span>.<span class="built_in">format</span>(tid)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(tid)):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;./&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(tid))</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=header)</span><br><span class="line">course_info_dict = json.loads(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(course_info_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">int</span>(course_info_dict[<span class="string">&#x27;retcode&#x27;</span>]) == <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;INFO: 所有课程信息如下：\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> course <span class="keyword">in</span> course_info_dict[<span class="string">&#x27;result&#x27;</span>][<span class="string">&quot;replay_info_list&quot;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;task_id: &#123;&#125;\ntask_name:&#123;&#125;\nfileid:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(course[<span class="string">&#x27;task_id&#x27;</span>], course[<span class="string">&#x27;task_name&#x27;</span>], course[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;file_id&#x27;</span>]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;时间：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %a %H:%M:%S&quot;</span>, time.localtime(<span class="built_in">int</span>(course[<span class="string">&#x27;bg_time&#x27;</span>])))))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nINFO: 课程信息输出完毕！&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">20</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    replay_info_list = course_info_dict[<span class="string">&#x27;result&#x27;</span>][<span class="string">&quot;replay_info_list&quot;</span>]</span><br><span class="line">    tid = course_info_dict[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;tid&#x27;</span>]</span><br><span class="line">    <span class="comment">#replay_info_list.reverse()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#replay_info_list = replay_info_list[0:1]  #控制下载的课程编号</span></span><br><span class="line">    <span class="keyword">for</span> info <span class="keyword">in</span> replay_info_list:</span><br><span class="line">        <span class="built_in">print</span>(info)</span><br><span class="line">        file_id = info[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;file_id&#x27;</span>]</span><br><span class="line">        task_name = info[<span class="string">&#x27;task_name&#x27;</span>]</span><br><span class="line">        task_id = info[<span class="string">&#x27;task_id&#x27;</span>]</span><br><span class="line">        bg_time = info[<span class="string">&#x27;bg_time&#x27;</span>]</span><br><span class="line">        timestamp = <span class="built_in">int</span>(bg_time)</span><br><span class="line">        time_local = time.localtime(timestamp)</span><br><span class="line">        dt = time.strftime(<span class="string">&quot;%Y-%m-%d %H.%M.%S&quot;</span>,time_local)</span><br><span class="line">        pathFolder = <span class="string">&#x27;./&#123;&#125;/&#123;&#125;_&#123;&#125;_&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(tid, task_id, task_name, dt)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(pathFolder):</span><br><span class="line">            os.mkdir(pathFolder)</span><br><span class="line">        url = <span class="string">&#x27;https://ke.qq.com/cgi-bin/qcloud/get_token?term_id=&#123;&#125;&amp;fileId=&#123;&#125;&amp;bkn=658893395&amp;t=0.4467&#x27;</span>.<span class="built_in">format</span>(tid, file_id)</span><br><span class="line">        respp = requests.get(url)</span><br><span class="line">        video_param = json.loads(respp.text)</span><br><span class="line">        <span class="comment">#print(video_param)</span></span><br><span class="line">        <span class="comment">#break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(video_param[<span class="string">&#x27;retcode&#x27;</span>]) != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;获取视频参数失败&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        url = <span class="string">&#x27;https://playvideo.qcloud.com/getplayinfo/v2/1258712167/&#123;&#125;?exper=&#123;&#125;&amp;sign=&#123;&#125;&amp;t=&#123;&#125;&amp;us=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(file_id, video_param[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;exper&#x27;</span>],video_param[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;sign&#x27;</span>],video_param[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;t&#x27;</span>],video_param[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;us&#x27;</span>])</span><br><span class="line">        resp = requests.get(url)</span><br><span class="line">        video_info = json.loads(resp.text)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(video_info[<span class="string">&#x27;code&#x27;</span>]) != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;获取视频信息失败&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#print(video_info)</span></span><br><span class="line"></span><br><span class="line">        m3u8List = video_info[<span class="string">&quot;videoInfo&quot;</span>][<span class="string">&quot;transcodeList&quot;</span>]</span><br><span class="line">        mastPlayList = video_info[<span class="string">&quot;videoInfo&quot;</span>][<span class="string">&quot;masterPlayList&quot;</span>]</span><br><span class="line">        url = mastPlayList[<span class="string">&quot;url&quot;</span>]</span><br><span class="line">        code_prefix = os.path.dirname(mastPlayList[<span class="string">&quot;url&quot;</span>])+<span class="string">&quot;/&quot;</span> +<span class="string">&quot;voddrm.token.&quot;</span>+base64_code+<span class="string">&quot;.&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(code_prefix + os.path.basename(url))</span><br><span class="line">        resp = requests.get(code_prefix + os.path.basename(url))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(pathFolder+os.path.basename(mastPlayList[<span class="string">&quot;url&quot;</span>].split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>]), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(resp.content)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># download the best video</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#print(len(m3u8List))</span></span><br><span class="line">        m3u8_i = m3u8List[-<span class="number">1</span>]</span><br><span class="line">        raw_url = m3u8_i[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">        url = code_prefix + os.path.basename(raw_url)</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        resp = requests.get(url)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(pathFolder+os.path.basename(raw_url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>]), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(resp.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        edk_url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        video_url = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(pathFolder+os.path.basename(raw_url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>]), <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lis = f.readlines()</span><br><span class="line">            <span class="built_in">print</span>(edk_url)</span><br><span class="line">            edk_url = lis[-<span class="number">4</span>][<span class="number">0</span>:-<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>][<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line">            video_url = os.path.dirname(url) + <span class="string">&#x27;/&#x27;</span> + lis[-<span class="number">2</span>][<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">        temp = re.split(<span class="string">&quot;start=\d*?&amp;&quot;</span>, video_url)</span><br><span class="line">        video_url = <span class="string">&#x27;start=0&amp;&#x27;</span>.join(temp)</span><br><span class="line">        <span class="built_in">print</span>(edk_url)</span><br><span class="line">        <span class="built_in">print</span>(video_url)</span><br><span class="line">        resp = requests.get(edk_url)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(pathFolder+<span class="string">&quot;get_dk&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(resp.content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在下载视频...&quot;</span>)</span><br><span class="line">        filepath = pathFolder+<span class="string">&quot;raw_&quot;</span>+os.path.basename(video_url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        resp = requests.get(video_url)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(resp.content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在下载完毕！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在解密视频...&quot;</span>)</span><br><span class="line">        key = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(pathFolder+<span class="string">&quot;get_dk&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            key = f.read()</span><br><span class="line">        iv = <span class="string">b&#x27;0000000000000000&#x27;</span></span><br><span class="line">        plain = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(pathFolder+os.path.basename(video_url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>]), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> ff:</span><br><span class="line">                cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">                plain = cipher.decrypt(data)</span><br><span class="line">                ff.write(plain)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;视频解密完毕...&quot;</span>)</span><br><span class="line">        os.remove(filepath)		</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;获取课程信息失败&#x27;</span>)</span><br></pre></td></tr></table></figure>






]]></content>
  </entry>
  <entry>
    <title>StarUML破解教程</title>
    <url>/posts/b785abd2/</url>
    <content><![CDATA[<blockquote>
<p>StarUML 是非常好的UML画图工具，这里介绍StarUML3.2.2的破解教程。</p>
</blockquote>
<ul>
<li><strong>有能力的请支持正版！</strong></li>
<li>参考教程：<a href="https://www.cnblogs.com/yourstars/p/9309529.html">https://www.cnblogs.com/yourstars/p/9309529.html</a></li>
<li>在破解基础上取消自动更新</li>
</ul>
<span id="more"></span>

<h3 id="破解原理"><a href="#破解原理" class="headerlink" title="破解原理"></a>破解原理</h3><p><a href="http://staruml.io/download"><code>StarUML</code></a>是用<code>nodejs</code>写的。确切的说是用<a href="https://github.com/electron/electron">Electron前端框架</a>写的。</p>
<p>新版本中所有的starUML源代码是通过<a href="https://github.com/electron/asar">asar</a>工具打包而成。</p>
<p>确切的代码位置在<code>%LOCALAPPDATA%\Programs\StarURML\resources\app.asar</code>。</p>
<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><p>在执行下列操作前，<strong>请确保本机安装了<code>nodejs    </code>工具</strong></p>
<p>我们可以通过<code>asar</code>工具解压修改达到破解目的。具体操作如下：</p>
<ol>
<li><p>安装<code>nodejs</code></p>
<p><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
</li>
<li><p>安装<code>asar</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cnpm install -g asar  <span class="regexp">//</span>或者npm install -g asar</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="修改源代码"><a href="#修改源代码" class="headerlink" title="修改源代码"></a>修改源代码</h3><p>打开软件安装路径，找到resources文件夹下的app.asar文件，将其复制到另一文件夹，我们从另一文件夹内解压app.asar，修改其中代码，最后将其压缩为app.asar文件替换最初的app.asar文件。具体过程如下：</p>
<ol>
<li><p>解压app.asar</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">asar extract <span class="keyword">app</span>.asar ./<span class="keyword">app</span> <span class="comment">// 解压到app文件夹</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>修改<code>app\src\engine\license-manager.js</code>文件 –&gt; 取消<code>注册操作</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">checkLicenseValidity () &#123;</span><br><span class="line">  <span class="built_in">this</span>.validate().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setStatus(<span class="built_in">this</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//setStatus(this, false)</span></span><br><span class="line">    <span class="comment">//UnregisteredDialog.showDialog()</span></span><br><span class="line">    </span><br><span class="line">    setStatus(<span class="built_in">this</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找到上述代码位置，注释掉原先两行代码，添加<code>setStatus(this, true)</code>。</p>
</li>
<li><p>修改<code>app\src\engine\update-manager.js</code>文件 –&gt; 取消<code>自动更新</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check extensions updates</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">checkExtensionUpdates () &#123;</span><br><span class="line">  ExtensionManager.downloadRegistry().done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> updateAvailable = <span class="literal">false</span></span><br><span class="line">    _.each(ExtensionManager.extensions, <span class="function"><span class="params">ext</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//if (ext.installInfo &amp;&amp; ext.installInfo.updateAvailable) &#123;</span></span><br><span class="line">        <span class="comment">//updateAvailable = true</span></span><br><span class="line">      <span class="comment">//&#125;</span></span><br><span class="line">        updateAvailable = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (updateAvailable) &#123;</span><br><span class="line">      $(<span class="string">&#x27;#toolbar-extension-manager&#x27;</span>).addClass(<span class="string">&#x27;selected&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="string">&#x27;#toolbar-extension-manager&#x27;</span>).removeClass(<span class="string">&#x27;selected&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找到上述代码位置，注释那几行代码，添加<code>updateAvailable = false</code>。</p>
</li>
<li><p>重新打包<code>app.asar</code></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">asar pack <span class="keyword">app</span> <span class="keyword">app</span>.asar</span><br></pre></td></tr></table></figure>
</li>
<li><p>将打包后的<code>app.asar</code>覆盖原先的<code>app.asar</code>文件</p>
</li>
</ol>
<h3 id="已经破解好的StarUML"><a href="#已经破解好的StarUML" class="headerlink" title="已经破解好的StarUML"></a>已经破解好的StarUML</h3><p><a href="https://jxjjxy-my.sharepoint.com/:u:/g/personal/cxz_kervia1_t_odmail_cn/Efh1n8IPGbZMqhmdubupEAsBwk6GVdVutPwb9Eoizy_qUQ?e=9ai3Jr">下载地址</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>Python爬虫下载长江雨课堂课程音频文件</title>
    <url>/posts/35873/</url>
    <content><![CDATA[<blockquote>
<p>近日疫情原因，各学校采用线上教学。软件工程这门课采用长江雨课堂，由于马上就期中测试，准备回放复习一下课程，但是长江雨课堂的回放功能不支持倍速播放，于是准备将音频文件下载到本地播放。</p>
</blockquote>
<span id="more"></span>
<h2 id="爬取分析"><a href="#爬取分析" class="headerlink" title="爬取分析"></a>爬取分析</h2><ul>
<li><code>m3u8</code>音频格式</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/Snipaste_2020-03-27_15-58-54.png"></p>
<p>可以看出其音频格式为<code>m3u8</code>。爬取步骤如下：</p>
<ol>
<li>获取课程信息</li>
<li>根据课程信息获取m3u8文件地址</li>
<li>根据m3u8文件中ts文件名下载ts文件</li>
<li>合并ts文件</li>
</ol>
<ul>
<li><code>mp3</code>音频格式</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/Snipaste_2020-03-27_16-05-31.png"></p>
<p>可以看出其音频格式为<code>mp3</code>, 并且包含多段。爬取步骤如下：</p>
<ol>
<li>获取课程信息</li>
<li>根据课程信息获取mp3文件地址</li>
<li>下载mp3文件</li>
<li>合并mp3文件</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>环境说明</strong></p>
<ul>
<li>语言：Python</li>
<li>库：requests</li>
</ul>
<p><strong>使用说明</strong></p>
<ul>
<li>输入lessonID，每次下载一个课程的音频文件</li>
<li>lessonID获取方式，见图片</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/Snipaste_2020-03-27_16-14-30.png"></p>
<p><strong>Python代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json,time</span><br><span class="line"></span><br><span class="line">lessonID = <span class="string">&quot;4003249&quot;</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;cookie&#x27;</span>:<span class="string">&quot;_ga=GA1.2.1597694283.1582103010; _did=web_2408385821B4C392; _gid=GA1.2.237363874.1585559892; csrftoken=UFomwya8SZP3HFR5gv9GnTQ6ChyipTSI; sessionid=o3lwkaqztkxg629ahwfnf3037jvwl9kl; django_language=zh-cn&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url_lesson = <span class="string">&quot;https://changjiang.yuketang.cn/v/lesson/get_lesson_replay_timeline/?lesson_id=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(lessonID)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0. 获取m3u8路径</span></span><br><span class="line">resp = requests.get(url_lesson, headers=header)</span><br><span class="line">dic_info = json.loads(resp.text)</span><br><span class="line"></span><br><span class="line">m3u8_list = dic_info[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;live_timeline&#x27;</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m3u8_list:  <span class="comment">#可能存在多个文件</span></span><br><span class="line">    url_m3u8 = i[<span class="string">&quot;replay_url&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(url_m3u8)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(lessonID)):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(lessonID))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.m3u8&#x27;</span> <span class="keyword">in</span> url_m3u8: <span class="comment">#TS格式</span></span><br><span class="line">        <span class="comment"># 1. 下载m3u8文件</span></span><br><span class="line">        filename_m3u8 = <span class="string">&quot;./&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(lessonID,url_m3u8.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line">        resp = requests.get(url_m3u8, headers=header)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename_m3u8, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(resp.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 获得TS文件名</span></span><br><span class="line">        dataTS = []</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename_m3u8, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.readlines();</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">if</span> i.endswith(<span class="string">&quot;.ts\n&quot;</span>):</span><br><span class="line">                    dataTS.append(i[<span class="number">0</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        url_ts_prefix = os.path.dirname(url_m3u8)+<span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="comment"># 2. 下载TS音频文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./&#123;&#125;/&#123;&#125;.ts&quot;</span>.<span class="built_in">format</span>(lessonID,url_m3u8.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> ts <span class="keyword">in</span> dataTS:</span><br><span class="line">                nurl = url_ts_prefix + ts</span><br><span class="line">                <span class="built_in">print</span>(nurl)</span><br><span class="line">                resp = requests.get(nurl)</span><br><span class="line">                f.write(resp.content)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;.mp3&#x27;</span> <span class="keyword">in</span> url_m3u8:</span><br><span class="line">        resp = requests.get(url_m3u8) <span class="comment">#mp3文件</span></span><br><span class="line">        filename = <span class="string">&quot;together_&quot;</span>+url_m3u8.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(lessonID, filename), <span class="string">&#x27;ab+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(resp.content) </span><br><span class="line"></span><br><span class="line">        filename = <span class="built_in">str</span>(num)+<span class="string">&quot;_&quot;</span>+url_m3u8.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(lessonID, filename), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(resp.content) </span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    	<span class="built_in">print</span>(<span class="string">&quot;未知URL &#123;&#125;&quot;</span>.<span class="built_in">format</span>(url_m3u8))</span><br><span class="line"></span><br><span class="line">url_lesson_info = <span class="string">&quot;https://changjiang.yuketang.cn/v/lesson/get_lesson_replay_content/?lesson_id=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(lessonID)</span><br><span class="line">resp = requests.get(url_lesson_info, headers=header)</span><br><span class="line">title = json.loads(resp.text)[<span class="string">&quot;data&quot;</span>][<span class="string">&#x27;lesson&#x27;</span>][<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lessonID+<span class="string">&quot;_&quot;</span>+title)):</span><br><span class="line">    os.rename(<span class="string">&#x27;./&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lessonID), <span class="string">&#x27;./&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lessonID+<span class="string">&quot;_&quot;</span>+title))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    os.rename(<span class="string">&#x27;./&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lessonID+<span class="string">&quot;_&quot;</span>+title),<span class="string">&#x27;./&#123;&#125;_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lessonID+<span class="string">&quot;_&quot;</span>+title, <span class="built_in">int</span>(time.time())))</span><br><span class="line">    os.rename(<span class="string">&#x27;./&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lessonID), <span class="string">&#x27;./&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lessonID+<span class="string">&quot;_&quot;</span>+title))</span><br></pre></td></tr></table></figure>
<p><strong>下载结果</strong><br><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/Snipaste_2020-03-27_16-22-33.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/Snipaste_2020-03-27_16-22-55.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/Snipaste_2020-03-27_16-23-08.png"></p>
]]></content>
  </entry>
  <entry>
    <title>Telegram-cli使用教程</title>
    <url>/posts/scja9c88h/</url>
    <content><![CDATA[<blockquote>
<p>主要记录一些<code>Telegram-cli</code>命令</p>
</blockquote>
<span id="more"></span>
<h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><h3 id="利用名称发送消息"><a href="#利用名称发送消息" class="headerlink" title="利用名称发送消息"></a>利用名称发送消息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msg &lt;username/channelname&gt; &lt;msg&gt;</span><br></pre></td></tr></table></figure>

<p>:warning: 用户名或者群组名包含<code>空格</code>或者<code>#</code>字符需要替换为<code>_</code></p>
<h3 id="利用ID发送消息"><a href="#利用ID发送消息" class="headerlink" title="利用ID发送消息"></a>利用ID发送消息</h3><ul>
<li>发送给用户：<code>msg chat#&lt;chat_id&gt; &lt;msg&gt;</code></li>
<li>发送到群组：<code>msg channel#&lt;channel&gt; &lt;msg&gt;</code></li>
<li>获取<code>chat_id</code>: <code>chat_info &lt;username&gt;</code></li>
<li>获取<code>channel_id</code>: <code>channel_info &lt;channelname&gt;</code></li>
</ul>
<hr>
<p><strong>更多命令尚待学习….</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫解析库-XPath</title>
    <url>/posts/853cdf86/</url>
    <content><![CDATA[<blockquote>
<p>除了使用正则表达式提取网页中数据之外, XPath也是一个强大的网页文本内容提取工具, XPath全称XML Path Language, 即XML路径语言, 最初用来在XML文档的, 但是同样适用于HTML文档的搜索.</p>
</blockquote>
<span id="more"></span>

<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure>



<h2 id="2-XPath常用规则"><a href="#2-XPath常用规则" class="headerlink" title="2. XPath常用规则"></a>2. XPath常用规则</h2><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nodename</td>
<td align="center">选取此节点的所有子节点</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">从当前节点选择直接子节点</td>
</tr>
<tr>
<td align="center">//</td>
<td align="center">从当前节点选取子孙节点</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">选取当前节点</td>
</tr>
<tr>
<td align="center">..</td>
<td align="center">选取当前节点的父节点</td>
</tr>
<tr>
<td align="center">@</td>
<td align="center">选取属性</td>
</tr>
</tbody></table>
<h2 id="3-html文本引入和预处理"><a href="#3-html文本引入和预处理" class="headerlink" title="3.  html文本引入和预处理"></a>3.  html文本引入和预处理</h2><blockquote>
<p>文本引入可以在内存中和外部文件中获取.</p>
<p>tostring函数可以对一段html文本进行完善和补全(自动修正), 如果缺少某个封闭标记, 执行后可以添加上去. </p>
</blockquote>
<figure class="highlight python"><figcaption><span>从内存中获取</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">&#x27;待解析文本&#x27;</span></span><br><span class="line">html = etree.HTML(text) <span class="comment">#传入字符串文本,并生成XPath对象</span></span><br><span class="line">result = etree.tostring(html) <span class="comment"># 对文本进行完善处理, 自动修正</span></span><br><span class="line"><span class="built_in">print</span>(result.decode(<span class="string">&#x27;utf8&#x27;</span>)) <span class="comment"># tostring后的文本是bytes类型, 需要转换为str类型</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><figcaption><span>从文件中获取</span></figcaption><table><tr><td class="code"><pre><span class="line">html = etree.parse(<span class="string">&#x27;./test.html&#x27;</span>, etree.HTMLParser())</span><br><span class="line">result = etree.tostring(html) <span class="comment"># 对文本进行完善处理, 自动修正</span></span><br><span class="line"><span class="built_in">print</span>(result.decode(<span class="string">&#x27;utf8&#x27;</span>)) <span class="comment"># tostring后的文本是bytes类型, 需要转换为str类型</span></span><br></pre></td></tr></table></figure>



<h2 id="4-具体内容"><a href="#4-具体内容" class="headerlink" title="4. 具体内容"></a>4. 具体内容</h2><h4 id="1-所有节点"><a href="#1-所有节点" class="headerlink" title="1. 所有节点"></a>1. 所有节点</h4><blockquote>
<p>我们一般会用//开头的XPath规则来选取所有符合要求的节点.</p>
<p>例如:</p>
<p>(1) //*: 获取所有节点</p>
<p>(2) //li: 获取所有子孙节点中的li节点</p>
</blockquote>
<figure class="highlight python"><figcaption><span>使用方法</span></figcaption><table><tr><td class="code"><pre><span class="line">html.xpath(<span class="string">&quot;//*&quot;</span>) <span class="comment">#这里html是XPath对象, 返回的是列表对象</span></span><br></pre></td></tr></table></figure>



<h4 id="2-子节点"><a href="#2-子节点" class="headerlink" title="2. 子节点"></a>2. 子节点</h4><blockquote>
<p>通过//或/来获取所有子孙节点或直接子节点.</p>
<p>例如:</p>
<p>(1) //li/a: 获取所有li节点的直接子节点a</p>
<p>(2) //li//a: 获取所有li节点中的所有子孙节点a</p>
</blockquote>
<h4 id="3-父节点"><a href="#3-父节点" class="headerlink" title="3. 父节点"></a>3. 父节点</h4><blockquote>
<p>通过..来获取父节点, 这里需要注意/的作用</p>
</blockquote>
<figure class="highlight python"><figcaption><span>例</span></figcaption><table><tr><td class="code"><pre><span class="line">text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;a class=&quot;item&quot; target=&quot;_blank&quot; href=&quot;https://movie.douban.com/subject/34454003/?tag=热门&amp;amp;from=gaia&quot;&gt;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">            &lt;div class=&quot;cover-wp&quot; data-isnew=&quot;true&quot; data-id=&quot;34454003&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;img src=&quot;https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2561672299.jpg&quot; alt=&quot;夺爱之夏&quot; data-x=&quot;1648&quot; data-y=&quot;928&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">res = html.xpath(<span class="string">&#x27;//div[@data-id=&quot;26849758&quot;]/../@href&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<p>上面使用//div[@data-id=”26849758”]来先找出所有属性为该属性的div节点, 再用..找出父节点, 最后使用@href来获取父节点的href属性</p>
<h4 id="4-属性匹配和属性获取"><a href="#4-属性匹配和属性获取" class="headerlink" title="4. 属性匹配和属性获取"></a>4. 属性匹配和属性获取</h4><blockquote>
<p>属性匹配中[]括起来的内容表示选取节点的条件, 使用@表示属性, 不用方括号使用@表示直接属性的获取</p>
</blockquote>
<p><strong>具体案例看上节父节点相关内容</strong></p>
<h4 id="5-文本内容获取"><a href="#5-文本内容获取" class="headerlink" title="5. 文本内容获取"></a>5. 文本内容获取</h4><blockquote>
<p>我们使用text()来获取节点中的文本</p>
<p>例:</p>
<p>//a//text(): 获取所有li节点的内容</p>
</blockquote>
<p>需要注意的是, 在获取一个节点的内容,其子孙节点的内容是不会被获取的, 并且经常加载\n等符号, 使得结果不纯净, 还需要在提取</p>
<h4 id="6-属性多值匹配"><a href="#6-属性多值匹配" class="headerlink" title="6.  属性多值匹配"></a>6.  属性多值匹配</h4><blockquote>
<p>有时候一个属性有多个值, 这时需要使用contains来提取</p>
</blockquote>
<figure class="highlight python"><figcaption><span>例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;li li-first&quot; name=&quot;item&quot;&gt;&lt;a href=&quot;link.html&quot;&gt;firstitem&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[contains(@class,&quot;li&quot;)]/a/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p>上面例子中, li的class属性有两个值, li和li-first,如果直接用//li[@class=”li”]/a/text()就会获取不到了.</p>
<p>利用contains可以有效解决这一问题</p>
<p>PS: 在实际测试中，发现直接写@class=”li li-first”也能获取出来…</p>
<h4 id="7-多属性匹配"><a href="#7-多属性匹配" class="headerlink" title="7. 多属性匹配"></a>7. 多属性匹配</h4><blockquote>
<p>有时候一个节点有多个属性, 如果要精确定位该节点, 可以使用多个属性值来定位.</p>
</blockquote>
<figure class="highlight python"><figcaption><span>例:</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;li li-first&quot; name=&quot;item&quot;&gt;&lt;a href=&quot;link.html&quot;&gt;firstitem&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[contains(@class,&quot;li&quot;) and name=&quot;item&quot;]/a/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p><strong>拓展: XPath运算符</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410205628.png"></p>
<h4 id="8-按序选择"><a href="#8-按序选择" class="headerlink" title="8. 按序选择"></a>8. 按序选择</h4><blockquote>
<p>有时候在选择某些属性的时候可能匹配了多个节点, 但是指向要其中的某个节点, 第一个节点等, 这时候可以使用中括号传入索引的方法获取特定次序的节点.</p>
</blockquote>
<figure class="highlight python"><figcaption><span>例:</span></figcaption><table><tr><td class="code"><pre><span class="line">html.xpath(<span class="string">&#x27;//li[1]/a/text()&#x27;</span>) <span class="comment">#获取第一个节点, 注意是序号从1开始</span></span><br><span class="line">html.xpath(<span class="string">&#x27;//li[last()]/a/text()&#x27;</span>) <span class="comment">#获取最后一个节点</span></span><br><span class="line">html.xpath(<span class="string">&#x27;//li[last()-2]/a/text()&#x27;</span>) <span class="comment">#获取倒数第二个</span></span><br><span class="line">html.xpath(<span class="string">&#x27;//li[position()&lt;3]/a/text()&#x27;</span>) <span class="comment">#获取第1和2个节点</span></span><br></pre></td></tr></table></figure>

<p><strong>拓展: XPath函数</strong></p>
<p>具体看网址: <a href="https://www.w3school.com.cn/xpath/xpath_functions.asp">https://www.w3school.com.cn/xpath/xpath_functions.asp</a></p>
<h4 id="9-XPath节点轴"><a href="#9-XPath节点轴" class="headerlink" title="9. XPath节点轴"></a>9. XPath节点轴</h4><p>具体看网址: <a href="https://www.w3school.com.cn/xpath/xpath_axes.asp">https://www.w3school.com.cn/xpath/xpath_axes.asp</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>崔庆才: 《Python3网络爬虫开发实战》</li>
<li>W3C_School: <a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp">https://www.w3school.com.cn/xpath/xpath_syntax.asp</a></li>
</ol>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>xpath</tag>
      </tags>
  </entry>
  <entry>
    <title>centos防火墙设置</title>
    <url>/posts/751f4e41/</url>
    <content><![CDATA[<blockquote>
<p>iptables防火墙和firewalld防火墙</p>
</blockquote>
<span id="more"></span>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ol>
<li><p>CentOS7 默认的防火墙 不是<code>iptables</code>, 而是<code>firewalld</code>.</p>
</li>
<li><p>一些软件的端口号要放开来提供服务，如：<code>22</code>，<code>80</code>等常用端口</p>
</li>
</ol>
<h1 id="firewalld防火墙"><a href="#firewalld防火墙" class="headerlink" title="firewalld防火墙"></a>firewalld防火墙</h1><p><strong>说明</strong>：很多人用<code>CentOS 7</code>时会发现<code>CentOS 6</code>系列中的<code>iptables</code>相关命令不能用了，因为<code>Centos 7</code>使用<code>firewalld</code>代替了原来的<code>iptables</code>。所以<code>iptables</code>相关命令是不能直接使用的，这里说下开放设置端口及<code>firewalld</code>常用命令。</p>
<p><strong>1、关闭防火墙</strong></p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld.service           </span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld.service        </span><br></pre></td></tr></table></figure>

<p><strong>2、开启端口</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=80/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>命令含义：</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="built_in">--zone</span> <span class="comment">#作用域</span></span><br><span class="line"><span class="built_in">--add-port=80/tcp</span> <span class="comment">#添加端口，格式为：端口/通讯协议</span></span><br><span class="line"><span class="built_in">--permanent</span> <span class="comment">#永久生效，没有此参数重启后失效</span></span><br></pre></td></tr></table></figure>

<p><strong>3、重启防火墙</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">systemctl restart firewall-<span class="keyword">cmd</span><span class="bash"> </span></span><br></pre></td></tr></table></figure>

<p><strong>4. 常用命令介绍</strong></p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">firewall-cmd</span> <span class="built_in">--state</span>                           <span class="comment">##查看防火墙状态，是否是running</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="built_in">--reload</span>                          <span class="comment">##重新载入配置，比如添加规则之后，需要执行此命令</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="built_in">--get-zones</span>                       <span class="comment">##列出支持的zone</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="built_in">--get-services</span>                    <span class="comment">##列出支持的服务，在列表中的服务是放行的</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="built_in">--query-service</span> <span class="string">ftp</span>               <span class="comment">##查看ftp服务是否支持，返回yes或者no</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="built_in">--add-service=ftp</span>                 <span class="comment">##临时开放ftp服务</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="built_in">--add-service=ftp</span> <span class="built_in">--permanent</span>     <span class="comment">##永久开放ftp服务</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="built_in">--remove-service=ftp</span> <span class="built_in">--permanent</span>  <span class="comment">##永久移除ftp服务</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="built_in">--add-port=80/tcp</span> <span class="built_in">--permanent</span>     <span class="comment">##永久添加80端口 </span></span><br><span class="line"><span class="string">iptables</span> -<span class="string">L</span> -<span class="string">n</span>                                 <span class="comment">##查看规则，这个命令是和iptables的相同的</span></span><br><span class="line"><span class="string">man</span> <span class="string">firewall-cmd</span>                               <span class="comment">##查看帮助</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="iptables防火墙常用命令"><a href="#iptables防火墙常用命令" class="headerlink" title="iptables防火墙常用命令"></a>iptables防火墙常用命令</h1><h2 id="关闭firewalld"><a href="#关闭firewalld" class="headerlink" title="关闭firewalld"></a>关闭firewalld</h2><h3 id="1-关闭firewalld"><a href="#1-关闭firewalld" class="headerlink" title="1. 关闭firewalld"></a>1. 关闭firewalld</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld.service <span class="meta">#停止firewall</span></span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld.service <span class="meta">#禁止firewall开机启动</span></span><br></pre></td></tr></table></figure>
<h3 id="2-安装iptables"><a href="#2-安装iptables" class="headerlink" title="2. 安装iptables"></a>2. 安装iptables</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> iptables-services <span class="comment">#安装</span></span><br></pre></td></tr></table></figure>

<h3 id="3-配置防火墙文件"><a href="#3-配置防火墙文件" class="headerlink" title="3. 配置防火墙文件"></a>3. 配置防火墙文件</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sysconfig/iptables <span class="comment">#编辑防火墙配置文件</span></span><br></pre></td></tr></table></figure>
<p>如下图所示，方框内两条语句分别开启了端口80和3306<br>具体添加代码：</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">3306</span> -j ACCEPT</span><br><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">80</span> -j ACCEPT</span><br></pre></td></tr></table></figure>
<h3 id="4-重启防火墙使配置生效"><a href="#4-重启防火墙使配置生效" class="headerlink" title="4. 重启防火墙使配置生效"></a>4. 重启防火墙使配置生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart iptables.service <span class="comment">#重启防火墙使配置生效</span></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables.service <span class="comment">#设置防火墙开机启动</span></span><br></pre></td></tr></table></figure>

<h2 id="iptables命令"><a href="#iptables命令" class="headerlink" title="iptables命令"></a>iptables命令</h2><h3 id="1-开启与关闭"><a href="#1-开启与关闭" class="headerlink" title="1. 开启与关闭"></a>1. 开启与关闭</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">systemctl restart iptables.service <span class="comment">#重启防火墙使配置生效</span></span><br><span class="line">systemctl enable iptables.service <span class="comment">#设置防火墙开机启动</span></span><br><span class="line">systemctl restart iptables <span class="comment">#重启</span></span><br><span class="line">systemctl <span class="literal">start</span> iptables.service <span class="comment">#开启iptables防火墙</span></span><br><span class="line">systemctl <span class="literal">stop</span> iptables.service <span class="comment">#关闭iptables防火墙</span></span><br></pre></td></tr></table></figure>

<h3 id="2-常用操作"><a href="#2-常用操作" class="headerlink" title="2. 常用操作"></a>2. 常用操作</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service</span> iptables status <span class="comment">#查看防火墙状态</span></span><br><span class="line">yum update iptables  <span class="comment">#升级</span></span><br><span class="line">iptables -L -n <span class="comment">#查看防火墙现有规则！！</span></span><br></pre></td></tr></table></figure>

<h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h3><figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#查看iptables现有规则</span></span><br><span class="line"> [root@localhost ~]<span class="meta"># iptables -L -n</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#先允许所有,不然有可能会杯具</span></span><br><span class="line"> [root@localhost ~]<span class="meta"># iptables -P INPUT ACCEPT</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#清空所有默认规则</span></span><br><span class="line"> [root@localhost ~]<span class="meta"># iptables -F</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#清空所有自定义规则</span></span><br><span class="line"> [root@localhost ~]<span class="meta"># iptables -X</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#所有计数器归<span class="number">0</span></span></span><br><span class="line"> [root@localhost ~]<span class="meta"># iptables -Z</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#允许来自于lo接口的数据包(本地访问)</span></span><br><span class="line"> [root@localhost ~]<span class="meta"># iptables -A INPUT -i lo -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#开放<span class="number">22</span>端口</span></span><br><span class="line"> iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">22</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line"> <span class="meta">#开放<span class="number">21</span>端口(FTP)</span></span><br><span class="line"> iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">21</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line"> <span class="meta">#开放<span class="number">80</span>端口(HTTP)</span></span><br><span class="line"> iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">80</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line"> <span class="meta">#开放<span class="number">443</span>端口(HTTPS)</span></span><br><span class="line"> iptables -A <span class="keyword">INPUT</span> -p tcp --dport <span class="number">443</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">  ====&gt;  按照实际要求：是否加下面的：</span><br><span class="line"> ------------------------------------------------------------------- </span><br><span class="line"></span><br><span class="line"> <span class="meta">#允许ping</span></span><br><span class="line"> iptables -A <span class="keyword">INPUT</span> -p icmp --icmp-type <span class="number">8</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line"> <span class="meta">#允许接受本机请求之后的返回数据 RELATED,是为FTP设置的</span></span><br><span class="line"> iptables -A <span class="keyword">INPUT</span> -m state --state  RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"> <span class="meta">#其他入站一律丢弃</span></span><br><span class="line"> iptables -P <span class="keyword">INPUT</span> DROP</span><br><span class="line"></span><br><span class="line"> <span class="meta">#所有出站一律绿灯</span></span><br><span class="line"> iptables -P OUTPUT ACCEPT</span><br><span class="line"></span><br><span class="line"> <span class="meta">#所有转发一律丢弃</span></span><br><span class="line"> iptables -P FORWARD DROP</span><br><span class="line"></span><br><span class="line">  -------------------------------------------------------------------</span><br><span class="line">  </span><br><span class="line"><span class="meta">#如果要添加内网ip信任（接受其所有TCP请求）</span></span><br><span class="line">iptables -A <span class="keyword">INPUT</span> -p tcp -s <span class="number">45.96</span><span class="number">.174</span><span class="number">.68</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="meta">#过滤所有非以上规则的请求</span></span><br><span class="line">iptables -P <span class="keyword">INPUT</span> DROP</span><br><span class="line"></span><br><span class="line"><span class="meta">#要封停一个IP，使用下面这条命令：</span></span><br><span class="line">iptables -I <span class="keyword">INPUT</span> -s ***.***.***.*** -j DROP</span><br><span class="line"></span><br><span class="line"><span class="meta">#要解封一个IP，使用下面这条命令:</span></span><br><span class="line">iptables -D <span class="keyword">INPUT</span> -s ***.***.***.*** -j DROP</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>WebDriver下载地址</title>
    <url>/posts/6b450c9b/</url>
    <content><![CDATA[<blockquote>
<p>在使用python的selenium库实现python爬虫时, 需要安装一些浏览器的driver, 每次安装时都需要寻找下载地址, 这里将各浏览器driver的下载地址记录下来, 方便以后查询.</p>
</blockquote>
<span id="more"></span>
<h3 id="各driver下载地址"><a href="#各driver下载地址" class="headerlink" title="各driver下载地址"></a>各driver下载地址</h3><h4 id="1-chrome浏览器"><a href="#1-chrome浏览器" class="headerlink" title="1. chrome浏览器"></a>1. chrome浏览器</h4><ul>
<li><a href="https://chromedriver.storage.googleapis.com/index.html">下载地址</a></li>
</ul>
<h4 id="2-Firefox浏览器"><a href="#2-Firefox浏览器" class="headerlink" title="2. Firefox浏览器"></a>2. Firefox浏览器</h4><ul>
<li><a href="https://github.com/mozilla/geckodriver/releases/">下载地址</a></li>
</ul>
<h4 id="3-IE浏览器"><a href="#3-IE浏览器" class="headerlink" title="3. IE浏览器"></a>3. IE浏览器</h4><ul>
<li><a href="https://selenium-release.storage.googleapis.com/index.html">下载地址</a></li>
</ul>
<h4 id="4-PhantomJS"><a href="#4-PhantomJS" class="headerlink" title="4. PhantomJS"></a>4. PhantomJS</h4><ul>
<li><p><a href="https://phantomjs.org/download.html">下载地址</a></p>
<blockquote>
<p>这个webdriver已经被selenium弃用了, 使用时会显示相关的警告信息.</p>
<p>可以替代的有chrome和Firefox的无头浏览器.</p>
</blockquote>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以chromedriver为例, 展示其使用方法</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome() // FireFox(), Ie(), PhantomJS()</span><br><span class="line">broswer.get(<span class="string">&#x27;https://baidu.com&#x27;</span>) //网址</span><br><span class="line"><span class="built_in">print</span>(broswer.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><blockquote>
<p>按照对应浏览器版本下载driver, 下载后放在具有环境变量的路径内, 如果不知道如何操作, 直接将driver.exe放在python安装路径下</p>
</blockquote>
<h3 id="无头浏览器"><a href="#无头浏览器" class="headerlink" title="无头浏览器"></a>无头浏览器</h3><blockquote>
<p>chrome和 Firfox都具有类似PhantomJS的功能</p>
</blockquote>
<ul>
<li><p>使用方法如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">driver.get(<span class="string">&quot;https://baidu.com/&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(driver.page_source)</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>webdriver</tag>
      </tags>
  </entry>
  <entry>
    <title>Telegram-cli安装教程</title>
    <url>/posts/e82je8eeq/</url>
    <content><![CDATA[<blockquote>
<p>Telegram-cli可以在没有图形界面的linux服务器上使用，记录下其安装教程。</p>
</blockquote>
<span id="more"></span>

<p>github项目地址：<a href="https://github.com/vysheng/tg/">https://github.com/vysheng/tg/</a>    </p>
<h2 id="安装Telegram-cli"><a href="#安装Telegram-cli" class="headerlink" title="安装Telegram-cli"></a>安装Telegram-cli</h2><h2 id="Centos-7"><a href="#Centos-7" class="headerlink" title="Centos 7"></a>Centos 7</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/vysheng/tg.git &amp;&amp; <span class="built_in">cd</span> tg</span><br><span class="line">yum -y install lua-devel openssl-devel libconfig-devel readline-devel libevent-devel jansson-devel python-devel</span><br><span class="line">./configure</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<h2 id="ubuntu-18-04"><a href="#ubuntu-18-04" class="headerlink" title="ubuntu 18.04"></a>ubuntu 18.04</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libreadline-dev libconfig-dev lua5.2 liblua5.2-dev libevent-dev libjansson-dev libpython-dev make zlib1g-dev libssl1.0-dev</span><br><span class="line">./configure</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>依次运行上述命令后，telegram-cli已经安装完成，可执行文件在当前目录下的<code>bin/telegram-cli</code></p>
<h2 id="登录Telegram-cli"><a href="#登录Telegram-cli" class="headerlink" title="登录Telegram-cli"></a>登录Telegram-cli</h2><p>在登录Telegram-cli之前需要在<code>https://my.telegram.org/apps</code>获取pub密钥。我选择创建的application类型为desktop。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-03/20200329170931.png"></p>
<p>将<code>Public keys</code>复制，回到服务器端。执行以下命令，将密钥保存到<code>mytg-server.pub</code>文件中。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">vim mytg-<span class="keyword">server</span>.pub</span><br></pre></td></tr></table></figure>

<p>上述操作完毕之后，就可以登录了。</p>
<p>执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/telegram-cli -k mytg-server.pub</span><br></pre></td></tr></table></figure>

<p>之后会让你输入电话号码和验证码，登录就是了。</p>
<p>登录完毕后可以按<code>ctrl-c</code>键退出，或者使用命令<code>quit</code>或<code>safe_quit</code>退出。</p>
<h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p>如果之前登录过，后面就不需要重新登录，这里发送消息测试一下。</p>
<ol>
<li><p>交互命令行模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/telegram-cli -W</span><br></pre></td></tr></table></figure>

<p>执行上述命令进入命令行模式。</p>
<ul>
<li>向用户或群组发送消息：<code>msg &lt;username/channelname&gt; &lt;msg&gt;</code></li>
</ul>
</li>
<li><p>直接发消息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/telegram-cli -W -e <span class="string">&quot;msg &lt;username/channelname&gt; &lt;msg&gt;&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注：用户名或者群组名包含<code>空格</code>或者<code>#</code>​字符需要替换为<code>_</code></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装forsaken mail</title>
    <url>/posts/918f076b/</url>
    <content><![CDATA[<blockquote>
<p>记录安装forsaken mail的步骤</p>
</blockquote>
<span id="more"></span>

<p>服务器系统：Centos7<br>docker版本：Docker version 19.03.5, build 633a0ea</p>
<h2 id="1-docker拉取镜像并创建容器运行"><a href="#1-docker拉取镜像并创建容器运行" class="headerlink" title="1. docker拉取镜像并创建容器运行"></a>1. docker拉取镜像并创建容器运行</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run --name forsaken-mail --restart=always -d -p <span class="number">25</span>:<span class="number">25</span> -p <span class="number">3000</span>:<span class="number">3000</span> denghongcai/forsaken-mail </span><br></pre></td></tr></table></figure>
<p>:warning: 如果创建了镜像但是因为端口被占用无法运行, 可以在杀死端口对应进程后执行以下命令</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -p <span class="number">25</span>:<span class="number">25</span> -p <span class="number">3000</span>:<span class="number">3000</span> denghongcai/forsaken-mail:latest </span><br></pre></td></tr></table></figure>
<h2 id="2-配置Caddy"><a href="#2-配置Caddy" class="headerlink" title="2. 配置Caddy"></a>2. 配置Caddy</h2><p>:point_right: <a href="/archives/d392dh">Caddy安装教程</a><br>（1） 打开文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>caddy<span class="regexp">/conf.d/</span>Caddyfile.conf</span><br></pre></td></tr></table></figure>
<p>（2）向文件中添加配置信息</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//yourdomain &#123;</span></span><br><span class="line">    gzip</span><br><span class="line">    tls <span class="symbol">xx@</span>xx.xx</span><br><span class="line">    proxy / localhost:yourport </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意： <code>域名</code> <code>邮箱</code> <code>端口</code> 三者的填写<br>(3) 重启caddy服务</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl restart caddy</span></span><br></pre></td></tr></table></figure>

<h2 id="3-forsaken-mail一键安装脚本"><a href="#3-forsaken-mail一键安装脚本" class="headerlink" title="3. forsaken mail一键安装脚本"></a>3. forsaken mail一键安装脚本</h2><p><strong>前提</strong>：</p>
<ul>
<li>OS: Centos7+</li>
<li>国外服务器</li>
<li>确保端口25和3000没有进程占用</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo yum -<span class="keyword">y</span> install wget curl <span class="keyword">vim</span> lsof</span><br><span class="line">sudo yum <span class="built_in">remove</span> docker docker-client docker-client-latest \</span><br><span class="line">                  docker-common docker-latest \</span><br><span class="line">                  docker-latest-logrotate docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">sudo yum install -<span class="keyword">y</span> yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --<span class="built_in">add</span>-repo \</span><br><span class="line">    http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br><span class="line">sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br><span class="line">systemctl enable docker </span><br><span class="line">systemctl start docker</span><br><span class="line">docker run -d -<span class="keyword">p</span> <span class="number">25</span>:<span class="number">25</span> -<span class="keyword">p</span> <span class="number">3000</span>:<span class="number">3000</span> denghongcai/forsaken-mai<span class="variable">l:latest</span></span><br><span class="line">sudo yum install epel-release</span><br><span class="line">yum -<span class="keyword">y</span> install caddy</span><br><span class="line">systemctl enable caddy</span><br></pre></td></tr></table></figure>
<p>上述命令执行完毕后，进行文章中的第二步操作，配置caddy</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>crontab相关</title>
    <url>/posts/1bfd1149/</url>
    <content><![CDATA[<blockquote>
<p>记录crontab相关的操作以及问题</p>
</blockquote>
<span id="more"></span>

<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="1-var-log-目录下没有cron开头的日志文件"><a href="#1-var-log-目录下没有cron开头的日志文件" class="headerlink" title="1. /var/log/目录下没有cron开头的日志文件"></a>1. /var/log/目录下没有cron开头的日志文件</h2><p>(1) 修改<code>/etc/rsyslog.d/50-default.conf </code>文件，将文件中的  <code>#cron.*  </code>前的  <code>#</code>  删掉。</p>
<p>​        如果没有<code>50-default.conf</code>文件，可以看<code>/etc/rsyslog.conf</code>是否包含<code>#cron.*  </code>，从而进行相应修改</p>
<p>(2) 执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service rsyslog restart</span><br><span class="line">service cron restart</span><br></pre></td></tr></table></figure>

<p>(3) 最后查看日志文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail /var/<span class="built_in">log</span>/cron.log </span><br></pre></td></tr></table></figure>

<h2 id="2-修改cron日志文件中的时区"><a href="#2-修改cron日志文件中的时区" class="headerlink" title="2. 修改cron日志文件中的时区"></a>2. 修改cron日志文件中的时区</h2><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">timedatectl</span> <span class="built_in">set-timezone</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">service</span> <span class="string">rsyslog</span> <span class="string">restart</span></span><br><span class="line"><span class="string">service</span> <span class="string">cron</span> <span class="string">restart</span></span><br></pre></td></tr></table></figure>

<h2 id="3-测试服务器是否被封禁邮件端口"><a href="#3-测试服务器是否被封禁邮件端口" class="headerlink" title="3. 测试服务器是否被封禁邮件端口"></a>3. 测试服务器是否被封禁邮件端口</h2><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">apt-get install telnet <span class="comment"># 安装</span></span><br><span class="line">telnet smtp.qq.com<span class="number"> 25 </span><span class="comment"># 测试25端口</span></span><br><span class="line">telnet smtp.qq.com<span class="number"> 465 </span><span class="comment"># 测试465端口</span></span><br></pre></td></tr></table></figure>

<p>如果一直trying，则表明端口被封禁，正常情况下返回数据。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>GNUTool</tag>
      </tags>
  </entry>
  <entry>
    <title>crontab定时任务发邮件的问题</title>
    <url>/posts/a50980cb/</url>
    <content><![CDATA[<p>在用 crontab -e 命令创建定时任务后，发现定时任务中的发邮件并未执行。</p>
<span id="more"></span>

<p>通过上网查询，可以看crontab的日志。命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail /var/<span class="built_in">log</span>/cron</span><br></pre></td></tr></table></figure>

<p>执行结果如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-06/20200622132839.png"></p>
<p>发现发送邮件报错为 mailed 284 bytes of output but got status 0x004b#012</p>
<br>

<p>通过查询资料，最终解决方案如下</p>
<p>文字说明：修改 <code>/etc/postfix/main.cf</code>文件，将其中的 inet_interfaces 设置为all。</p>
<p>操作：</p>
<p>执行命令, 修改文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/postfix/main.cf</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-06/20200622133227.png"></p>
<p>最终可以解决，但并不知道原理，不知道会不会影响系统安全性。</p>
<p>参考执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup  python3 -u /root/services/ISL.py  &gt;&gt; /root/services/ISL.log 2&gt;&amp;1  &amp;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>cron</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令总结</title>
    <url>/posts/8c6dafda/</url>
    <content><![CDATA[<blockquote>
<p>记录一下docker命令。</p>
</blockquote>
<span id="more"></span>
<h2 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- get.docker.com | sh  <span class="comment">#官方安装</span></span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh  <span class="comment">#国内daodocker安装,推荐</span></span><br></pre></td></tr></table></figure>

<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a      // 查看所有容器</span><br><span class="line">docker images     // 查看所有镜像</span><br><span class="line">docker run REPOSITORY/TAG  //创建容器</span><br><span class="line">docker start ID //启动容器</span><br><span class="line">docker stop ID  //停止容器</span><br><span class="line">docker rm ID    //删除容器</span><br><span class="line">docker system df //查看容器使用的磁盘空间</span><br><span class="line">docker system prune -a //对 docker 进行全面垃圾回收,慎用</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200401115748.png"></p>
<h2 id="镜像备份和加载"><a href="#镜像备份和加载" class="headerlink" title="镜像备份和加载"></a>镜像备份和加载</h2><blockquote>
<p>可以用于将国外服务器pull的镜像备份，在国内服务器load镜像</p>
</blockquote>
<ul>
<li><p>save备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save -o backup.tar &lt;IMAGEID&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>load加载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load -i backup.tar</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="docker国内加速"><a href="#docker国内加速" class="headerlink" title="docker国内加速"></a>docker国内加速</h2><ul>
<li><p><strong>方式一</strong>：指定pull源</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull wixr7yss.mirror.aliyuncs.com/ruibaby/halo:latest</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>方式二</strong>：修改全局配置文件</p>
<p>修改<code>/etc/docker/daemon.json</code>文件内容如下，如果没有该文件就直接创建</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://wixr7yss.mirror.aliyuncs.com/&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>方式三</strong>: 使用<code>daocloud</code>加速</p>
<p>具体查找网站其他教程，官方网站网址：<a href="https://www.daocloud.io/">https://www.daocloud.io/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>docker搭建gitea</title>
    <url>/posts/dewho6/</url>
    <content><![CDATA[<blockquote>
<p>参考博客 :point_right: <a href="http://www.siya89.com/blog/docker-gitea-go">文章</a></p>
</blockquote>
<span id="more"></span>
<h2 id="1-gitea-简介"><a href="#1-gitea-简介" class="headerlink" title="1.gitea 简介"></a>1.<code>gitea</code> 简介</h2><p><code>gitea</code> 是在 <code>gitHub</code> 上 <code>fork</code> 于 <code>gogs</code> 的项目，同样具有 <code>gogs</code> 易安装，跨平台，轻量级的特点。gitea 采用 <a href="https://github.com/go-macaron/macaron">Macaron</a> 框架开发。</p>
<h2 id="2-docker-获取gitea镜像"><a href="#2-docker-获取gitea镜像" class="headerlink" title="2.docker 获取gitea镜像"></a>2.<code>docker</code> 获取<code>gitea</code>镜像</h2><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># pull gitea镜像</span></span><br><span class="line"> docker pull gitea/gitea</span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建一个本地可以挂载到容器的目录 </span></span><br><span class="line"> mkdir -p /<span class="class"><span class="keyword">data</span>/gitea</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 给 gitea 加上权限保证其可读可写</span></span><br><span class="line"> cd /<span class="class"><span class="keyword">data</span> &amp;&amp; chmod -<span class="type">R</span> 777 gitea</span></span><br></pre></td></tr></table></figure>



<h2 id="3-docker-获取mysql镜像"><a href="#3-docker-获取mysql镜像" class="headerlink" title="3.docker 获取mysql镜像"></a>3.<code>docker</code> 获取<code>mysql</code>镜像</h2><p>gitea支持 <code>mysql</code>，<code>PgSql</code>，<code>MSSql</code>，<code>SqlLite3</code>数据库。<br>这里我使用<code>mysql</code>数据库存储，使用<code>mysql容器</code>与<code>gitea容器</code>链接。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pull mysql 5.7镜像</span></span><br><span class="line"> <span class="attribute">docker</span> pull mysql:<span class="number">5</span>.<span class="number">7</span></span><br></pre></td></tr></table></figure>

<h2 id="4-docker创建mysql容器"><a href="#4-docker创建mysql容器" class="headerlink" title="4.docker创建mysql容器"></a>4.<code>docker</code>创建<code>mysql</code>容器</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> <span class="attribute">--name</span>=mysql_git -d -p 10812:3306 -e <span class="attribute">MYSQL_PASSWORD</span>=password mysql:5.7</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数说明</p>
</blockquote>
<pre><code>--name=mysql_git：指定创建的容器名为mysql_git
-p 10812:3306: 将容器的3306端口映射到主机10812端口
-e MYSQL_ROOT_PASSWORD=password: 指定mysql的root密码为password
</code></pre>
<h2 id="5-进入mysql容器，创建数据库"><a href="#5-进入mysql容器，创建数据库" class="headerlink" title="5.进入mysql容器，创建数据库"></a>5.进入<code>mysql</code>容器，创建数据库</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> mysql_git bash <span class="comment">#执行命令进入容器</span></span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql</span> -u root -p <span class="comment">#执行该命令后输入root密码</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415172034.png"></p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE gitea_db; <span class="meta">#创建gitea_db数据库</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415172044.png"></p>
<p>最后执行<code>exit</code>退出容器</p>
<h2 id="6-docker-创建容器并运行"><a href="#6-docker-创建容器并运行" class="headerlink" title="6.docker 创建容器并运行"></a>6.<code>docker</code> 创建容器并运行</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初次执行 run gitea，注意这里 gitea 是前台启动，启动后 command + C 退出就好了</span></span><br><span class="line"><span class="comment"># 宿主机 10023 映射到 gitea 容器的 22 ssh 端口</span></span><br><span class="line"><span class="comment"># 宿主机 10081 映射到 gitea 容器的 3000 http 端口</span></span><br><span class="line"><span class="comment"># /data/gitea 目录挂在到容器中的 /data 目录</span></span><br><span class="line"><span class="attribute">docker</span> run --name=gitea -p <span class="number">10023</span>:<span class="number">22</span> -p <span class="number">10081</span>:<span class="number">3000</span> --link mysql_git:db -v /data/gitea:/data gitea/gitea</span><br></pre></td></tr></table></figure>
<p>:key: <code>--link mysql_git:db</code><br>&emsp;&emsp;:point_right:<code>db</code> 就是在gitea容器中mysql_git数据库的地址</p>
<h2 id="7-最后"><a href="#7-最后" class="headerlink" title="7.最后"></a>7.最后</h2><p>访问地址 <code>http://ip:10081/</code> 即是 gitea 地址，首先要配置好你的数据库。</p>
<p>仓库风格如下<br><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415172100.png"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>docker部署typecho+mysql</title>
    <url>/posts/63d1dc7a/</url>
    <content><![CDATA[<p>本篇文章记录docker部署typecho的过程，并将typecho容器和mysql容器进行链接。</p>
<span id="more"></span>
<h2 id="一、部署mysql容器"><a href="#一、部署mysql容器" class="headerlink" title="一、部署mysql容器"></a>一、部署mysql容器</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> <span class="attribute">--name</span>=mysql -d -p 10812:3306  -v /mysql:/var/lib/mysql -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=password mysql:5.7</span><br></pre></td></tr></table></figure>

<p>主要参数说明：</p>
<ul>
<li><code>--name=mysql</code>: 容器名</li>
<li><code>-p 10812:3306</code>: 将主机的10812端口映射到mysql容器的3306端口</li>
<li><code>-v /mysql:/var/lib/mysql</code>: 将容器的/var/lib/mysql文件夹与主机的/mysql文件夹建立映射关系</li>
<li><code>-e MYSQL_ROOT_PASSWORD=password</code>: 设置MYSQL数据库的root用户密码为<code>password</code>，此处按需填写自己的密码</li>
</ul>
<br>

<blockquote>
<p>接下来的步骤是创建typecho数据库</p>
</blockquote>
<p>再输入以下命令进入mysql容器命令行窗口.</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> mysql bash</span><br></pre></td></tr></table></figure>

<p>输入以下命令进入mysql命令行模式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mysql -u root -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure>

<p>接下来输入之前设置的root密码。</p>
<p>此时已经进入了mysql命令行模式，输入以下命令创建typecho数据库。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database typecho;</span><br></pre></td></tr></table></figure>

<p>设置完毕后，输入exit退出Mysql命令行，再输入exit退出容器命令行，回到主机命令行。</p>
<h2 id="二、部署typecho容器"><a href="#二、部署typecho容器" class="headerlink" title="二、部署typecho容器"></a>二、部署typecho容器</h2><p>这里使用的镜像为<code>80x86/typecho</code>。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d <span class="attribute">--name</span>=typecho --restart always --mount <span class="attribute">type</span>=tmpfs,destination=/tmp -v /srv/http/typecho:/data --link mysql:db -e <span class="attribute">PHP_TZ</span>=Asia/Shanghai -e <span class="attribute">PHP_MAX_EXECUTION_TIME</span>=600 -p 90:80 80x86/typecho:latest</span><br></pre></td></tr></table></figure>

<p>主要参数说明：</p>
<ul>
<li><p><code>-v /srv/http/typecho:/data</code>: 将容器的/data文件夹与主机的/srv/http/typecho文件夹建立映射关系</p>
<p>此时在主机上的typecho站点目录为/srv/http/typecho。</p>
</li>
<li><p><code>-p 90:80</code>: 将主机的90端口映射到容器的80端口</p>
</li>
<li><p><code>--link mysql:db</code>: 将mysql容器与typecho容器链接。</p>
</li>
</ul>
<br>

<blockquote>
<p>至此，两个容器已经创建完成，接下来访问站点进行typecho初始化的过程</p>
</blockquote>
<p>注：如果服务器开启了防火墙，需要先将90端口打开(因为上述操作已经将主机的90端口映射到容器的80端口)，假设此时服务器ip为222.222.222.222。</p>
<p>访问地址 <a href="http://222.222.222.222:90/">http://222.222.222.222:90</a>, 即可进入typecho安装页面。</p>
<p>如果选择mysql数据库引擎，填写的数据库地址应为<code>db</code>，注意是<code>db</code>！，端口依然是3306。</p>
<p>因为–link mysql:db这个参数将mysql容器地址映射为typecho容器中的db。如果你进入typecho容器中，使用ping db命令发现db地址为一个内网ip，两个容器在同一个局域网内。</p>
<h2 id="三、博客迁移"><a href="#三、博客迁移" class="headerlink" title="三、博客迁移"></a>三、博客迁移</h2><p>数据库备份主要包含两个部分，一个是typecho站点目录，另一个是数据库内容。</p>
<h3 id="备份站点目录"><a href="#备份站点目录" class="headerlink" title="备份站点目录"></a>备份站点目录</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">zip -r typecho.zip <span class="regexp">/srv/</span>http/typecho</span><br></pre></td></tr></table></figure>

<p>备份后生成了一个typecho压缩包。</p>
<h3 id="备份数据库内容"><a href="#备份数据库内容" class="headerlink" title="备份数据库内容"></a>备份数据库内容</h3><p>依次输入以下命令：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> mysql bash  <span class="comment"># 进入mysql容器命令行</span></span><br><span class="line">mysqldump -u root -p typecho &gt; sqlfile.sql <span class="comment"># 将typecho数据库内容被分为sql文件</span></span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>完成以上步骤就做好了备份，分别为typecho.zip文件和sqlfile.sql文件。</p>
<p>下面介绍如何恢复数据，假设我们按照前文部署typecho流程进行迁移。</p>
</blockquote>
<p>首先按照按照流程部署一下mysql容器和typecho容器，注意此时不要初始化typecho站点。</p>
<h3 id="恢复站点目录内容"><a href="#恢复站点目录内容" class="headerlink" title="恢复站点目录内容"></a>恢复站点目录内容</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入/srv/http/typecho目录</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/srv/http/typecho</span></span><br><span class="line"><span class="comment"># 将typecho文件上传到该目录后，解压文件</span></span><br><span class="line">unzip typecho.zip</span><br><span class="line"><span class="keyword">ls</span> <span class="comment">#查看解压是否正确，正常显示的是typecho站点目录，如果显示了typecho文件夹，注意将文件夹内容移出来。</span></span><br></pre></td></tr></table></figure>

<h3 id="恢复数据库内容"><a href="#恢复数据库内容" class="headerlink" title="恢复数据库内容"></a>恢复数据库内容</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd /mysql <span class="comment">#进入文件夹后，将sqlfile.sql上传到该文件夹</span></span><br><span class="line">docker exec -it mysql bash <span class="comment">#进入容器</span></span><br><span class="line">mysql -u root -p <span class="comment"># 登录数据库并输入密码</span></span><br><span class="line">create database typecho; <span class="comment">#创建数据库</span></span><br><span class="line"><span class="keyword">exit</span> <span class="comment">#退出mysql操作</span></span><br><span class="line">cd <span class="regexp">/var/</span>lib/mysql</span><br><span class="line">mysql -u root -p typecho &lt; sqlfile.sql <span class="comment">#将数据库内容导入</span></span><br><span class="line"><span class="keyword">exit</span> <span class="comment">#退出</span></span><br></pre></td></tr></table></figure>

<br>

<p><strong>注</strong>：如果修改了之前数据库的密码，需要修改typecho站点目录下的<code>config.inc.php</code>文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-05/20200521234412.png"></p>
<p>修改上面的密码。</p>
<h2 id="四、typecho更换域名"><a href="#四、typecho更换域名" class="headerlink" title="四、typecho更换域名"></a>四、typecho更换域名</h2><p>第一步需要登录mysql。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> mysql bash <span class="comment">#进入容器</span></span><br><span class="line">mysql -u root -p typecho <span class="comment">#输入密码，登录mysql的typecho数据库</span></span><br></pre></td></tr></table></figure>

<p>执行以下命令，操作数据库内容。</p>
<p>注意：以下 SQL 语句使用默认表前缀 <code>typecho_</code>，操作数据库前建议备份。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改网站设置里的域名：</span><br><span class="line">UPDATE typecho_options <span class="keyword">SET</span> <span class="keyword">value</span> <span class="operator">=</span> <span class="string">&#x27;https://blog.kervia.ml&#x27;</span> <span class="keyword">WHERE</span> typecho_options.name <span class="operator">=</span> <span class="string">&#x27;siteUrl&#x27;</span> <span class="keyword">AND</span> typecho_options.user <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"># 替换文章的域名</span><br><span class="line">UPDATE typecho_contents <span class="keyword">SET</span> text <span class="operator">=</span> REPLACE(text,<span class="string">&#x27;https;&#x27;</span>,<span class="string">&#x27;新域名&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 将管理员的个人网站进行替换</span><br><span class="line">UPDATE typecho_users <span class="keyword">SET</span> url <span class="operator">=</span> REPLACE(url,<span class="string">&#x27;原域名&#x27;</span>,<span class="string">&#x27;新域名&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 替换评论中的域名</span><br><span class="line">UPDATE typecho_comments <span class="keyword">SET</span> `url` <span class="operator">=</span> REPLACE(`url`,<span class="string">&#x27;原域名&#x27;</span>,<span class="string">&#x27;新域名&#x27;</span>);</span><br><span class="line">UPDATE typecho_comments`<span class="keyword">SET</span> `text` <span class="operator">=</span> REPLACE(`text`,<span class="string">&#x27;原域名&#x27;</span>,<span class="string">&#x27;新域名&#x27;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>typecho</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo本地项目迁移(更换文件夹)</title>
    <url>/posts/ae561650/</url>
    <content><![CDATA[<blockquote>
<p>有时候, 我们可能需要将本地hexo博客项目备份, 或者将本地项目换个文件夹.<br>但是如果我们直接将文件夹移动位置时会发现移动后输入hexo s启动报错,所以我们有必要知道如何将本地项目更换文件夹.<br>如果能做到这一点, 我们还可以备份到另一台电脑, 在其他环境重新编辑部署hexo博客.</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>进入正题, 简单的三个步骤: </p>
</blockquote>
<ol>
<li><p>在新环境下新建文件夹<br> 新建的文件夹用来放置之前的项目<br> 注意: <strong>不要用hexo init初始化</strong></p>
</li>
<li><p>复制原先项目文件<br> 这里我们只需要复制除了.deploy_git, node_modules, public三个文件夹之外, 其他的文件全部复制到新建文件夹里面.</p>
</li>
<li><p>安装所需插件(node_modules)<br>在新建文件夹内, 右键git bash here<br>输入命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install //已经安装阿里镜像的可以用cnpm install</span><br></pre></td></tr></table></figure>
<p>这一步是根据package.json文件安装需要的模块, 具体文件内容可以自己打开看看.</p>
</li>
</ol>
<p>这样我们就完成了项目迁移!</p>
<blockquote>
<p>如果想知道如何迁移到其他电脑,可以参考这个博客:<br><a href="https://andyvj.coding.me/2019/02/19/190219-03/">hexo 迁移更换电脑，或多电脑终端更新博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg常用命令总结</title>
    <url>/posts/d827b859/</url>
    <content><![CDATA[<blockquote>
<p>记录ffmpeg常用命令</p>
</blockquote>
<span id="more"></span>

<ul>
<li>ffmpeg仓库：<a href="https://github.com/FFmpeg/FFmpeg">https://github.com/FFmpeg/FFmpeg</a></li>
<li>ffmpeg下载地址：<a href="https://ffmpeg.org/download.html">https://ffmpeg.org/download.html</a></li>
</ul>
<h1 id="ffmpeg常见参数"><a href="#ffmpeg常见参数" class="headerlink" title="ffmpeg常见参数"></a>ffmpeg常见参数</h1><table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>-acodec</td>
<td>设定音频编解码器，未设定时则使用与输入流相同的编解码器</td>
<td>-acodec copy: 音频编码格式与原音频相同</td>
</tr>
<tr>
<td>-vcodec</td>
<td>设定视频编解码器，未设定时则使用与输入流相同的编解码器</td>
<td>-vcodec copy: 视频编码格式与原音频相同</td>
</tr>
<tr>
<td>-i</td>
<td>输入流，指定要处理的视频/音频文件路径</td>
<td></td>
</tr>
</tbody></table>
<h1 id="一些常见命令"><a href="#一些常见命令" class="headerlink" title="一些常见命令"></a>一些常见命令</h1><h2 id="截取音频片段"><a href="#截取音频片段" class="headerlink" title="截取音频片段"></a>截取音频片段</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp3 -ss hh:mm:ss -to hh:mm:ss -acodec copy output.mp3</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>-ss</strong>: 指定从哪里开始</li>
<li><strong>-to</strong>: 指定从哪里结束</li>
</ul>
<p>如果需要精确到毫秒，hh:mm:ss可以改为hh:mm:ss.xxx，如00:00:10.500。</p>
<h2 id="合并音频视频文件"><a href="#合并音频视频文件" class="headerlink" title="合并音频视频文件"></a>合并音频视频文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -i input.mp3 -acodec copy -vcodec copy output.mp4</span><br></pre></td></tr></table></figure>

<h2 id="从视频中提取音频"><a href="#从视频中提取音频" class="headerlink" title="从视频中提取音频"></a>从视频中提取音频</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vn output.mp3</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>-vn</strong>: 禁用视频</li>
</ul>
<h2 id="音频格式转换：m4a-gt-mp3"><a href="#音频格式转换：m4a-gt-mp3" class="headerlink" title="音频格式转换：m4a -&gt; mp3"></a>音频格式转换：m4a -&gt; mp3</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.m4a -acodec libmp3lame output.mp3</span><br></pre></td></tr></table></figure>

<h1 id="附：ffmpeg-4-3-1-命令参数大全"><a href="#附：ffmpeg-4-3-1-命令参数大全" class="headerlink" title="附：ffmpeg 4.3.1 命令参数大全"></a>附：ffmpeg 4.3.1 命令参数大全</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg version 4.3.1-2020-11-19-full_build-www.gyan.dev Copyright (c) 2000-2020 the FFmpeg developers</span><br><span class="line">  built with gcc 10.2.0 (Rev5, Built by MSYS2 project)</span><br><span class="line">  configuration: --enable-gpl --enable-version3 --enable-static --disable-w32threads --disable-autodetect --enable-fontconfig --enable-iconv --enable-gnutls --enable-libxml2 --enable-gmp --enable-lzma --enable-libsnappy --enable-zlib --enable-libsrt --enable-libssh --enable-libzmq --enable-avisynth --enable-libbluray --enable-libcaca --enable-sdl2 --enable-libdav1d --enable-libzvbi --enable-librav1e --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxvid --enable-libaom --enable-libopenjpeg --enable-libvpx --enable-libass --enable-frei0r --enable-libfreetype --enable-libfribidi --enable-libvidstab --enable-libvmaf --enable-libzimg --enable-amf --enable-cuda-llvm --enable-cuvid --enable-ffnvcodec --enable-nvdec --enable-nvenc --enable-d3d11va --enable-dxva2 --enable-libmfx --enable-libcdio --enable-libgme --enable-libmodplug --enable-libopenmpt --enable-libopencore-amrwb --enable-libmp3lame --enable-libshine --enable-libtheora --enable-libtwolame --enable-libvo-amrwbenc --enable-libilbc --enable-libgsm --enable-libopencore-amrnb --enable-libopus --enable-libspeex --enable-libvorbis --enable-ladspa --enable-libbs2b --enable-libflite --enable-libmysofa --enable-librubberband --enable-libsoxr --enable-chromaprint</span><br><span class="line">  libavutil      56. 51.100 / 56. 51.100</span><br><span class="line">  libavcodec     58. 91.100 / 58. 91.100</span><br><span class="line">  libavformat    58. 45.100 / 58. 45.100</span><br><span class="line">  libavdevice    58. 10.100 / 58. 10.100</span><br><span class="line">  libavfilter     7. 85.100 /  7. 85.100</span><br><span class="line">  libswscale      5.  7.100 /  5.  7.100</span><br><span class="line">  libswresample   3.  7.100 /  3.  7.100</span><br><span class="line">  libpostproc    55.  7.100 / 55.  7.100</span><br><span class="line">Hyper fast Audio and Video encoder</span><br><span class="line">usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...</span><br><span class="line"></span><br><span class="line">Getting help:</span><br><span class="line">    -h      -- print basic options</span><br><span class="line">    -h long -- print more options</span><br><span class="line">    -h full -- print all options (including all format and codec specific options, very long)</span><br><span class="line">    -h type=name -- print all options for the named decoder/encoder/demuxer/muxer/filter/bsf/protocol</span><br><span class="line">    See man ffmpeg for detailed description of the options.</span><br><span class="line"></span><br><span class="line">Print help / information / capabilities:</span><br><span class="line">-L                  show license</span><br><span class="line">-h topic            show help</span><br><span class="line">-? topic            show help</span><br><span class="line">-help topic         show help</span><br><span class="line">--help topic        show help</span><br><span class="line">-version            show version</span><br><span class="line">-buildconf          show build configuration</span><br><span class="line">-formats            show available formats</span><br><span class="line">-muxers             show available muxers</span><br><span class="line">-demuxers           show available demuxers</span><br><span class="line">-devices            show available devices</span><br><span class="line">-codecs             show available codecs</span><br><span class="line">-decoders           show available decoders</span><br><span class="line">-encoders           show available encoders</span><br><span class="line">-bsfs               show available bit stream filters</span><br><span class="line">-protocols          show available protocols</span><br><span class="line">-filters            show available filters</span><br><span class="line">-pix_fmts           show available pixel formats</span><br><span class="line">-layouts            show standard channel layouts</span><br><span class="line">-sample_fmts        show available audio sample formats</span><br><span class="line">-colors             show available color names</span><br><span class="line">-sources device     list sources of the input device</span><br><span class="line">-sinks device       list sinks of the output device</span><br><span class="line">-hwaccels           show available HW acceleration methods</span><br><span class="line"></span><br><span class="line">Global options (affect whole program instead of just one file):</span><br><span class="line">-loglevel loglevel  set logging level</span><br><span class="line">-v loglevel         set logging level</span><br><span class="line">-report             generate a report</span><br><span class="line">-max_alloc bytes    set maximum size of a single allocated block</span><br><span class="line">-y                  overwrite output files</span><br><span class="line">-n                  never overwrite output files</span><br><span class="line">-ignore_unknown     Ignore unknown stream types</span><br><span class="line">-filter_threads     number of non-complex filter threads</span><br><span class="line">-filter_complex_threads  number of threads for -filter_complex</span><br><span class="line">-stats              print progress report during encoding</span><br><span class="line">-max_error_rate maximum error rate  ratio of errors (0.0: no errors, 1.0: 100% errors) above which ffmpeg returns an error instead of success.</span><br><span class="line">-bits_per_raw_sample number  set the number of bits per raw sample</span><br><span class="line">-vol volume         change audio volume (256=normal)</span><br><span class="line"></span><br><span class="line">Per-file main options:</span><br><span class="line">-f fmt              force format</span><br><span class="line">-c codec            codec name</span><br><span class="line">-codec codec        codec name</span><br><span class="line">-pre preset         preset name</span><br><span class="line">-map_metadata outfile[,metadata]:infile[,metadata]  set metadata information of outfile from infile</span><br><span class="line">-t duration         record or transcode &quot;duration&quot; seconds of audio/video</span><br><span class="line">-to time_stop       record or transcode stop time</span><br><span class="line">-fs limit_size      set the limit file size in bytes</span><br><span class="line">-ss time_off        set the start time offset</span><br><span class="line">-sseof time_off     set the start time offset relative to EOF</span><br><span class="line">-seek_timestamp     enable/disable seeking by timestamp with -ss</span><br><span class="line">-timestamp time     set the recording timestamp (&#x27;now&#x27; to set the current time)</span><br><span class="line">-metadata string=string  add metadata</span><br><span class="line">-program title=string:st=number...  add program with specified streams</span><br><span class="line">-target type        specify target file type (&quot;vcd&quot;, &quot;svcd&quot;, &quot;dvd&quot;, &quot;dv&quot; or &quot;dv50&quot; with optional prefixes &quot;pal-&quot;, &quot;ntsc-&quot; or &quot;film-&quot;)</span><br><span class="line">-apad               audio pad</span><br><span class="line">-frames number      set the number of frames to output</span><br><span class="line">-filter filter_graph  set stream filtergraph</span><br><span class="line">-filter_script filename  read stream filtergraph description from a file</span><br><span class="line">-reinit_filter      reinit filtergraph on input parameter changes</span><br><span class="line">-discard            discard</span><br><span class="line">-disposition        disposition</span><br><span class="line"></span><br><span class="line">Video options:</span><br><span class="line">-vframes number     set the number of video frames to output</span><br><span class="line">-r rate             set frame rate (Hz value, fraction or abbreviation)</span><br><span class="line">-s size             set frame size (WxH or abbreviation)</span><br><span class="line">-aspect aspect      set aspect ratio (4:3, 16:9 or 1.3333, 1.7777)</span><br><span class="line">-bits_per_raw_sample number  set the number of bits per raw sample</span><br><span class="line">-vn                 disable video</span><br><span class="line">-vcodec codec       force video codec (&#x27;copy&#x27; to copy stream)</span><br><span class="line">-timecode hh:mm:ss[:;.]ff  set initial TimeCode value.</span><br><span class="line">-pass n             select the pass number (1 to 3)</span><br><span class="line">-vf filter_graph    set video filters</span><br><span class="line">-ab bitrate         audio bitrate (please use -b:a)</span><br><span class="line">-b bitrate          video bitrate (please use -b:v)</span><br><span class="line">-dn                 disable data</span><br><span class="line"></span><br><span class="line">Audio options:</span><br><span class="line">-aframes number     set the number of audio frames to output</span><br><span class="line">-aq quality         set audio quality (codec-specific)</span><br><span class="line">-ar rate            set audio sampling rate (in Hz)</span><br><span class="line">-ac channels        set number of audio channels</span><br><span class="line">-an                 disable audio</span><br><span class="line">-acodec codec       force audio codec (&#x27;copy&#x27; to copy stream)</span><br><span class="line">-vol volume         change audio volume (256=normal)</span><br><span class="line">-af filter_graph    set audio filters</span><br><span class="line"></span><br><span class="line">Subtitle options:</span><br><span class="line">-s size             set frame size (WxH or abbreviation)</span><br><span class="line">-sn                 disable subtitle</span><br><span class="line">-scodec codec       force subtitle codec (&#x27;copy&#x27; to copy stream)</span><br><span class="line">-stag fourcc/tag    force subtitle tag/fourcc</span><br><span class="line">-fix_sub_duration   fix subtitles duration</span><br><span class="line">-canvas_size size   set canvas size (WxH or abbreviation)</span><br><span class="line">-spre preset        set the subtitle options to the indicated preset</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>命令总结</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下搭建selenium环境</title>
    <url>/posts/65c4a6d8/</url>
    <content><![CDATA[<blockquote>
<p>记录在linux服务器上搭建selenium环境，用于Python爬虫</p>
</blockquote>
<span id="more"></span>

<h1 id="安装chrome浏览器"><a href="#安装chrome浏览器" class="headerlink" title="安装chrome浏览器"></a>安装chrome浏览器</h1><h2 id="Centos7"><a href="#Centos7" class="headerlink" title="Centos7"></a>Centos7</h2><ol>
<li><p>添加 yum 信息</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/yum</span>.repos.d/google-chrome.repo</span><br></pre></td></tr></table></figure>

<p>向文件中添加以下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[google-chrome]</span></span><br><span class="line"><span class="attr">name</span>=google-chrome</span><br><span class="line"><span class="attr">baseurl</span>=http://dl.google.com/linux/chrome/rpm/stable/<span class="variable">$basearch</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://dl-ssl.google.com/linux/linux_signing_key.pub</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装chrome</p>
<p>Google官方源安装：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> google-chrome-stable</span><br></pre></td></tr></table></figure>

<p>Google官方源可能在中国无法使用，导致安装失败或者在国内无法更新，可以添加以下参数来安装：　　</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">yum -y install google-chrome-<span class="keyword">stable</span> <span class="comment">--nogpgcheck</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 chrome 到环境变量中</p>
<p>找到chrome路径，并做个软连接，方便使用:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">which google-chrome-stable</span><br><span class="line">ln -s xxx <span class="regexp">/bin/</span>chrome <span class="comment"># xxx为chrome可执行文件路径</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Ubuntu-18-04"><a href="#Ubuntu-18-04" class="headerlink" title="Ubuntu 18.04"></a>Ubuntu 18.04</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先安装各种依赖：</span></span><br><span class="line">sudo apt-get -f install</span><br><span class="line"><span class="meta">#</span><span class="bash">32位下载与安装命令:</span></span><br><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb</span><br><span class="line">sudo dpkg -i google-chrome-stable_current_i386.deb</span><br><span class="line"><span class="meta">#</span><span class="bash">64位下载与安装命令:</span></span><br><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br><span class="line"><span class="meta">#</span><span class="bash">查看版本</span></span><br><span class="line">google-chrome --version</span><br></pre></td></tr></table></figure>

<p>如果出现dpkg安装错误，再输入命令<code>sudo apt-get -f install</code>，之后重新使用dpkg安装。</p>
<h1 id="下载webdriver"><a href="#下载webdriver" class="headerlink" title="下载webdriver"></a>下载webdriver</h1><p>​        以chromedriver为例，<a href="https://chromedriver.storage.googleapis.com/index.html">下载地址</a> ,选择对应版本的driver</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-11/20201108234442.png"></p>
<p>Python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">chromeOptions = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># 加载无窗口浏览器</span></span><br><span class="line">chromeOptions.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line"><span class="comment">#chromeOptions.add_argument(&#x27;--disable-dev-shm-usage&#x27;)</span></span><br><span class="line">chromeOptions.add_argument(<span class="string">&#x27;--lang=en_US&#x27;</span>)</span><br><span class="line"><span class="comment"># 以根用户打身份运行Chrome，使用-no-sandbox标记重新运行Chrome,禁止沙箱启动</span></span><br><span class="line">chromeOptions.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line">driver = webdriver.Chrome(options=chromeOptions, executable_path=driver_path) <span class="comment">#driver_path为driver路径</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>linux学习01 - linux系统简介</title>
    <url>/posts/51bc6a9b/</url>
    <content><![CDATA[<blockquote>
<p>linux学习01：linux系统简介<br>内容转载自实验楼：<a href="https://www.shiyanlou.com/courses/1/">https://www.shiyanlou.com/courses/1/</a></p>
</blockquote>
<span id="more"></span>



<h4 id="linux为何物"><a href="#linux为何物" class="headerlink" title="linux为何物"></a>linux为何物</h4><p>Linux 就是一个操作系统，就像你多少已经了解的 Windows（xp，7，8）和 Mac OS 。至于操作系统是什么，就不用过多解释了，如果你学习过前面的入门课程，应该会有个基本概念了，这里简单介绍一下操作系统在整个计算机系统中的角色。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410210541.png"></p>
<p>我们的 Linux 主要是系统调用和内核那两层。当然直观地看，我们使用的操作系统还包含一些在其上运行的应用程序，比如文本编辑器、浏览器、电子邮件等。</p>
<h4 id="linux历史简介"><a href="#linux历史简介" class="headerlink" title="linux历史简介"></a>linux历史简介</h4><p>操作系统始于二十世纪五十年代，当时的操作系统能运行批处理程序。批处理程序不需要用户的交互，它从文件或者穿孔卡片读取数据，然后输出到另外一个文件或者打印机。</p>
<p>二十世纪六十年代初，交互式操作系统开始流行。它不仅仅可以交互，还能使多个用户从不同的终端同时操作主机。这样的操作系统被称作分时操作系统，它的出现对批处理操作系统是个极大的挑战。许多人尝试开发分时操作系统， 其中包括一些大学的研究项目和商业项目。当时有个项目叫做 Multics ，它的技术在当时很具有创新性。 Multics 项目的开发并不顺利，它花费了远超过预计的资金，却没有在操作系统市场上占到多少份额。而参加该项目的一个开发团体——贝尔实验室退出了这个项目。他们在退出后开发了他们自己的一个操作系统—— UNIX 。</p>
<p>UNIX 最初免费发布并因此在大学里受到欢迎。后来，UNIX 实现了 TCP/IP 协议栈，成为了早期工作站的操作系统的一个流行选择。</p>
<p>1990 年，UNIX 在服务器市场上尤其是大学校园中成为主流操作系统，许多校园都有 UNIX 主机，当然还包括一些研究它的计算机系的学生。这些学生都渴望能在自己的电脑上运行 UNIX 。不幸的是，从那时候开始，UNIX 开始变得商业化，它的价格也变得非常昂贵。而唯一低廉的选择就是 MINIX，这是一个功能有限的类似 UNIX 的操作系统，作者 Andrew Tanenbaum 开发它的目的是用于教学。</p>
<p>1991 年 10 月，Linus Torvalds（Linux 之父）在赫尔辛基大学接触 UNIX，他希望能在自己的电脑上运行一个类似的操作系统。可是 UNIX 的商业版本非常昂贵，于是他从 MINIX 开始入手，计划开发一个比 MINIX 性能更好的操作系统。很快他就开始了自己的开发工作。他第一次发行的版本迅速吸引了一些黑客。尽管最初的 Linux 并没有多少用处，但由于一些黑客的加入使它很快就具有了许多吸引人的特性，甚至一些对操作系统开发不感兴趣的人也开始关注它。</p>
<p>Linux 本身只是操作系统的内核。内核是使其它程序能够运行的基础。它实现了多任务和硬件管理，用户或者系统管理员交互运行的所有程序实际上都运行在内核之上。其中有些程序是必需的，比如说，命令行解释器（shell），它用于用户交互和编写 shell 脚本。 Linux 没有自己去开发这些应用程序，而是使用已有的自由软件。这减少了搭建开发环境所需花费的工作量。实际上，他经常改写内核，使得那些程序能够更容易地在 Linux 上运行。许多重要的软件，包括 C 编译器，都来自于自由软件基金 GNU 项目。GNU 项目开始于 1984 年，目的是为了开发一个完全类似于 UNIX 的免费操作系统。为了表扬 GNU 对 Linux 的贡献，许多人把 Linux 称为 GNU/Linux（GNU 有自己的内核）。</p>
<p>1992－1993 年，Linux 内核具备了挑战 UNIX 的所有本质特性，包括 TCP/IP 网络，图形界面系统（X window )，Linux 同样也吸引了许多行业的关注。一些小的公司开始开发和发行 Linux，有几十个 Linux 用户社区成立。1994 年，Linux 杂志也开始发行。</p>
<p>Linux 内核 1.0 在 1994 年 3 月发布，内核的发布要经历许多开发周期，直至达到一个稳定的版本。</p>
<p>下面列举一些 Linux 诞生大事件：</p>
<ul>
<li>1965 年，Bell 实验室、MIT、GE（通用电气公司）准备开发 Multics 系统，为了同时支持 300 个终端访问主机，但是 1969 年失败了；<blockquote>
<p>那时候并没有鼠标、键盘，输入设备，只有卡片机。因此，如果要测试某个程序，则需要将读卡纸插入卡片机，如果有错误，还需要重新来过；Multics：Multiplexed Information and Computing Service；</p>
</blockquote>
</li>
<li>1969 年，Ken Thompson（C语言之父）利用汇编语言开发了 File Server System（Unics，即 UNIX 的原型）；<blockquote>
<p>因为汇编语言对于硬件的依赖性，因此只能针对特定硬件； 只是为了移植一款“太空旅游”的游戏；</p>
</blockquote>
</li>
<li>1973 年，Dennis Ritchie 和 Ken Thompson 发明了 C 语言，而后写出了 UNIX 的内核；<blockquote>
<p>将 B 语言改成 C 语言，由此产生了 C 语言之父；90% 的代码是 C 语言写的，10% 的代码用汇编语言写的，因此移植时只要修改那 10% 的代码即可；</p>
</blockquote>
</li>
<li>1977 年，Berkeley 大学的 Bill Joy 针对他的机器修改了 UNIX 源码，称为BSD（Berkeley Software Distribution）；<blockquote>
<p>Bill Joy 是 Sun 公司的创始人；</p>
</blockquote>
</li>
<li>1979 年，UNIX 发布 System V，用于个人计算机；</li>
<li>1984 年，因为 UNIX 规定“不能对学生提供源码”，Tanenbaum 老师自己编写兼容于 UNIX 的 Minix，用于教学；</li>
<li>1984 年，Stallman 开始 GNU（GNU’s Not Unix）项目，创办 FSF（Free Software Foundation）基金会；<blockquote>
<p>产品：GCC、Emacs、Bash Shell、GLIBC；倡导“自由软件”；GNU 的软件缺乏一个开放的平台运行，只能在 UNIX 上运行；自由软件指用户可以对软件做任何修改，甚至再发行，但是始终要挂着 GPL 的版权；自由软件是可以卖的，但是不能只卖软件，而是卖服务、手册等；</p>
</blockquote>
</li>
<li>1985 年，为了避免 GNU 开发的自由软件被其他人用作专利软件，因此创建 GPL（General Public License）版权声明；</li>
<li>1988 年，MIT 为了开发 GUI，成立了研发 XFree86 的组织；</li>
<li>1991 年，芬兰赫尔辛基大学的研究生 Linus Torvalds 基于 gcc、bash 开发了针对 386 机器的 Linux 内核；</li>
<li>1994 年，Torvalds 发布 Linux-v1.0；</li>
<li>1996 年，Torvalds 发布 Linux-v2.0，确定了 Linux 的吉祥物：企鹅。</li>
</ul>
<p>UNIX进化史（UNIX大家族族谱1969-2013）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410210553.png"></p>
<h4 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h4><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410210608.png"></p>
<h4 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h4><p>相对于现在的 Windows 系统，UNIX/Linux 本身是没有图形界面的，我们通常在 UNIX/Linux 发行版上看到的图形界面实际都只是运行在 Linux 系统之上的一套软件，类似 Windows95 之前的 Windows 的图形界面实则也只是运行在 DOS 环境的一套软件。而 Linux 上的这套软件以前是 XFree86，现在则是 xorg（X.Org），而这套软件又是通过 X 窗口系统（X Window System，也常被称为 X11 或 X）实现的，X 本身只是工具包及架构协议，而 xorg 便是 X 架构规范的一个实现体，也就是说它是实现了 X 协议规范的一个提供图形界面服务的服务器，就像实现了 http 协议提供 web 服务的 Apache 。如果只有服务器也是不能实现一个完整的桌面环境的，当然还需要一个客户端，我们称为 X Client，像如下几个大家熟知也最流行的实现了客户端功能的桌面环境 <strong>KDE</strong>，<strong>GNOME</strong>，<strong>XFCE</strong>，<strong>LXDE</strong> 。其中就有你看到的，实验楼目前使用的 <strong>XFCE</strong> 桌面环境，部分老用户可能可以回想起，实验楼之前使用的环境是 <strong>LXDE</strong> 。这也意味着在 Linux 上你可以自己选择安装不同的桌面环境，甚至可以定制自己的专属桌面。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410210619.png"></p>
<p>这里讲这么多，主要是为了帮助你更好地理解 Linux 的桌面环境是一个怎样的概念，以及它跟 Windows 操作系统桌面的差异，实际它们之间是有着本质的差别的，希望清楚这些内容之后可以让你忽略那些体验上的差异，专心把精力放到 Linux 系统本身或者你正准备学习的某一门技术之上，这门实验课后面的内容和实验楼的其它课程便是为了帮助你实现以上两个目标。</p>
<h4 id="终端的概念"><a href="#终端的概念" class="headerlink" title="终端的概念"></a>终端的概念</h4><p>通常我们在使用 Linux 时，并不是直接与系统打交道，而是通过一个叫做 Shell 的中间程序来完成的，在图形界面下为了实现让我们在一个窗口中完成用户输入和显示输出，Linux 系统还提供了一个叫做终端模拟器的程序（Terminal）。 下面是几个比较常见的终端模拟器： gnome-terminal，Konsole，xterm，rxvt，kvt，nxterm 和 eterm 。目前我们的实验中的终端程序是 xfce 桌面环境自带的 xfce-terminal 。不过要注意的是这里所说的终端（Terminal）和控制台（Console）是有区别的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410210631.png"></p>
<p> 终端本质上是对应着 Linux 上的 /dev/tty 设备，Linux 的多用户登陆就是通过不同的 /dev/tty 设备完成的，Linux 默认提供了 6 个纯命令行界面的 “terminal”（准确的说这里应该是 6 个 virtual consoles）来让用户登录。在物理机系统上你可以通过使用<code>[Ctrl]</code>+<code>[Alt]</code>+<code>[F1]～[F6]</code>进行切换，不过在我们的在线实验环境中可能无法切换，因为特殊功能按键会被你的主机系统劫持。当你切换到其中一个终端后想要切换回图形界面，你可以按下<code>[Ctrl]</code>+<code>[Alt]</code>+<code>[F7]</code>来完成。</p>
<h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><p>通常在图形界面中对实际体验带来差异的不是上述的不同发行版的各种终端模拟器，而是这个 Shell（壳）。有壳就有核，这里的核就是指 UNIX/Linux 内核，Shell 是指“提供给使用者使用界面”的软件（命令解析器），类似于 DOS 下的 command（命令行）和后来的 cmd.exe 。普通意义上的 Shell 就是可以接受用户输入命令的程序。它之所以被称作 Shell 是因为它隐藏了操作系统底层的细节。同样的 UNIX/Linux 下的图形用户界面 GNOME 和 KDE，有时也被叫做“虚拟 shell”或“图形 shell”。</p>
<p>UNIX/Linux 操作系统下的 Shell 既是用户交互的界面，也是控制系统的脚本语言。当然这一点也有别于 Windows 下的命令行，虽然该命令行也提供了很简单的控制语句。在 Windows 操作系统下，有些用户从来都不会直接使用 Shell，然而在 UNIX 系列操作系统下，Shell 仍然是控制系统启动、X11 启动和很多其它实用工具的脚本解释程序。</p>
<p>在 UNIX/Linux 中比较流行的常见的 Shell 有 bash、zsh、ksh、csh 等等，Ubuntu 终端默认使用的是 bash，默认的桌面环境是 GNOME 或者 Unity（基于 GNOME），但我们的环境中使用的分别是 zsh 和 xfce。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux学习03 - 用户及权限管理</title>
    <url>/posts/68370406/</url>
    <content><![CDATA[<blockquote>
<p>linux学习03：用户及权限管理<br>内容转载自实验楼：<a href="https://www.shiyanlou.com/courses/1/">https://www.shiyanlou.com/courses/1/</a></p>
</blockquote>
<span id="more"></span>

<h3 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h3><p>请打开终端，输入命令：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>who am i</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>who mom likes</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-1.png"></p>
<p> 输出的第一列表示打开当前伪终端的用户的用户名（要查看当前登录用户的用户名，去掉空格直接使用 <code>whoami</code> 即可），第二列的 <code>pts/0</code> 中 <code>pts</code> 表示伪终端，所谓伪是相对于 <code>/dev/tty</code> 设备而言的，还记得上一节讲终端时的那七个使用 <code>[Ctrl]</code>+<code>[Alt]</code>+<code>[F1]～[F7]</code> 进行切换的 <code>/dev/tty</code> 设备么,这是“真终端”，伪终端就是当你在图形用户界面使用 <code>/dev/tty7</code> 时每打开一个终端就会产生一个伪终端， <code>pts/0</code> 后面那个数字就表示打开的伪终端序号，你可以尝试再打开一个终端，然后在里面输入 <code>who am i</code> ，看第二列是不是就变成 <code>pts/1</code> 了，第三列则表示当前伪终端的启动时间。</p>
<p><code>who</code> 命令其它常用参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>-a</code></td>
<td>打印能打印的全部</td>
</tr>
<tr>
<td><code>-d</code></td>
<td>打印死掉的进程</td>
</tr>
<tr>
<td><code>-m</code></td>
<td>同<code>am i</code>,<code>mom likes</code></td>
</tr>
<tr>
<td><code>-q</code></td>
<td>打印当前登录用户数及用户名</td>
</tr>
<tr>
<td><code>-u</code></td>
<td>打印当前登录用户登录信息</td>
</tr>
<tr>
<td><code>-r</code></td>
<td>打印运行等级</td>
</tr>
</tbody></table>
<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>在 Linux 系统里， <code>root</code> 账户拥有整个系统至高无上的权利，比如 新建/添加 用户。</p>
<blockquote>
<p>root 权限，系统权限的一种，与 SYSTEM 权限可以理解成一个概念，但高于 Administrator 权限，root 是 Linux 和 UNIX 系统中的超级管理员用户帐户，该帐户拥有整个系统至高无上的权力，所有对象他都可以操作，所以很多黑客在入侵系统的时候，都要把权限提升到 root 权限，用 Windows 的方法理解也就是将自己的非法帐户添加到 Administrators 用户组。更比如安卓操作系统中（基于 Linux 内核）获得 root 权限之后就意味着已经获得了手机的最高权限，这时候你可以对手机中的任何文件（包括系统文件）执行所有增、删、改、查的操作。</p>
</blockquote>
<p>我们一般登录系统时都是以普通账户的身份登录的，要创建用户需要 root 权限，这里就要用到 <code>sudo</code> 这个命令了。不过使用这个命令有两个大前提，一是你要知道当前登录用户的密码，二是当前用户必须在 <code>sudo</code> 用户组。shiyanlou 用户也属于 sudo 用户组（稍后会介绍如何查看和添加用户组）。</p>
<h4 id="su，su-与-sudo"><a href="#su，su-与-sudo" class="headerlink" title="su，su- 与 sudo"></a>su，su- 与 sudo</h4><p><strong>需要注意 Linux 环境下输入密码是不会显示的。</strong></p>
<p><code>su &lt;user&gt;</code> 可以切换到用户 user，执行时需要输入目标用户的密码，<code>sudo &lt;cmd&gt;</code> 可以以特权级别运行 cmd 命令，需要当前用户属于 sudo 组，且需要输入当前用户的密码。<code>su - &lt;user&gt;</code> 命令也是切换用户，<font color="red">同时环境变量也会跟着改变成目标用户的环境变量。</font></p>
<p>现在我们新建一个叫 lilei 的用户：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo adduser lilei</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>实验楼的环境目前设置为 shiyanlou 用户执行 sudo 不需要输入密码，通常此处需要按照提示输入 shiyanlou 密码（<strong>Linux 下密码输入是不显示任何内容的</strong>），shiyanlou 用户密码可以通过 <code>sudo passwd shiyanlou</code> 命令进行设置。然后是给 lilei 用户设置密码，后面的选项的一些内容你可以选择直接回车使用默认值：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-2.png"></p>
<p>这个命令不但可以添加用户到系统，同时也会默认为新用户创建 home 目录：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">ls</span> <span class="string">/home</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在你已经创建好一个用户，并且你可以使用你创建的用户登录了，使用如下命令切换登录用户：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>su -l lilei</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输入刚刚设置的 lilei 的密码，然后输入如下命令并查看输出：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> who am i</span><br><span class="line"><span class="variable">$</span> whoami</span><br><span class="line"><span class="variable">$</span> <span class="built_in">pwd</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>退出当前用户跟退出终端一样可以使用 <code>exit</code> 命令或者使用快捷键 <code>Ctrl+d</code>。</p>
<h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><p>在 Linux 里面每个用户都有一个归属（用户组），用户组简单地理解就是一组用户的集合，它们共享一些资源和权限，同时拥有私有资源，就跟家的形式差不多，你的兄弟姐妹（不同的用户）属于同一个家（用户组），你们可以共同拥有这个家（共享资源），爸妈对待你们都一样（共享权限），你偶尔写写日记，其他人未经允许不能查看（私有资源和权限）。当然一个用户是可以属于多个用户组的，正如你既属于家庭，又属于学校或公司。</p>
<p>在 Linux 里面如何知道自己属于哪些用户组呢？</p>
<h4 id="方法一：使用-groups-命令"><a href="#方法一：使用-groups-命令" class="headerlink" title="方法一：使用 groups 命令"></a>方法一：使用 groups 命令</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>groups shiyanlou</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-3.png"></p>
<p>其中冒号之前表示用户，后面表示该用户所属的用户组。这里可以看到 shiyanlou 用户属于 shiyanlou 用户组，<strong>每次新建用户如果不指定用户组的话，默认会自动创建一个与用户名相同的用户组</strong>（差不多就相当于家长的意思，或者说是老总）。默认情况下在 sudo 用户组里的可以使用 sudo 命令获得 root 权限。shiyanlou 用户也可以使用 sudo 命令，为什么这里没有显示在 sudo 用户组里呢？可以查看下 <code>/etc/sudoers.d/shiyanlou</code> 文件，我们在 <code>/etc/sudoers.d</code> 目录下创建了这个文件，从而给 shiyanlou 用户赋予了 sudo 权限：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-4.png"></p>
<h4 id="方法二：查看-etc-group-文件"><a href="#方法二：查看-etc-group-文件" class="headerlink" title="方法二：查看 /etc/group 文件"></a>方法二：查看 <code>/etc/group</code> 文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> /etc/<span class="built_in">group</span> | <span class="built_in">sort</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里 <code>cat</code> 命令用于读取指定文件的内容并打印到终端输出，后面会详细讲它的使用。 <code>| sort</code> 表示将读取的文本进行一个字典排序再输出，然后你将看到如下一堆输出，你可以在最下面看到 shiyanlou 的用户组信息：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-5.png"></p>
<p>没找到，没关系，你可以使用命令过滤掉一些你不想看到的结果：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">$ cat /etc/<span class="keyword">group</span> <span class="title">| grep</span> -E <span class="string">&quot;shiyanlou&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-6.png"></p>
<h5 id="etc-group-文件格式说明"><a href="#etc-group-文件格式说明" class="headerlink" title="/etc/group 文件格式说明"></a><code>/etc/group</code> 文件格式说明</h5><p>/etc/group 的内容包括用户组（Group）、用户组口令、GID 及该用户组所包含的用户（User），每个用户组一条记录。格式如下：</p>
<blockquote>
<p>group_name:password:GID:user_list</p>
</blockquote>
<p>你看到上面的 password 字段为一个 <code>x</code> 并不是说密码就是它，只是表示密码不可见而已。</p>
<p>这里需要注意，如果用户的 GID 等于用户组的 GID，那么最后一个字段 <code>user_list</code> 就是空的，比如 shiyanlou 用户，在 <code>/etc/group</code> 中的 shiyanlou 用户组后面是不会显示的。lilei 用户，在 <code>/etc/group</code> 中的 lilei 用户组后面是不会显示的。</p>
<h5 id="将其它用户加入-sudo-用户组"><a href="#将其它用户加入-sudo-用户组" class="headerlink" title="将其它用户加入 sudo 用户组"></a>将其它用户加入 sudo 用户组</h5><p>默认情况下新创建的用户是不具有 root 权限的，也不在 sudo 用户组，可以让其加入 sudo 用户组从而获取 root 权限：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> su <span class="literal">-l</span> lilei</span><br><span class="line"><span class="variable">$</span> sudo <span class="built_in">ls</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>会提示 lilei 不在 sudoers 文件中，意思就是 lilei 不在 sudo 用户组中，至于 sudoers 文件（/etc/sudoers）你现在最好不要动它，操作不慎会导致比较麻烦的后果。</p>
<p>使用 <code>usermod</code> 命令可以为用户添加用户组，同样使用该命令你必需有 root 权限，你可以直接使用 root 用户为其它用户添加用户组，或者用其它已经在 sudo 用户组的用户使用 sudo 命令获取权限来执行该命令。</p>
<p>这里我用 shiyanlou 用户执行 sudo 命令将 lilei 添加到 sudo 用户组，让它也可以使用 sudo 命令获得 root 权限：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>su shiyanlou  <span class="comment"># 注意 Linux 上输入密码是不会显示的</span></span><br><span class="line"><span class="variable">$ </span>groups lilei</span><br><span class="line"><span class="variable">$ </span>sudo usermod -G sudo lilei</span><br><span class="line"><span class="variable">$ </span>groups lilei</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后你再切换回 lilei 用户，现在就可以使用 sudo 获取 root 权限了。</p>
<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>删除用户是很简单的事：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">$ sudo deluser lilei --remove-home</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-7.png"></p>
<h3 id="linux文件权限"><a href="#linux文件权限" class="headerlink" title="linux文件权限"></a>linux文件权限</h3><p>文件权限就是文件的访问控制权限，即哪些用户和组群可以访问文件以及可以执行什么样的操作。</p>
<p>Unix/Linux系统是一个典型的多用户系统，不同的用户处于不同的地位，对文件和目录有不同的访问权限。为了保护系统的安全性，Unix/Linux系统除了对用户权限作了严格的界定外，还在用户身份认证、访问控制、传输安全、文件读写权限等方面作了周密的控制。</p>
<p>在 Unix/Linux中的每一个文件或目录都包含有访问权限，这些访问权限决定了谁能访问和如何访问这些文件和目录。</p>
<hr>

<p>我们之前已经很多次用到<code>ls</code>命令了，如你所见，我们用它来列出并显示当前目录下的文件，当然这是在不带任何参数的情况下，它能做的当然不止这么多，现在我们就要用它来查看文件权限。</p>
<p>使用较长格式列出文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-l</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-8.png"></p>
<p>你可能除了知道最后面那一项是文件名之外，其它项就不太清楚了，那么到底是什么意思呢：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-9.png"></p>
<p>可能你还是不太明白，比如第一项文件类型和权限那一堆东西具体指什么，链接又是什么，何为最后修改时间，下面一一道来：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-10.png"></p>
<ul>
<li>  文件类型</li>
</ul>
<blockquote>
<p>关于文件类型，这里有一点你必需时刻牢记 <strong>Linux 里面一切皆文件</strong>，正因为这一点才有了设备文件（ <code>/dev</code> 目录下有各种设备文件，大都跟具体的硬件设备相关）这一说。 <code>socket</code>：网络套接字，具体是什么，感兴趣的用户可以自己去了解或期待实验楼的后续相关课程。<code>pipe</code> 管道，这个东西很重要，我们以后将会讨论到，这里你先知道有它的存在即可。<code>软链接文件</code>：链接文件是分为两种的，另一种当然是“硬链接”（硬链接不常用，具体内容不作为本课程讨论重点，而软链接等同于 Windows 上的快捷方式,你记住这一点就够了）。</p>
</blockquote>
<ul>
<li>  文件权限</li>
</ul>
<blockquote>
<p>读权限，表示你可以使用 <code>cat &lt;file name&gt;</code> 之类的命令来读取某个文件的内容；写权限，表示你可以编辑和修改某个文件； 执行权限，通常指可以运行的二进制程序文件或者脚本文件，如同 Windows 上的 <code>exe</code> 后缀的文件，不过 Linux 上不是通过文件后缀名来区分文件的类型。你需要注意的一点是，<strong>一个目录同时具有读权限和执行权限才可以打开并查看内部文件，而一个目录要有写权限才允许在其中创建其它文件</strong>，这是因为目录文件实际保存着该目录里面的文件的列表等信息。</p>
</blockquote>
<p>所有者权限，这一点相信你应该明白了，至于所属用户组权限，是指你所在的用户组中的所有其它用户对于该文件的权限，比如，你有一个 iPad，那么这个用户组权限就决定了你的兄弟姐妹有没有权限使用它破坏它和占有它。</p>
<ul>
<li>  链接数</li>
</ul>
<blockquote>
<p>链接到该文件所在的 inode 结点的文件名数目（关于这个概念涉及到 Linux 文件系统的相关概念知识，不在本课程的讨论范围，感兴趣的用户可以自己去了解）。</p>
</blockquote>
<ul>
<li>  文件大小</li>
</ul>
<blockquote>
<p>以 inode 结点大小为单位来表示的文件大小，你可以给 ls 加上 <code>-lh</code> 参数来更直观的查看文件的大小。</p>
</blockquote>
<p>明白了文件权限的一些概念，我们顺带补充一下关于 <code>ls</code> 命令的一些其它常用的用法：</p>
<ul>
<li>  显示除了 <code>.</code>（当前目录）和 <code>..</code>（上一级目录）之外的所有文件，包括隐藏文件（Linux 下以 <code>.</code> 开头的文件为隐藏文件）。</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-A</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-11.png"></p>
<p>当然，你可以同时使用 <code>-A</code> 和 <code>-l</code> 参数：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-Al</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看某一个目录的完整属性，而不是显示目录里面的文件属性：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-dl</span> &lt;目录名&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>  显示所有文件大小，并以普通人类能看懂的方式呈现：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-AsSh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中小 s 为显示文件大小，大 S 为按文件大小排序，若需要知道如何按其它方式排序，请使用“man”命令查询。</p>
<h3 id="变更文件所有者"><a href="#变更文件所有者" class="headerlink" title="变更文件所有者"></a>变更文件所有者</h3><blockquote>
<p>若前面已经执行删除lilei用户的命令，这里重新创建一下。</p>
</blockquote>
<p>假设目前是 lilei 用户登录，新建一个文件，命名为 “ iphone6 ”：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意当前的用户必须是 lilei</span></span><br><span class="line"><span class="comment"># 如果是 shiyanlou 用户需要切换到 lilei（如果之前已经删除需要重新创建下）</span></span><br><span class="line"><span class="variable">$</span> su lilei</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> /home/lilei</span><br><span class="line"><span class="variable">$</span> touch iphone6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可见文件所有者是 lilei ：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-12.png"></p>
<p>现在，换回到 shiyanlou 用户身份，使用以下命令变更文件所有者为 shiyanlou ：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要切换到 shiyanlou 用户执行以下操作</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> /home/lilei</span><br><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> iphone6</span><br><span class="line"><span class="variable">$</span> sudo chown shiyanlou iphone6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在查看，发现 文件所有者成功修改为 shiyanlou ：<br><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-13.png"></p>
<h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><p>如果你有一个自己的文件不想被其他用户读、写、执行，那么就需要对文件的权限做修改，这里有两种方式：</p>
<ul>
<li>  方式一：二进制数字表示</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-14.png"></p>
<p>每个文件的三组权限（拥有者，所属用户组，其他用户，<strong>记住这个顺序是一定的</strong>）对应一个 “ rwx “，也就是一个 “ 7 ” ，所以如果我要将文件“ iphone6 ”的权限改为只有我自己可以用那么就这样：</p>
<p>为了演示，我先在文件里加点内容：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$ echo <span class="string">&quot;echo <span class="subst">\&quot;</span>hello shiyanlou<span class="subst">\&quot;</span>&quot;</span> &gt; iphone6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后修改权限：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod <span class="number">600</span> iphone6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在，其他用户已经不能读这个“ iphone6 ”文件了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-15.png"></p>
<ul>
<li>  方式二：加减赋值操作</li>
</ul>
<p>完成上述相同的效果，你可以：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod go-rw iphone6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/34-16.png"></p>
<p><code>g</code>、<code>o</code> 还有 <code>u</code> 分别表示 group、others 和 user，<code>+</code> 和 <code>-</code> 分别表示增加和去掉相应的权限。</p>
<h3 id="adduser-和-useradd-的区别是什么？"><a href="#adduser-和-useradd-的区别是什么？" class="headerlink" title="adduser 和 useradd 的区别是什么？"></a><code>adduser</code> 和 <code>useradd</code> 的区别是什么？</h3><p>答：useradd 只创建用户，创建完了用 passwd lilei 去设置新用户的密码。adduser 会创建用户，创建目录，创建密码（提示你设置），做这一系列的操作。其实 useradd、userdel 这类操作更像是一种命令，执行完了就返回。而 adduser 更像是一种程序，需要你输入、确定等一系列操作。</p>
<p>Linux 还有一些关于隐藏权限和特殊权限的内容，想全面了解 Linux 权限管理这部分内容的用户可以通过其它方式学习。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>TopK问题多解法</title>
    <url>/posts/41d979e5/</url>
    <content><![CDATA[<blockquote>
<p>为啥 TopK 这么受欢迎呢？究其原因，还是因为它不仅在AI领域广泛应用，比如 max pooling，mAP 计算等；还涵盖了算法专业的很多必备知识，比如快速排序，二分查找，分治减治，大小顶堆等；一些适当的变换，还可以考察应聘者的思维灵活度。</p>
</blockquote>
<span id="more"></span>

<p>参考博客：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/76734219">https://zhuanlan.zhihu.com/p/76734219</a></li>
<li><a href="https://blog.csdn.net/z50L2O08e2u4afToR9A/article/details/82837278">https://blog.csdn.net/z50L2O08e2u4afToR9A/article/details/82837278</a></li>
</ul>
<blockquote>
<p><strong>问题描述：</strong><br>从 arr[1, n] 这 n 个数中，找出最大的k个数，这就是经典的TopK问题。<br><strong>例</strong>：<br>从 arr[1, 12]={5,3,7,1,8,2,9,4,7,2,6,6}  这 n=12 个数中，找出最大的 k=5 个。</p>
</blockquote>
<br/>

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410205904.png"></p>
<p>排序是最容易想到的方法，<font color="red">将n个数排序之后，取出最大的k个，即为所得。</font></p>
<p><strong>伪代码</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(arr, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr[<span class="number">1</span>, k];</span><br></pre></td></tr></table></figure>

<p><strong>时间复杂度：</strong>O(n*log(n))</p>
<p><strong>分析</strong>：</p>
<p>明明只需要 TopK ，却将全局都排序了，这也是这个方法复杂度非常高的原因。那能不能不全局排序，而只局部排序呢？这就引出了第二个优化方法。</p>
<br/>

<br/>

<h1 id="局部排序"><a href="#局部排序" class="headerlink" title="局部排序"></a>局部排序</h1><p>不再全局排序，只对最大的k个排序。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410205916.png"></p>
<p>冒泡是一个很常见的排序方法，<font color="red">每冒一个泡，找出最大值，冒 k 个泡，就得到 TopK 。</font></p>
<p><strong>伪代码</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span> to k)&#123;</span><br><span class="line">         <span class="built_in">bubble_find_max</span>(arr,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[<span class="number">1</span>, k];</span><br></pre></td></tr></table></figure>

<p><strong>时间复杂度</strong>：<code>O(n*k)</code></p>
<p><strong>分析</strong>：</p>
<p>冒泡，将全局排序优化为了局部排序，非 TopK 的元素是不需要排序的，节省了计算资源。不少朋友会想到，需求是 TopK ，是不是这最大的k个元素也不需要排序呢？这就引出了第三个优化方法。</p>
<br/>

<br/>

<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p><strong>思路：</strong>只找到 TopK , 不排序 TopK</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410205935.png"></p>
<p>先用前k个元素生成一个小顶堆，<font color="red">这个小顶堆用于存储，当前最大的k个元素。</font></p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410205949.png"></p>
<p>接着，从第k+1个元素开始扫描，和堆顶（堆中最小的元素）比较，<font color="red">如果被扫描的元素大于堆顶，则替换堆顶的元素</font>，并调整堆，以保证堆内的k个元素，总是当前最大的k个元素。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410210005.png"></p>
<p>直到，扫描完所有n-k个元素，最终堆中的k个元素，就是猥琐求的TopK。</p>
<br />

<p><strong>伪代码</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">heap[k] = make_heap(arr[1, k]);</span><br><span class="line"></span><br><span class="line">for(i=k+1 to n)&#123;</span><br><span class="line"></span><br><span class="line">         adjust_heap(heep[k],arr[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return heap[k];</span><br></pre></td></tr></table></figure>
<p><strong>时间复杂度：</strong>O(n*lg(k))</p>
<blockquote>
<p><em>画外音：n个元素扫一遍，假设运气很差，每次都入堆调整，调整时间复杂度为堆的高度，即lg(k)，故整体时间复杂度是n\</em>lg(k)。*</p>
</blockquote>
<p><strong>分析</strong>：堆，将冒泡的TopK排序优化为了TopK不排序，节省了计算资源。堆，是求TopK的经典算法，那还有没有更快的方案呢？</p>
<p><br/><br/></p>
<h1 id="随机选择"><a href="#随机选择" class="headerlink" title="随机选择"></a>随机选择</h1><blockquote>
<p>随机选择算在是《算法导论》中一个经典的算法，其时间复杂度为O(n)，是一个线性复杂度的方法。</p>
</blockquote>
<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ul>
<li>快速排序</li>
<li>分治法</li>
<li>减治法</li>
</ul>
<figure class="highlight c++"><figcaption><span>快速排序伪代码</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span>[]arr, <span class="keyword">int</span> low, inthigh)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(low== high) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">int</span> i = <span class="built_in">partition</span>(arr, low, high);</span><br><span class="line"></span><br><span class="line">         <span class="built_in">quick_sort</span>(arr, low, i<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">         <span class="built_in">quick_sort</span>(arr, i+<span class="number">1</span>, high);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>快速排序核心思想是分治法，i = partition(arr, low, high);</p>
<br/>

<p><strong>分治法(Divide&amp;Conquer)**：把一个大的问题，转化为若干个子问题（Divide），<font color="red">每个子问题“都”解决，大的问题便随之解决（Conquer）。</font>这里的关键词是</strong>“都”**。从伪代码里可以看到，快速排序递归时，先通过partition把数组分隔为两个部分，两个部分“都”要再次递归。<br><br></p>
<p>分治法有一个特例，叫减治法。<br><br></p>
<p><strong>减治法(Reduce&amp;Conquer)**，把一个大的问题，转化为若干个子问题（Reduce），<font color="red">这些子问题中“只”解决一个，大的问题便随之解决（Conquer）。</font>这里的关键词是</strong>“只”**。</p>
<blockquote>
<p>二分查找就是使用减治法，一个大的问题，可以用一个mid元素，分成左半区，右半区两个子问题。而左右两个子问题，只需要解决其中一个，递归一次，就能够解决二分查找全局的问题。</p>
</blockquote>
<p>通过分治法与减治法的描述，可以发现，<font color="red">分治法的复杂度一般来说是大于减治法的</font>：</p>
<p>快速排序：O(n*lg(n))</p>
<p>二分查找：O(lg(n))</p>
<h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><p>话题收回来，快速排序的核心是：</p>
<p>i = partition(arr, low, high);</p>
<br>
这个partition是干嘛的呢？

<p>顾名思义，partition会把整体分为两个部分。</p>
<p>更具体的，会用数组arr中的一个元素（默认是第一个元素t=arr[low]）为划分依据，将数据arr[low, high]划分成左右两个子数组：</p>
<ul>
<li><p>左半部分，都比t大</p>
</li>
<li><p>右半部分，都比t小</p>
</li>
<li><p>中间位置i是划分元素</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410210032.png"></p>
<p>以上述TopK的数组为例，先用第一个元素t=arr[low]为划分依据，扫描一遍数组，把数组分成了两个半区：</p>
<ul>
<li><p>左半区比t大</p>
</li>
<li><p>右半区比t小</p>
</li>
<li><p>中间是t</p>
</li>
</ul>
<p>partition返回的是t最终的位置i。</p>
<h2 id="随机选择-1"><a href="#随机选择-1" class="headerlink" title="随机选择"></a>随机选择</h2><ul>
<li>partition和TopK问题有什么关系呢？</li>
</ul>
<p>TopK是希望求出arr[1,n]中最大的k个数，那如果找到了<font color="red">第k大的数</font>，做一次partition，不就一次性找到最大的k个数了么？</p>
<font size=4px>
<br>
问题变成了arr[1, n]中找到第k大的数。
<br>

<p>再回过头来看看第一次partition，划分之后：</p>
<p>i = partition(arr, 1, n);</p>
<ul>
<li><p>如果i大于k，则说明arr[i]左边的元素都大于k，于是只递归arr[1, i-1]里第k大的元素即可；</p>
</li>
<li><p>如果i小于k，则说明说明第k大的元素在arr[i]的右边，于是只递归arr[i+1, n]里第k-i大的元素即可；</p>
</font>

</li>
</ul>
<figure class="highlight c++"><figcaption><span>随机选择算法伪代码</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RS</span><span class="params">(arr, low, high, k)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(low== high) <span class="keyword">return</span> arr[low];</span><br><span class="line">  i= <span class="built_in">partition</span>(arr, low, high);</span><br><span class="line">  temp= i-low; <span class="comment">//数组前半部分元素个数</span></span><br><span class="line">  <span class="keyword">if</span>(temp&gt;=k)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">RS</span>(arr, low, i<span class="number">-1</span>, k); <span class="comment">//求前半部分第k大</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">RS</span>(arr, i+<span class="number">1</span>, high, k-i); <span class="comment">//求后半部分第k-i大</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410210052.png"></p>
<p>这是一个典型的减治算法，递归内的两个分支，最终只会执行一个，它的时间复杂度是O(n)。</p>
<br>
再次强调一下：

<ul>
<li><strong>分治法</strong>: 大问题分解为小问题，小问题都要递归各个分支，例如：快速排序</li>
<li><strong>减治法</strong>: 大问题分解为小问题，小问题只要递归一个分支，例如：二分查找，随机选择</li>
</ul>
<p>通过随机选择（randomized_select），找到arr[1, n]中第k大的数，再进行一次partition，就能得到TopK的结果。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>TopK，不难；其思路优化过程，不简单：</p>
<ul>
<li><p><strong>全局排序</strong>，O(n*lg(n))</p>
</li>
<li><p><strong>局部排序</strong>，只排序TopK个数，O(n*k)</p>
</li>
<li><p><strong>堆</strong>，TopK个数也不排序了，O(n*lg(k))</p>
</li>
<li><p><strong>分治法</strong>，每个分支“都要”递归，例如：快速排序，O(n*lg(n))</p>
</li>
<li><p><strong>减治法</strong>，“只要”递归一个分支，例如：二分查找O(lg(n))，随机选择O(n)</p>
</li>
<li><p>TopK的另一个解法：<strong>随机选择</strong>+partition</p>
</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>topk</tag>
      </tags>
  </entry>
  <entry>
    <title>linux学习02 - 基本概念和操作</title>
    <url>/posts/fcb10b52/</url>
    <content><![CDATA[<blockquote>
<p>linux学习02：linux基本概念和操作<br>内容转载自实验楼：<a href="https://www.shiyanlou.com/courses/1/">https://www.shiyanlou.com/courses/1/</a></p>
</blockquote>
<span id="more"></span>


<p>3.2 命令行操作体验</p>
<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><code>写在前面</code></h4><p>在linux中，最最重要的就是命令，这就包含了2个过程，输入和输出</p>
<ul>
<li>  输入：输入当然就是打开终端，然后按键盘输入，然后按回车，输入格式一般就是这类的</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建一个名为 file 的文件，touch是一个命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch file</span> </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入一个目录，<span class="built_in">cd</span>是一个命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看当前所在目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>  输出：输出会返回你想要的结果，比如你要看什么文件，就会返回文件的内容。如果只是执行，执行失败会告诉你哪里错了，如果执行成功那么会没有输出，因为linux的哲学就是：没有结果就是最好的结果</li>
</ul>
<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>如图，双击桌面上的 <code>Xfce 终端</code> 图标打开终端后系统会自动运行 Shell 程序，然后我们就可以输入命令让系统来执行了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/33-1.gif"></p>
<h4 id="1-重要快捷键："><a href="#1-重要快捷键：" class="headerlink" title="1) 重要快捷键："></a>1) 重要快捷键：</h4><p>真正学习命令行之前，你先要掌握几个十分有用、必需掌握的小技巧：</p>
<h5 id="Tab"><a href="#Tab" class="headerlink" title="[Tab]"></a>[Tab]</h5><p>使用<code>Tab</code>键来进行命令补全，<code>Tab</code>键一般是在字母<code>Q</code>旁边，这个技巧给你带来的最大的好处就是当你忘记某个命令的全称时可以只输入它的开头的一部分，然后按下<code>Tab</code>键就可以得到提示或者帮助完成：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/33-2.gif"></p>
<p>当然不止补全命令，补全目录、补全命令参数都是没问题的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/33-3.gif"></p>
<h5 id="Ctrl-c"><a href="#Ctrl-c" class="headerlink" title="[Ctrl+c]"></a>[Ctrl+c]</h5><p>想想你有没有遇到过这种情况，当你在 Linux 命令行中无意输入了一个不知道的命令，或者错误地使用了一个命令，导致在终端里出现了你无法预料的情况，比如，屏幕上只有光标在闪烁却无法继续输入命令，或者不停地输出一大堆你不想要的结果。你想要立即停止并恢复到你可控的状态，那该怎么办呢？这时候你就可以使用<code>Ctrl+c</code>键来强行终止当前程序（你可以放心它并不会使终端退出）。</p>
<p>尝试输入以下命令：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>tail</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后你会发现你接下来的输入都没有任何反应了，只是将你输入的东西显示出来，现在你可以使用<code>Ctrl+c</code>，来中断这个你目前可能还不知道是什么的程序（在后续课程中我们会具体解释这个<code>tail</code>命令是什么）。</p>
<p>又或者输入：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="builtin-name">find</span> /</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/33-4.gif"></p>
<p>显然这不是你想的结果，可以使用<code>Ctrl+c</code>结束。</p>
<p>虽然这个按着很方便，但不要随便按，因为有时候，当你看到终端没有任何反应或提示，也不能接受你的输入时，可能只是运行的程序需要你耐心等一下，就不要急着按<code>Ctrl+c</code>了。</p>
<h5 id="其他一些常用快捷键"><a href="#其他一些常用快捷键" class="headerlink" title="其他一些常用快捷键"></a>其他一些常用快捷键</h5><table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl+d</code></td>
<td>键盘输入结束或退出终端</td>
</tr>
<tr>
<td><code>Ctrl+s</code></td>
<td>暂停当前程序，暂停后按下任意键恢复运行</td>
</tr>
<tr>
<td><code>Ctrl+z</code></td>
<td>将当前程序放到后台运行，恢复到前台为命令<code>fg</code></td>
</tr>
<tr>
<td><code>Ctrl+a</code></td>
<td>将光标移至输入行头，相当于<code>Home</code>键</td>
</tr>
<tr>
<td><code>Ctrl+e</code></td>
<td>将光标移至输入行末，相当于<code>End</code>键</td>
</tr>
<tr>
<td><code>Ctrl+k</code></td>
<td>删除从光标所在位置到行末</td>
</tr>
<tr>
<td><code>Alt+Backspace</code></td>
<td>向前删除一个单词</td>
</tr>
<tr>
<td><code>Shift+PgUp</code></td>
<td>将终端显示向上滚动</td>
</tr>
<tr>
<td><code>Shift+PgDn</code></td>
<td>将终端显示向下滚动</td>
</tr>
</tbody></table>
<h4 id="2-学会利用历史输入命令"><a href="#2-学会利用历史输入命令" class="headerlink" title="2) 学会利用历史输入命令"></a>2) 学会利用历史输入命令</h4><p>很简单，你可以使用键盘上的方向上键<code>↑</code>，恢复你之前输入过的命令，你一试便知。</p>
<h4 id="3-学会使用通配符"><a href="#3-学会使用通配符" class="headerlink" title="3) 学会使用通配符"></a>3) 学会使用通配符</h4><p>通配符是一种特殊语句，主要有星号（*）和问号（?），用来对字符串进行模糊匹配（比如文件名、参数名）。当查找文件夹时，可以使用它来代替一个或多个真正字符；当不知道真正字符或者懒得输入完整名字时，常常使用通配符代替一个或多个真正字符。</p>
<p>终端里面输入的通配符是由 Shell 处理的，不是由所涉及的命令语句处理的，它只会出现在命令的“参数值”里（它不能出现在命令名称里， 命令不记得，那就用<code>Tab</code>补全）。当 Shell 在“参数值”中遇到了通配符时，Shell 会将其当作路径或文件名在磁盘上搜寻可能的匹配：若符合要求的匹配存在，则进行代换（路径扩展）；否则就将该通配符作为一个普通字符传递给“命令”，然后再由命令进行处理。总之，通配符实际上就是一种 Shell 实现的路径扩展功能。在通配符被处理后， Shell 会先完成该命令的重组，然后继续处理重组后的命令，直至执行该命令。</p>
<p>首先回到用户家目录：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ cd <span class="regexp">/home/</span>shiyanlou</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后使用 touch 命令创建 2 个文件，后缀都为 txt：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ touch asd<span class="selector-class">.txt</span> fgh<span class="selector-class">.txt</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>可以给文件随意命名，假如过了很长时间，你已经忘了这两个文件的文件名，现在你想在一大堆文件中找到这两个文件，就可以使用通配符：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">ls</span> *<span class="string">.txt</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/33-5.gif"></p>
<p>在创建文件的时候，如果需要一次性创建多个文件，比如：<strong>“love_1_linux.txt，love_2_linux.txt，… love_10_linux.txt”</strong>。在 Linux 中十分方便：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$ touch love_&#123;<span class="number">1.</span>.<span class="number">10</span>&#125;<span class="module-access"><span class="module"><span class="identifier">_shiyanlou</span>.</span></span>txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/33-6.gif"></p>
<p>Shell 常用通配符：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>*</code></td>
<td>匹配 0 或多个字符</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配任意一个字符</td>
</tr>
<tr>
<td><code>[list]</code></td>
<td>匹配 list 中的任意单一字符</td>
</tr>
<tr>
<td><code>[^list]</code></td>
<td>匹配 除list 中的任意单一字符以外的字符</td>
</tr>
<tr>
<td><code>[c1-c2]</code></td>
<td>匹配 c1-c2 中的任意单一字符 如：[0-9] [a-z]</td>
</tr>
<tr>
<td><code>&#123;string1,string2,...&#125;</code></td>
<td>匹配 string1 或 string2 (或更多)其一字符串</td>
</tr>
<tr>
<td><code>&#123;c1..c2&#125;</code></td>
<td>匹配 c1-c2 中全部字符 如{1..10}</td>
</tr>
</tbody></table>
<h4 id="4-学会在命令行中获取帮助"><a href="#4-学会在命令行中获取帮助" class="headerlink" title="4) 学会在命令行中获取帮助"></a>4) 学会在命令行中获取帮助</h4><p>在 Linux 环境中，如果你遇到困难，可以使用<code>man</code>命令，它是<code>Manual pages</code>的缩写。</p>
<p>Manual pages 是 UNIX 或类 UNIX 操作系统中在线软件文档的一种普遍的形式， 内容包括计算机程序（包括库和系统调用）、正式的标准和惯例，甚至是抽象的概念。用户可以通过执行<code>man</code>命令调用手册页。</p>
<p>你可以使用如下方式来获得某个命令的说明和使用方式的详细介绍：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">man</span> &lt;command_name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>比如你想查看 man 命令本身的使用方式，你可以输入：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line"><span class="keyword">man</span> <span class="keyword">man</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通常情况下，man 手册里面的内容都是英文的，这就要求你有一定的英文基础。man 手册的内容很多，涉及了 Linux 使用过程中的方方面面。为了便于查找，man 手册被进行了分册（分区段）处理，在 Research UNIX、BSD、OS X 和 Linux 中，手册通常被分为8个区段，安排如下：</p>
<table>
<thead>
<tr>
<th>区段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>一般命令</td>
</tr>
<tr>
<td>2</td>
<td>系统调用</td>
</tr>
<tr>
<td>3</td>
<td>库函数，涵盖了C标准函数库</td>
</tr>
<tr>
<td>4</td>
<td>特殊文件（通常是/dev中的设备）和驱动程序</td>
</tr>
<tr>
<td>5</td>
<td>文件格式和约定</td>
</tr>
<tr>
<td>6</td>
<td>游戏和屏保</td>
</tr>
<tr>
<td>7</td>
<td>杂项</td>
</tr>
<tr>
<td>8</td>
<td>系统管理命令和守护进程</td>
</tr>
</tbody></table>
<p>要查看相应区段的内容，就在 man 后面加上相应区段的数字即可，如：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">man</span> <span class="number">1</span> <span class="built_in">ls</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>会显示第一区段中的<code>ls</code>命令 man 页面。</p>
<p>所有的手册页遵循一个常见的布局，为了通过简单的 ASCII 文本展示而被优化，而这种情况下可能没有任何形式的高亮或字体控制。一般包括以下部分内容：</p>
<p><strong>NAME（名称）</strong></p>
<blockquote>
<p>该命令或函数的名称，接着是一行简介。</p>
</blockquote>
<p><strong>SYNOPSIS（概要）</strong></p>
<blockquote>
<p>对于命令，正式的描述它如何运行，以及需要什么样的命令行参数。对于函数，介绍函数所需的参数，以及哪个头文件包含该函数的定义。</p>
</blockquote>
<p><strong>DESCRIPTION（说明）</strong></p>
<blockquote>
<p>命令或函数功能的文本描述。</p>
</blockquote>
<p><strong>EXAMPLES（示例）</strong></p>
<blockquote>
<p>常用的一些示例。</p>
</blockquote>
<p><strong>SEE ALSO（参见）</strong></p>
<blockquote>
<p>相关命令或函数的列表。</p>
</blockquote>
<p>也可能存在其它部分内容，但这些部分没有得到跨手册页的标准化。常见的例子包括：OPTIONS（选项），EXIT STATUS（退出状态），ENVIRONMENT（环境），BUGS（程序漏洞），FILES（文件），AUTHOR（作者），REPORTING BUGS（已知漏洞），HISTORY（历史）和 COPYRIGHT（版权）。</p>
<p>通常 man 手册中的内容很多，你可能不太容易找到你想要的结果，不过幸运的是你可以在 man 中使用搜索<code>/&lt;你要搜索的关键字&gt;</code>，查找完毕后你可以使用<code>n</code>键切换到下一个关键字所在处，<code>shift+n</code>为上一个关键字所在处。使用<code>Space</code>（空格键）翻页，<code>Enter</code>（回车键）向下滚动一行，或者使用<code>k</code>,<code>j</code>（vim 编辑器的移动键）进行向前向后滚动一行。按下<code>h</code>键为显示使用帮助（因为 man 使用 less 作为阅读器，实为<code>less</code>工具的帮助），按下<code>q</code>退出。</p>
<p>想要获得更详细的帮助，你还可以使用<code>info</code>命令，不过通常使用<code>man</code>就足够了。如果你知道某个命令的作用，只是想快速查看一些它的某个具体参数的作用，那么你可以使用<code>--help</code>参数，大部分命令都会带有这个参数，如：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">ls</span> <span class="params">--help</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux学习04 - linux目录结构及文件基本操作</title>
    <url>/posts/caf6d338/</url>
    <content><![CDATA[<blockquote>
<p>linux学习04：linux目录结构及文件基本操作<br>内容转载自实验楼：<a href="https://www.shiyanlou.com/courses/1/">https://www.shiyanlou.com/courses/1/</a></p>
<span id="more"></span>
</blockquote>
<h2 id="目录路径"><a href="#目录路径" class="headerlink" title="目录路径"></a>目录路径</h2><p>在讲 Linux 目录结构之前，你首先要清楚一点，那就是 Linux 的目录与 Windows 的目录的区别，或许对于一般操作上的感受来说没有多大不同，但从它们的实现机制来说是完全不同的。</p>
<p>一种不同是体现在目录与存储介质（磁盘，内存，DVD 等）的关系上，以往的 Windows 一直是以存储介质为主的，主要以盘符（C 盘，D 盘…）及分区来实现文件管理，然后之下才是目录，目录就显得不是那么重要，除系统文件之外的用户文件放在任何地方任何目录也是没有多大关系。所以通常 Windows 在使用一段时间后，磁盘上面的文件目录会显得杂乱无章（少数善于整理的用户除外吧）。然而 UNIX/Linux 恰好相反，UNIX 是以目录为主的，Linux 也继承了这一优良特性。 Linux 是以树形目录结构的形式来构建整个系统的，可以理解为树形目录是一个用户可操作系统的骨架。虽然本质上无论是目录结构还是操作系统内核都是存储在磁盘上的，但从逻辑上来说 Linux 的磁盘是“挂在”（挂载在）目录上的，每一个目录不仅能使用本地磁盘分区的文件系统，也可以使用网络上的文件系统。举例来说，可以利用网络文件系统（Network File System，NFS）服务器载入某特定目录等。</p>
<h3 id="FHS标准"><a href="#FHS标准" class="headerlink" title="FHS标准"></a>FHS标准</h3><p>Linux 的目录结构说复杂很复杂，说简单也很简单。复杂在于，因为系统的正常运行是以目录结构为基础的，对于初学者来说里面大部分目录都不知道其作用，重要与否，特别对于那些曾经的重度 Windows 用户，他们会纠结很长时间，关于我安装的软件在哪里这类问题。说它简单是因为，其中大部分目录结构是规定好了的（FHS 标准），是死的，当你掌握后，你在里面的一切操作都会变得井然有序。</p>
<blockquote>
<p>FHS（英文：Filesystem Hierarchy Standard 中文：文件系统层次结构标准），多数 Linux 版本采用这种文件组织形式，FHS 定义了系统中每个区域的用途、所需要的最小构成的文件和目录同时还给出了例外处理与矛盾处理。</p>
</blockquote>
<p>FHS 定义了两层规范，第一层是， <code>/</code> 下面的各个目录应该要放什么文件数据，例如 <code>/etc</code> 应该放置设置文件，<code>/bin</code> 与 <code>/sbin</code> 则应该放置可执行文件等等。</p>
<p>第二层则是针对 <code>/usr</code> 及 <code>/var</code> 这两个目录的子目录来定义。例如 <code>/var/log</code> 放置系统日志文件，<code>/usr/share</code> 放置共享数据等等。</p>
<p><a href="http://refspecs.linuxfoundation.org/FHS_2.3/fhs-2.3.pdf">FHS_2.3 标准文档</a></p>
<p><strong>如果觉得图片不清晰，建议另存为到本地放大查看：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410211015.png"></p>
<p>如果你觉得看这个不明白，那么可以试试最真实最直观的方式，执行如下命令：</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">tree</span> /</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果提示” command not found “，就先安装：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install tree</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关于上面提到的 FHS，这里还有个很重要的内容你一定要明白，FHS 是根据以往无数 Linux 用户和开发者的经验总结出来的，并且会维持更新，FHS 依据文件系统使用的频繁与否以及是否允许用户随意改动（注意，不是不能，学习过程中，不要怕这些），将目录定义为四种交互作用的形态，如下表所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410211034.png"></p>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>有人可能不明白这路径是指什么，有什么用。顾名思义，路径就是你要去哪儿的路线嘛。如果你想进入某个具体的目录或者想获得某个目录的文件（目录本身也是文件）那就得用路径来找到了。</p>
<p>使用 <code>cd</code> 命令可以切换目录，在 Linux 里面使用 <code>.</code> 表示当前目录，<code>..</code> 表示上一级目录（<strong>注意，我们上一节介绍过的，以 <code>.</code> 开头的文件都是隐藏文件，所以这两个目录必然也是隐藏的，你可以使用 <code>ls -a</code> 命令查看隐藏文件</strong>）, <code>-</code> 表示上一次所在目录，<code>～</code> 通常表示当前用户的 <code>home</code> 目录。使用 <code>pwd</code> 命令可以获取当前所在路径（绝对路径）。</p>
<p>进入上一级目录：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>进入你的 <code>home</code> 目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者 <span class="built_in">cd</span> /home/&lt;你的用户名&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 <code>pwd</code> 获取当前路径：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">pwd</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410211044.png"></p>
<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>关于绝对路径，简单地说就是以根” / “目录为起点的完整路径，以你所要到的目录为终点，表现形式如： <code>/usr/local/bin</code>，表示根目录下的 <code>usr</code> 目录中的 <code>local</code> 目录中的 <code>bin</code> 目录。</p>
<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>相对路径，也就是相对于你当前的目录的路径，相对路径是以当前目录 <code>.</code> 为起点，以你所要到的目录为终点，表现形式如： <code>usr/local/bin</code> （这里假设你当前目录为根目录）。你可能注意到，我们表示相对路径实际并没有加上表示当前目录的那个 <code>.</code> ，而是直接以目录名开头，因为这个 <code>usr</code> 目录为 <code>/</code> 目录下的子目录，是可以省略这个 <code>.</code> 的（以后会讲到一个类似不能省略的情况）；如果是当前目录的上一级目录，则需要使用 <code>..</code> ，比如你当前目录为 <code>/home/shiyanlou</code> 目录下，根目录就应该表示为 <code>../../</code> ，表示上一级目录（ <code>home</code> 目录）的上一级目录（ <code>/</code> 目录）。</p>
<p>下面我们以你的 <code>home</code>目录为起点，分别以绝对路径和相对路径的方式进入 <code>/usr/local/bin</code> 目录：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绝对路径</span></span><br><span class="line">$ cd <span class="regexp">/usr/</span>local/bin</span><br><span class="line"><span class="comment"># 相对路径</span></span><br><span class="line">$ cd ..<span class="regexp">/../u</span>sr<span class="regexp">/local/</span>bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410211124.png"></p>
<p>进入一个目录，可以使用绝对路径也可以使用相对路径，那我们应该在什么时候选择正确的方式进入某个目录呢。就是凭直觉嘛，你觉得怎样方便就使用哪一个，而不用特意只使用某一种。比如假设我当前在 <code>/usr/local/bin</code> 目录，我想进入上一级的 local 目录你说是使用 <code>cd ..</code> 方便还是 <code>cd /usr/local</code> 方便？而如果要进入的是 <code>usr</code> 目录，那么 <code>cd /usr</code> ，就比 <code>cd ../..</code> 方便一点了。</p>
<p><strong>提示：在进行目录切换的过程中请多使用 <code>Tab</code> 键自动补全，可避免输入错误，连续按两次 <code>Tab</code> 可以显示全部候选结果。</strong></p>
<h2 id="linux文件基本操作"><a href="#linux文件基本操作" class="headerlink" title="linux文件基本操作"></a>linux文件基本操作</h2><h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><h4 id="新建空白文件"><a href="#新建空白文件" class="headerlink" title="新建空白文件"></a>新建空白文件</h4><p>使用 <code>touch</code> 命令创建空白文件，关于 <code>touch</code> 命令，其主要作用是来更改已有文件的时间戳的（比如，最近访问时间，最近修改时间），但其在不加任何参数的情况下，只指定一个文件名，则可以创建一个指定文件名的空白文件（不会覆盖已有同名文件），当然你也可以同时指定该文件的时间戳，更多关于 <code>touch</code> 命令的用法，会在下一讲文件搜索中涉及。</p>
<p>创建名为 test 的空白文件，因为在其它目录没有权限，所以需要先 <code>cd ~</code> 切换回用户的 <code>/home/shiyanlou</code> 目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/shiyanlou</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch <span class="built_in">test</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h4><p>使用 <code>mkdir</code>（make directories）命令可以创建一个空目录，也可同时指定创建目录的权限属性。</p>
<p>创建名为“ mydir ”的空目录：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">$ mkdir mydir</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 <code>-p</code> 参数，同时创建父目录（如果不存在该父目录），如下我们同时创建一个多级目录（这在安装软件、配置安装路径时非常有用）：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ mkdir -p father<span class="regexp">/son/g</span>randson</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410211143.png"></p>
<p>后面的目录路径，以绝对路径的方式表示也是可以的。</p>
<h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p>使用 <code>cp</code>（copy）命令复制一个文件到指定目录。</p>
<p>将之前创建的“ test ”文件复制到“ /home/shiyanlou/father/son/grandson ”目录中：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ cp test father<span class="regexp">/son/g</span>randson</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>是不是很方便啊，如果在图形界面则需要先在源目录复制文件，再进到目的目录粘贴文件，而命令行操作步骤就一步到位了嘛。</p>
<h4 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h4><p>如果直接使用 <code>cp</code> 命令复制一个目录的话，会出现如下错误：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410211244.png"></p>
<p>要成功复制目录需要加上 <code>-r</code> 或者 <code>-R</code> 参数，表示递归复制，就是说有点“株连九族”的意思：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line"><span class="variable">$</span> mkdir family</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cp</span> <span class="literal">-r</span> father family</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>使用 <code>rm</code>（remove files or directories）命令删除一个文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> test</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有时候你会遇到想要删除一些为只读权限的文件，直接使用 <code>rm</code> 删除会显示一个提示，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410211156.png"></p>
<p>你如果想忽略这提示，直接删除文件，可以使用 <code>-f</code> 参数强制删除：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> <span class="operator">-f</span> test</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><p>跟复制目录一样，要删除一个目录，也需要加上 <code>-r</code> 或 <code>-R</code> 参数：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> <span class="literal">-r</span> family</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="移动文件与重命名"><a href="#移动文件与重命名" class="headerlink" title="移动文件与重命名"></a>移动文件与重命名</h3><h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>使用 <code>mv</code>（move or rename files）命令移动文件（剪切）。将文件“ file1 ”移动到 <code>Documents</code> 目录：</p>
<p><code>mv 源目录文件 目的目录</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> mkdir Documents</span><br><span class="line"><span class="variable">$</span> touch file1</span><br><span class="line"><span class="variable">$</span> <span class="built_in">mv</span> file1 Documents</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410211305.png"></p>
<h4 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h4><p>将文件“ file1 ”重命名为“ myfile ”：</p>
<p><code>mv 旧的文件名 新的文件名</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">mv</span> file1 myfile</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="批量重命名"><a href="#批量重命名" class="headerlink" title="批量重命名"></a>批量重命名</h4><p>要实现批量重命名，<code>mv</code> 命令就有点力不从心了，我们可以使用一个看起来更专业的命令 <code>rename</code> 来实现。不过它要用 perl 正则表达式来作为参数，关于正则表达式我们要在后面才会介绍到，这里只做演示，你只要记得这个 <code>rename</code> 命令可以批量重命名就好了，以后再重新学习也不会有任何问题，毕竟你已经掌握了一个更常用的 <code>mv</code> 命令。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> <span class="string">/home/shiyanlou/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用通配符批量创建 5 个文件:</span></span><br><span class="line">$ touch file&#123;1.<span class="string">.5</span>&#125;<span class="string">.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量将这 5 个后缀为 .txt 的文本文件重命名为以 .c 为后缀的文件:</span></span><br><span class="line">$ rename &#x27;s/\<span class="string">.txt/</span>\<span class="string">.c/</span>&#x27; *<span class="string">.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量将这 5 个文件，文件名和后缀改为大写:</span></span><br><span class="line">$ rename &#x27;y/a-z/A-Z/&#x27; *<span class="string">.c</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>简单解释一下上面的命令，<code>rename</code> 是先使用第二个参数的通配符匹配所有后缀为 <code>.txt</code> 的文件，然后使用第一个参数提供的正则表达式将匹配的这些文件的 <code>.txt</code> 后缀替换为 <code>.c</code>，这一点在我们后面学习了 <code>sed</code> 命令后，相信你会更好地理解。</p>
<h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><h4 id="使用-cat，tac-和-nl-命令查看文件"><a href="#使用-cat，tac-和-nl-命令查看文件" class="headerlink" title="使用 cat，tac 和 nl 命令查看文件"></a>使用 <code>cat</code>，<code>tac</code> 和 <code>nl</code> 命令查看文件</h4><p>前两个命令都是用来打印文件内容到标准输出（终端），其中 <code>cat</code> 为正序显示，<code>tac</code> 为倒序显示。</p>
<blockquote>
<p>标准输入输出：当我们执行一个 shell 命令行时通常会自动打开三个标准文件，即标准输入文件（stdin），默认对应终端的键盘、标准输出文件（stdout）和标准错误输出文件（stderr），后两个文件都对应被重定向到终端的屏幕，以便我们能直接看到输出内容。进程将从标准输入文件中得到输入数据，将正常输出数据输出到标准输出文件，而将错误信息送到标准错误文件中。</p>
</blockquote>
<p>比如我们要查看之前从 <code>/etc</code> 目录下拷贝来的 <code>passwd</code> 文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cp</span> /etc/passwd passwd</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> passwd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以加上 <code>-n</code> 参数显示行号：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> <span class="literal">-n</span> passwd</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410211329.png"></p>
<p><code>nl</code> 命令，添加行号并打印，这是个比 <code>cat -n</code> 更专业的行号打印命令。</p>
<p>这里简单列举它的常用的几个参数：</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby">b : 指定添加行号的方式，主要有两种：</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">b <span class="symbol">a:</span>表示无论是否为空行，同样列出行号(<span class="string">&quot;cat -n&quot;</span>就是这种方式)</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">b <span class="symbol">t:</span>只列出非空行的编号并列出（默认为这种方式）</span></span><br><span class="line"><span class="ruby"></span>-<span class="ruby">n : 设置行号的样式，主要有三种：</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">n <span class="symbol">ln:</span>在行号字段最左端显示</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">n <span class="symbol">rn:</span>在行号字段最右边显示，且不加 <span class="number">0</span></span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">n <span class="symbol">rz:</span>在行号字段最右边显示，且加 <span class="number">0</span></span></span><br><span class="line"><span class="ruby"></span>-<span class="ruby">w : 行号字段占用的位数(默认为 <span class="number">6</span> 位)</span></span><br><span class="line"><span class="ruby"></span></span><br></pre></td></tr></table></figure>

<p><img src="/img/35/35-10.png"><br>你会发现使用这几个命令，默认的终端窗口大小，一屏显示不完文本的内容，得用鼠标拖动滚动条或者滑动滚轮才能继续往下翻页，要是可以直接使用键盘操作翻页就好了，那么你就可以使用下面要介绍的命令。</p>
<h4 id="使用-more-和-less-命令分页查看文件"><a href="#使用-more-和-less-命令分页查看文件" class="headerlink" title="使用 more 和 less 命令分页查看文件"></a>使用 <code>more</code> 和 <code>less</code> 命令分页查看文件</h4><p>如果说上面的 <code>cat</code> 是用来快速查看一个文件的内容的，那么这个 <code>more</code> 和 <code>less</code> 就是天生用来”阅读”一个文件的内容的，比如说 man 手册内部就是使用的 <code>less</code> 来显示内容。其中 <code>more</code> 命令比较简单，只能向一个方向滚动，而 <code>less</code> 为基于 <code>more</code> 和 <code>vi</code> （一个强大的编辑器，我们有单独的课程来让你学习）开发，功能更强大。<code>less</code> 的使用基本和 <code>more</code> 一致，具体使用请查看 man 手册，这里只介绍 <code>more</code> 命令的使用。</p>
<p>使用 <code>more</code> 命令打开 <code>passwd</code> 文件：</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">more</span> passwd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/35/35-11.png"><br>打开后默认只显示一屏内容，终端底部显示当前阅读的进度。可以使用 <code>Enter</code> 键向下滚动一行，使用 <code>Space</code> 键向下滚动一屏，按下 <code>h</code> 显示帮助，<code>q</code> 退出。</p>
<h4 id="使用-head-和-tail-命令查看文件"><a href="#使用-head-和-tail-命令查看文件" class="headerlink" title="使用 head 和 tail 命令查看文件"></a>使用 <code>head</code> 和 <code>tail</code> 命令查看文件</h4><p>这两个命令，那些性子比较急的人应该会喜欢，因为它们一个是只查看文件的头几行（默认为 10 行，不足 10 行则显示全部）和尾几行。还是拿 passwd 文件举例，比如当我们想要查看最近新增加的用户，那么我们可以查看这个 <code>/etc/passwd</code> 文件，不过我们前面也看到了，这个文件里面一大堆乱糟糟的东西，看起来实在费神啊。因为系统新增加一个用户，会将用户的信息添加到 passwd 文件的最后，那么这时候我们就可以使用 <code>tail</code> 命令了：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ tail <span class="regexp">/etc/</span>passwd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>甚至更直接的只看一行， 加上 <code>-n</code> 参数，后面紧跟行数：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ tail -n <span class="number">1</span> <span class="regexp">/etc/</span>passwd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410211404.png"></p>
<p>关于 <code>tail</code> 命令，不得不提的还有它一个很牛的参数 <code>-f</code>，这个参数可以实现不停地读取某个文件的内容并显示。这可以让我们动态查看日志，达到实时监视的目的。不过我不会在这门基础课程中介绍它的更多细节，感兴趣的用户可以自己去了解。</p>
<h4 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h4><p>前面我提到过，在 Linux 中文件的类型不是根据文件后缀来判断的，我们通常使用 <code>file</code> 命令查看文件的类型：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">file</span> <span class="regexp">/bin/</span>ls</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410211423.png"></p>
<p>说明这是一个可执行文件，运行在 64 位平台，并使用了动态链接文件（共享库）。</p>
<h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h3><p>在 Linux 下面编辑文件通常我们会直接使用专门的命令行编辑器比如（emacs，vim，nano），由于涉及 Linux 上的编辑器的内容比较多，且非常重要，故我们有一门单独的基础课专门介绍这中一个编辑器 vim 。<strong>强烈希望正在学习这门 Linux 基础课的你先在这里暂停一下，去学习 <a href="http://www.shiyanlou.com/courses/2">vim 编辑器</a> 的使用（至少掌握基本的操作），然后再继续本课程后面的内容，因为后面的内容会假设你已经学会了 vim 编辑器的使用。</strong>如果你想更加快速地入门，可以直接使用 Linux 内部的 vim 学习教程，输入如下命令即可开始：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>vimtutor</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux常用命令总结</title>
    <url>/posts/1d063ae7/</url>
    <content><![CDATA[<blockquote>
<p>记录一些linux容易忘的linux操作命令</p>
</blockquote>
<span id="more"></span>
<h1 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start xxx     // 开启服务</span><br><span class="line">systemctl stop xxx      // 停止服务</span><br><span class="line">systemctl restart xxx   // 重启服务</span><br><span class="line">systemctl <span class="built_in">enable</span> xxx    // 设置服务开机自启</span><br><span class="line">systemctl <span class="built_in">disable</span> xxx   // 取消服务开机自启</span><br><span class="line">systemctl status xxx    // 查看服务运行状态</span><br></pre></td></tr></table></figure>

<h1 id="查看当前公网ip"><a href="#查看当前公网ip" class="headerlink" title="查看当前公网ip"></a>查看当前公网ip</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl icanhazip.com  </span><br><span class="line">curl ifconfig.me  </span><br><span class="line">curl curlmyip.com  </span><br><span class="line">curl ip.appspot.com  </span><br><span class="line">curl ipinfo.io/ip  </span><br><span class="line">curl ipecho.net/plain  </span><br><span class="line">curl www.trackip.net/i</span><br></pre></td></tr></table></figure>

<h1 id="端口查看"><a href="#端口查看" class="headerlink" title="端口查看"></a>端口查看</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i -P <span class="comment"># 查看所有端口被占用情况</span></span><br><span class="line">netstat -anp |grep [port] <span class="comment"># 查看端口port被那个进程占用</span></span><br></pre></td></tr></table></figure>

<h1 id="刷新dns缓存"><a href="#刷新dns缓存" class="headerlink" title="刷新dns缓存"></a>刷新dns缓存</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nscd</span><br><span class="line">sudo /etc/init.d/nscd restart</span><br></pre></td></tr></table></figure>

<h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br><span class="line">cat /proc/version</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/xxx&quot;</span></span><br><span class="line">du -hs <span class="comment"># 查看某个文件夹占用大小</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span> &amp;&amp; <span class="built_in">echo</span> <span class="variable">$0</span> <span class="comment"># 查看当前终端类型</span></span><br></pre></td></tr></table></figure>

<h2 id="一些常见包"><a href="#一些常见包" class="headerlink" title="一些常见包"></a>一些常见包</h2><h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install lsb-release -y <span class="comment"># lsb_release -a</span></span><br><span class="line">apt-get install net-tools -y <span class="comment"># ifconfig</span></span><br><span class="line">apt-get install inetutils-ping -y <span class="comment">#ping www.baidu.com</span></span><br><span class="line">apt-get install aria2 -y</span><br></pre></td></tr></table></figure>

<p>必备组件：</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">vim curl wget git lsb-release <span class="built_in">net</span>-tools inetutils-<span class="built_in">ping</span> <span class="built_in">tree</span> lsof unzip zip socat aria2 </span><br></pre></td></tr></table></figure>

<h1 id="进程符号"><a href="#进程符号" class="headerlink" title="进程符号"></a>进程符号</h1><figure class="highlight tp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">R</span>    正在运行，或在队列中的进程</span><br><span class="line">S    处于休眠状态</span><br><span class="line">T    停止或被追踪</span><br><span class="line"><span class="keyword">Z</span>    僵尸进程</span><br><span class="line"><span class="keyword">W</span>    进入内存交换（从内核<span class="number">2</span><span class="number">.6</span>开始无效）</span><br><span class="line"><span class="keyword">X</span>    死掉的进程</span><br><span class="line">&lt;    高优先级</span><br><span class="line">N    低优先级</span><br><span class="line">L    有些页被锁进内存</span><br><span class="line">s    包含子进程</span><br><span class="line">+    位于后台的进程组；</span><br><span class="line">l    多线程，克隆线程  </span><br></pre></td></tr></table></figure>

<h1 id="开启BBR加速"><a href="#开启BBR加速" class="headerlink" title="开启BBR加速"></a>开启BBR加速</h1><p>若linux内核大于等于4.9，则直接用以下命令开启bbr加速:</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line">echo <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">lsmod | <span class="keyword">grep</span> bbr</span><br></pre></td></tr></table></figure>

<p>若出现如下包含<code>tcp_bbr</code>的字样，说明开启成功。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tcp_bbr</span>                <span class="number">20480</span>  <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><ol>
<li><p>docker安装</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">curl</span> -<span class="string">fsSL</span> <span class="string">https</span>://<span class="string">get</span>.<span class="string">docker</span>.<span class="string">com</span> -<span class="string">o</span> <span class="built_in">get-docker.sh</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">sh</span> <span class="built_in">get-docker.sh</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>docker-compose安装</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line">chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose <span class="regexp">/usr/</span>bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>注：1.29.2是目前最新版本，安装时进<a href="https://github.com/docker/compose/releases">github</a>项目查看最新release选择对应版本。</p>
</li>
</ol>
<h1 id="安装指定python版本"><a href="#安装指定python版本" class="headerlink" title="安装指定python版本"></a>安装指定python版本</h1><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">apt install software-properties-common<span class="built_in"></span></span><br><span class="line"><span class="built_in">add-apt-repository </span>ppa:deadsnakes/ppa <span class="comment"># 添加deadsnakes PPA源</span></span><br><span class="line">apt install python3.8 <span class="comment"># 安装python3.8</span></span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://segmentfault.com/a/1190000021967408">https://segmentfault.com/a/1190000021967408</a></p>
<h1 id="压缩包相关"><a href="#压缩包相关" class="headerlink" title="压缩包相关"></a>压缩包相关</h1><p>详见<a href="https://www.runoob.com/w3cnote/linux-tar-gz.html">菜鸟教程</a></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">tar -zxvf 压缩文件名<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">tar -zcvf 压缩文件名 <span class="selector-class">.tar</span><span class="selector-class">.gz</span> 被压缩文件名</span><br></pre></td></tr></table></figure>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">*<span class="selector-class">.tar</span> 用 tar –xvf 解压</span><br><span class="line">*<span class="selector-class">.gz</span> 用 gzip -d或者gunzip 解压</span><br><span class="line">*<span class="selector-class">.tar</span>.gz和*<span class="selector-class">.tgz</span> 用 tar –xzf 解压</span><br><span class="line">*<span class="selector-class">.bz2</span> 用 bzip2 -d或者用bunzip2 解压</span><br><span class="line">*<span class="selector-class">.tar</span>.bz2用tar –xjf 解压</span><br><span class="line">*<span class="selector-class">.Z</span> 用 uncompress 解压</span><br><span class="line">*<span class="selector-class">.tar</span><span class="selector-class">.Z</span> 用tar –xZf 解压</span><br><span class="line">*<span class="selector-class">.rar</span> 用 unrar e解压</span><br><span class="line">*<span class="selector-class">.zip</span> 用 unzip 解压</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>命令总结</tag>
      </tags>
  </entry>
  <entry>
    <title>linux服务器数据备份</title>
    <url>/posts/7bb08ef0/</url>
    <content><![CDATA[<blockquote>
<p>记录linux服务器端数据备份相关内容</p>
</blockquote>
<span id="more"></span>

<p>由于经常要从服务器上备份数据，这篇文章主要记录数据备份的一些方案。</p>
<h1 id="基于Python3"><a href="#基于Python3" class="headerlink" title="基于Python3"></a>基于Python3</h1><p>在需要下载的文件目录下，开启简单的文件服务器，下面的命令指定了端口为3040.</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> -m http.server <span class="number">3040</span></span><br></pre></td></tr></table></figure>

<p>需要注意防火墙开放3040端口。</p>
<h1 id="备份到google盘"><a href="#备份到google盘" class="headerlink" title="备份到google盘"></a>备份到google盘</h1><h2 id="gdrive"><a href="#gdrive" class="headerlink" title="gdrive"></a>gdrive</h2><p>gdrive的github项目地址为: <a href="https://github.com/prasmussen/gdrive">github项目</a></p>
<p>gdrvie可以用来下载和上传文件，还可以指定同步的文件夹。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先，执行以下命令安装gdrive</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">wget -O <span class="meta-keyword">/usr/</span>bin/gdrive <span class="string">&quot;https://docs.google.com/uc?id=0B3X9GlR6EmbnWksyTEtCM0VfaFE&amp;export=download&quot;</span></span><br><span class="line">chmod +x <span class="meta-keyword">/usr/</span>bin/gdrive</span><br></pre></td></tr></table></figure>

<p>第二步，认证登录</p>
<p>输入以下命令，在浏览器访问网址，得到验证码。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">gdrive <span class="keyword">about</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2021-04/20210830205221.png"></p>
<p>认证完毕后，token文件路径为<code>~/.gdrive/token_v2.json</code>.</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li><p>查看文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">gdrive [<span class="keyword">global</span>] <span class="keyword">list</span> [<span class="keyword">options</span>]</span><br><span class="line"></span><br><span class="line">option<span class="variable">s:</span></span><br><span class="line">  -<span class="keyword">m</span>, --<span class="built_in">max</span> <span class="symbol">&lt;maxFiles&gt;</span>       最大显示文件数: <span class="number">30</span></span><br><span class="line">  -q, --query <span class="symbol">&lt;query&gt;</span>        过滤命令，默认为: <span class="string">&quot;trashed = false and &#x27;me&#x27; in owners&quot;</span>. 查看http<span class="variable">s:</span>//developers.google.<span class="keyword">com</span>/drive/<span class="built_in">search</span>-parameters</span><br><span class="line">  --order <span class="symbol">&lt;sortOrder&gt;</span>        排序. 查看See http<span class="variable">s:</span>//godoc.org/google.golang.org/api/drive/v3#FilesListCall.OrderBy</span><br><span class="line">  --name-width <span class="symbol">&lt;nameWidth&gt;</span>   文件显示字符宽度, 默认: <span class="number">40</span>, 最小: <span class="number">9</span>, 可使用 <span class="number">0</span> 表示显示全部 full width</span><br><span class="line">  --absolute                 Show absolute path <span class="keyword">to</span> <span class="keyword">file</span> (will <span class="keyword">only</span> show path from <span class="keyword">first</span> parent)</span><br><span class="line">  --<span class="keyword">no</span>-header                Dont <span class="keyword">print</span> the header</span><br><span class="line">  --bytes                    Size in bytes</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">gdrive [<span class="keyword">global</span>] upload [<span class="keyword">options</span>] <span class="symbol">&lt;path&gt;</span></span><br><span class="line"></span><br><span class="line">option<span class="variable">s:</span></span><br><span class="line">  -r, --recursive               上传目录及其子目录</span><br><span class="line">  -<span class="keyword">p</span>, --parent <span class="symbol">&lt;parent&gt;</span>         父目录id，可以指定多个父目录</span><br><span class="line">  --name <span class="symbol">&lt;name&gt;</span>                 保存文件名</span><br><span class="line">  --description <span class="symbol">&lt;description&gt;</span>   文件描述</span><br><span class="line">  --<span class="keyword">no</span>-progress                 隐藏上传进度</span><br><span class="line">  --mime <span class="symbol">&lt;mime&gt;</span>                 强制mime</span><br><span class="line">  --share                       公开分享文件</span><br><span class="line">  --<span class="keyword">delete</span>                      上传完成后删除本地文件</span><br><span class="line">  --timeout <span class="symbol">&lt;timeout&gt;</span>           超时时间，<span class="number">0</span>为永不超时，默认为<span class="number">300</span></span><br><span class="line">  --chunksize <span class="symbol">&lt;chunksize&gt;</span>       上传分片大小，默认为: <span class="number">8388608</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下载文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">gdrive [<span class="keyword">global</span>] download query [<span class="keyword">options</span>] <span class="symbol">&lt;query&gt;</span></span><br><span class="line"></span><br><span class="line">option<span class="variable">s:</span></span><br><span class="line">  -<span class="keyword">f</span>, --force       覆盖本地同名文件</span><br><span class="line">  -r, --recursive   下载目录及其子目录，documents will <span class="keyword">be</span> skipped</span><br><span class="line">  --path <span class="symbol">&lt;path&gt;</span>     下载路径</span><br><span class="line">  --<span class="keyword">no</span>-progress     隐藏下载进度</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步文件夹</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">gdrive [<span class="keyword">global</span>] <span class="keyword">sync</span> upload [<span class="keyword">options</span>] <span class="symbol">&lt;path&gt;</span> <span class="symbol">&lt;fileId&gt;</span></span><br><span class="line"></span><br><span class="line">option<span class="variable">s:</span></span><br><span class="line">  --keep-remote             发生冲突时保留服务端文件</span><br><span class="line">  --keep-local              发生冲突时保留本地文件</span><br><span class="line">  --keep-largest            发生冲突时保留最大文件</span><br><span class="line">  --<span class="keyword">delete</span>-extraneous       删除服务端其他文件</span><br><span class="line">  --dry-run                 Show what would have been transferred</span><br><span class="line">  --<span class="keyword">no</span>-progress             Hide progress</span><br><span class="line">  --timeout <span class="symbol">&lt;timeout&gt;</span>           超时时间，<span class="number">0</span>为永不超时，默认为<span class="number">300</span></span><br><span class="line">  --chunksize <span class="symbol">&lt;chunksize&gt;</span>       上传分片大小，默认为: <span class="number">8388608</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="同步文件夹"><a href="#同步文件夹" class="headerlink" title="同步文件夹"></a>同步文件夹</h3><p>参考官方示例：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create directory on drive</span></span><br><span class="line"><span class="variable">$ </span>gdrive mkdir drive-bin</span><br><span class="line">Directory 0B3X9GlR6EmbnOEd6cEh6bU9XZWM created</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sync to drive</span></span><br><span class="line"><span class="variable">$ </span>gdrive sync upload _release/bin 0B3X9GlR6EmbnOEd6cEh6bU9XZWM</span><br></pre></td></tr></table></figure>

<p>这样我们可以写个定时脚本往指定文件夹添加添加文件进行同步了。</p>
<h2 id="下载谷歌盘分享的文件"><a href="#下载谷歌盘分享的文件" class="headerlink" title="下载谷歌盘分享的文件"></a>下载谷歌盘分享的文件</h2><p>对于分享的文件，需要取得<code>share_id</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2021-08/20210830211058.png"></p>
<p><strong>使用gdown</strong></p>
<p>gdown只是用来下载谷歌网盘分享的文件。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> gdown <span class="comment"># 安装gdown</span></span><br></pre></td></tr></table></figure>

<p>下载命令</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">gdown <span class="comment">--id &lt;share_id&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>使用wget</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -O <span class="regexp">/usr/</span>bin<span class="regexp">/user.json &quot;https:/</span><span class="regexp">/docs.google.com/u</span>c?id=&lt;share_id&gt;&amp;export=download<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="备份到webdav"><a href="#备份到webdav" class="headerlink" title="备份到webdav"></a>备份到webdav</h1><h2 id="基于davfs2的docker镜像"><a href="#基于davfs2的docker镜像" class="headerlink" title="基于davfs2的docker镜像"></a>基于davfs2的docker镜像</h2><p>github: <a href="https://github.com/efrecon/docker-webdav-client">https://github.com/efrecon/docker-webdav-client</a></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">docker run -itd <span class="params">--name</span> webdav_client \</span><br><span class="line">    <span class="params">--device</span> <span class="string">/dev/fuse</span> \</span><br><span class="line">    <span class="params">--cap-add</span> SYS_ADMIN \</span><br><span class="line">    <span class="params">--security-opt</span> <span class="string">&quot;apparmor=unconfined&quot;</span> \</span><br><span class="line">    <span class="params">--env</span> <span class="string">&quot;WEBDRIVE_USERNAME=&lt;YourUserName&gt;&quot;</span> \</span><br><span class="line">    <span class="params">--env</span> <span class="string">&quot;WEBDRIVE_PASSWORD=&lt;SuperSecretPassword&gt;&quot;</span> \</span><br><span class="line">    <span class="params">--env</span> <span class="string">&quot;WEBDRIVE_URL=https://dav.box.com/dav&quot;</span> \</span><br><span class="line">    <span class="params">--env</span> <span class="string">&quot;DAVFS2_ASK_AUTH=0&quot;</span> \</span><br><span class="line">    <span class="params">--env</span> <span class="string">&quot;OWNER=0&quot;</span> \</span><br><span class="line">    -v <span class="string">/mnt/tmp</span>:<span class="string">/mnt/webdrive</span><span class="function">:rshared</span> \</span><br><span class="line">    efrecon/webdav-client</span><br></pre></td></tr></table></figure>

<h1 id="全能挂载工具rclone"><a href="#全能挂载工具rclone" class="headerlink" title="全能挂载工具rclone"></a>全能挂载工具rclone</h1><p>github: <a href="https://github.com/rclone/rclone">https://github.com/rclone/rclone</a></p>
<h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ul>
<li><a href="http://www.weilutan.com/archives/84dcc474.html">http://www.weilutan.com/archives/84dcc474.html</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux时间</title>
    <url>/posts/linuxtime/</url>
    <content><![CDATA[<blockquote>
<p>使用linux时，时间这一块不是很清楚，本篇博客记录网上搜集的教程并整理</p>
</blockquote>
<span id="more"></span>

<h1 id="时间概述"><a href="#时间概述" class="headerlink" title="时间概述"></a>时间概述</h1><p>首先需要清楚两个时间概念：<code>硬件时间</code>和<code>系统时间</code></p>
<h2 id="windows中的时间"><a href="#windows中的时间" class="headerlink" title="windows中的时间"></a>windows中的时间</h2><p>Windows中的系统时间会自动保存在BIOS时钟里面，启动计算机的时候，系统会自动在BIOS里面取硬件时间，以保证时间的不间断。</p>
<h2 id="linux系统中的时间"><a href="#linux系统中的时间" class="headerlink" title="linux系统中的时间"></a>linux系统中的时间</h2><p>linux系统在默认情况下，系统时间和硬件时间并不会自动同步。在Linux运行过程中，系统时间和硬件时间以异步的方式运行，互不干扰。硬件时间的运行，是靠BIOS电池来维持，而系统时间，是用CPU Tick来维持的。在系统开机的时候，会自动从BIOS中取得硬件时间，设置为系统时间。</p>
<h1 id="date"><a href="#date" class="headerlink" title="date"></a>date</h1><blockquote>
<p>date命令方便查看当前系统时间和设置系统时间</p>
</blockquote>
<ul>
<li>查看系统时间</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@linux:~# date       # 打印当前时区时间</span><br><span class="line">Sat Jul  3 17:10:02 CST 2021</span><br><span class="line">root@linux:~# date &quot;+%s&quot;  # 显示当前时间戳 </span><br><span class="line">1625303413</span><br><span class="line">root@linux:~# date &quot;+Time Now: %Y-%m-%d %H:%M:%S&quot; # 按指定格式打印时间</span><br><span class="line">Time Now: 2021-07-03 17:11:22</span><br></pre></td></tr></table></figure>

<ul>
<li>设置系统时间</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date -s &quot;20210703 17:11:22&quot;</span><br></pre></td></tr></table></figure>

<h1 id="hwclock"><a href="#hwclock" class="headerlink" title="hwclock"></a>hwclock</h1><blockquote>
<p>硬件时间的设置，可以用hwclock或者clock命令。两者基本相同，只用一个就行，只不过clock命令除了支持x86硬件体系外，还支持Alpha硬件体系。</p>
</blockquote>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">root@linux:~<span class="comment"># hwclock -h</span></span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"> hwclock [<span class="function"><span class="keyword">function</span>] [<span class="title">option</span>...]</span></span><br><span class="line"></span><br><span class="line">Time clocks utility.</span><br><span class="line"></span><br><span class="line">Functions:</span><br><span class="line"> -r, <span class="comment">--show           display the RTC time</span></span><br><span class="line">     <span class="comment">--get            display drift corrected RTC time</span></span><br><span class="line">     <span class="comment">--set            set the RTC according to --date</span></span><br><span class="line"> -s, <span class="comment">--hctosys        set the system time from the RTC</span></span><br><span class="line"> -w, <span class="comment">--systohc        set the RTC from the system time</span></span><br><span class="line">     <span class="comment">--systz          send timescale configurations to the kernel</span></span><br><span class="line"> -<span class="keyword">a</span>, <span class="comment">--adjust         adjust the RTC to account for systematic drift</span></span><br><span class="line">     <span class="comment">--predict        predict the drifted RTC time according to --date</span></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -u, <span class="comment">--utc            the RTC timescale is UTC</span></span><br><span class="line"> -l, <span class="comment">--localtime      the RTC timescale is Local</span></span><br><span class="line"> -f, <span class="comment">--rtc &lt;file&gt;     use an alternate file to /dev/rtc0</span></span><br><span class="line">     <span class="comment">--directisa      use the ISA bus instead of /dev/rtc0 access</span></span><br><span class="line">     <span class="comment">--date &lt;time&gt;    date/time input for --set and --predict</span></span><br><span class="line">     <span class="comment">--update-drift   update the RTC drift factor</span></span><br><span class="line">     <span class="comment">--noadjfile      do not use /etc/adjtime</span></span><br><span class="line">     <span class="comment">--adjfile &lt;file&gt; use an alternate file to /etc/adjtime</span></span><br><span class="line">     <span class="comment">--test           dry run; implies --debug</span></span><br><span class="line"> -D, <span class="comment">--debug          display more details</span></span><br><span class="line"></span><br><span class="line"> -h, <span class="comment">--help           display this help</span></span><br><span class="line"> -V, <span class="comment">--version        display version</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>查看硬件时钟</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">root</span>@linux:~# hwclock --show</span><br><span class="line"><span class="attribute">2021</span>-<span class="number">07</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">17</span>:<span class="number">35</span>.<span class="number">708633</span>+<span class="number">080</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同步系统时间到硬件时间</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">[root@controller ~]<span class="comment"># hwclock</span></span><br><span class="line">Thu<span class="number"> 06 </span>Apr<span class="number"> 2017 </span>11:46:35 AM CST  -0.028650 seconds</span><br><span class="line">[root@controller ~]<span class="comment"># hwclock -w</span></span><br><span class="line">[root@controller ~]<span class="comment"># hwclock</span></span><br><span class="line">Thu<span class="number"> 06 </span>Apr<span class="number"> 2017 </span>11:47:00 AM CST  -0.223930 seconds</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步硬件时间到系统时间</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@controller</span> ~]<span class="meta"># date</span></span><br><span class="line">Thu Apr  <span class="number">6</span> <span class="number">11</span>:<span class="number">48</span>:<span class="number">31</span> CST <span class="number">2017</span></span><br><span class="line">[root<span class="symbol">@controller</span> ~]<span class="meta"># hwclock -s</span></span><br><span class="line">[root<span class="symbol">@controller</span> ~]<span class="meta"># date</span></span><br><span class="line">Thu Apr  <span class="number">6</span> <span class="number">11</span>:<span class="number">48</span>:<span class="number">41</span> CST <span class="number">2017</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改硬件时间</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@controller</span> ~]<span class="meta"># hwclock --set --date=<span class="string">&quot;12/12/16 10:19&quot;</span></span></span><br><span class="line">[root<span class="symbol">@controller</span> ~]<span class="meta"># hwclock </span></span><br><span class="line">Mon <span class="number">12</span> <span class="built_in">Dec</span> <span class="number">2016</span> <span class="number">10</span>:<span class="number">19</span>:<span class="number">05</span> AM CST  <span class="number">-0.107052</span> seconds</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h1><blockquote>
<p>timedatectl命令对于RHEL / CentOS 7和基于Fedora 21+的分布式系统来说，是一个新工具，它作为systemd系统和服务管理器的一部分，代替旧的传统的用在基于Linux分布式系统的sysvinit守护进程的date命令。timedatectl命令可以查询和更改系统时钟和设置，你可以使用此命令来设置或更改当前的日期，时间和时区，或实现与远程NTP服务器的自动系统时钟同步。</p>
</blockquote>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">root</span>@<span class="string">linux</span>:~<span class="comment"># timedatectl -h</span></span><br><span class="line"><span class="string">timedatectl</span> [<span class="string">OPTIONS</span>...] <span class="string">COMMAND</span> ...</span><br><span class="line"></span><br><span class="line"><span class="string">Query</span> <span class="string">or</span> <span class="string">change</span> <span class="string">system</span> <span class="string">time</span> <span class="string">and</span> <span class="string">date</span> <span class="string">settings</span>.</span><br><span class="line"></span><br><span class="line">  -<span class="string">h</span> <span class="built_in">--help</span>                <span class="string">Show</span> <span class="string">this</span> <span class="string">help</span> <span class="string">message</span></span><br><span class="line">     <span class="built_in">--version</span>             <span class="string">Show</span> <span class="string">package</span> <span class="string">version</span></span><br><span class="line">     <span class="built_in">--no-pager</span>            <span class="string">Do</span> <span class="string">not</span> <span class="string">pipe</span> <span class="string">output</span> <span class="string">into</span> <span class="string">a</span> <span class="string">pager</span></span><br><span class="line">     <span class="built_in">--no-ask-password</span>     <span class="string">Do</span> <span class="string">not</span> <span class="string">prompt</span> <span class="string">for</span> <span class="string">password</span></span><br><span class="line">  -<span class="string">H</span> <span class="built_in">--host=[USER@]HOST</span>    <span class="string">Operate</span> <span class="string">on</span> <span class="string">remote</span> <span class="string">host</span></span><br><span class="line">  -<span class="string">M</span> <span class="built_in">--machine=CONTAINER</span>   <span class="string">Operate</span> <span class="string">on</span> <span class="string">local</span> <span class="string">container</span></span><br><span class="line">     <span class="built_in">--adjust-system-clock</span> <span class="string">Adjust</span> <span class="string">system</span> <span class="string">clock</span> <span class="string">when</span> <span class="string">changing</span> <span class="string">local</span> <span class="string">RTC</span> <span class="string">mode</span></span><br><span class="line"></span><br><span class="line"><span class="string">Commands</span>:</span><br><span class="line">  <span class="string">status</span>                   <span class="string">Show</span> <span class="string">current</span> <span class="string">time</span> <span class="string">settings</span></span><br><span class="line">  <span class="built_in">set-time</span> <span class="string">TIME</span>            <span class="string">Set</span> <span class="string">system</span> <span class="string">time</span></span><br><span class="line">  <span class="built_in">set-timezone</span> <span class="string">ZONE</span>        <span class="string">Set</span> <span class="string">system</span> <span class="string">time</span> <span class="string">zone</span></span><br><span class="line">  <span class="built_in">list-timezones</span>           <span class="string">Show</span> <span class="string">known</span> <span class="string">time</span> <span class="string">zones</span></span><br><span class="line">  <span class="built_in">set-local-rtc</span> <span class="string">BOOL</span>       <span class="string">Control</span> <span class="string">whether</span> <span class="string">RTC</span> <span class="string">is</span> <span class="string">in</span> <span class="string">local</span> <span class="string">time</span></span><br><span class="line">  <span class="built_in">set-ntp</span> <span class="string">BOOL</span>             <span class="string">Enable</span> <span class="string">or</span> <span class="string">disable</span> <span class="string">network</span> <span class="string">time</span> <span class="string">synchronization</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>查看当前时间设置</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">root</span>@linux:~# timedatectl status</span><br><span class="line">                      <span class="attribute">Local</span> time: Sat <span class="number">2021</span>-<span class="number">07</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">02</span> CST</span><br><span class="line">                  <span class="attribute">Universal</span> time: Sat <span class="number">2021</span>-<span class="number">07</span>-<span class="number">03</span> <span class="number">09</span>:<span class="number">26</span>:<span class="number">02</span> UTC</span><br><span class="line">                        <span class="attribute">RTC</span> time: Sat <span class="number">2021</span>-<span class="number">07</span>-<span class="number">03</span> <span class="number">09</span>:<span class="number">26</span>:<span class="number">06</span></span><br><span class="line">                       <span class="attribute">Time</span> zone: Asia/Shanghai (CST, +<span class="number">0800</span>)</span><br><span class="line">       <span class="attribute">System</span> clock synchronized: yes</span><br><span class="line"><span class="attribute">systemd</span>-timesyncd.service active: yes</span><br><span class="line">                 <span class="attribute">RTC</span> in local TZ: no</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>name</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>Local time</td>
<td>本地时区时间</td>
</tr>
<tr>
<td>Universal time</td>
<td>世界协调时</td>
</tr>
<tr>
<td>RTC time</td>
<td>硬件时间（real-time clock）</td>
</tr>
<tr>
<td>Time zone</td>
<td>当前设置的时区</td>
</tr>
<tr>
<td>System clock synchronized</td>
<td>如果和远程NTP服务器成功同步，显示为yes</td>
</tr>
<tr>
<td>systemd-timesyncd.service active</td>
<td>NTP时间同步是否开启，yes表示是，systemd-timesyncd服务为活动也就是开启了NTP时间同步</td>
</tr>
<tr>
<td>RTC in local TZ</td>
<td>no表示硬件时钟设置为协调世界时（UTC），yes表示硬件时钟设置为本地时间</td>
</tr>
</tbody></table>
</li>
<li><p>设置系统时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">timedatectl set-time 15:58:30  #只设置时间</span><br><span class="line">timedatectl set-time 20151120  #只设置日期</span><br><span class="line">timedatectl set-time &#x27;16:10:40 2015-11-20&#x27; #同时设置日期和时间</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示可用时区</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">timedatectl list-timezones</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置系统时区</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">timedatectl</span> <span class="built_in">set-timezone</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">timedatectl</span> <span class="built_in">set-timezone</span> <span class="string">UTC</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置硬件时钟时区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">timedatectl set-local-rtc 0 #将硬件时钟设置为协调世界时</span><br><span class="line">timedatectl set-local-rtc 1 #将硬件时钟设置为本地时区</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置系统时间同步到远程NTP服务器</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">timedatectl</span> <span class="built_in">set-ntp</span> <span class="string">true</span> <span class="comment"># 开启同步</span></span><br><span class="line"><span class="string">timedatectl</span> <span class="built_in">set-ntp</span> <span class="string">false</span> <span class="comment"># 关闭同步</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="ntpdate"><a href="#ntpdate" class="headerlink" title="ntpdate"></a>ntpdate</h1><blockquote>
<p>NTP即Network Time Protocol（网络时间协议），是一个互联网协议，用于同步计算机之间的系统时钟。</p>
</blockquote>
<p>为了避免主机时间因为长期运行下所导致的时间偏差，进行时间同步（synchronize）的工作是非常必要的。</p>
<p>Linux系统下，一般使用ntp服务器来同步不同机器的时间。一台机器，可以同时是ntp服务端和ntp客户端。在生产系统中，推荐使用像DNS服务器一样分层的时间服务器来同步时间。</p>
<p>不同机器间同步时间，可以使用<code>ntpdate</code>命令，也可以使用<code>ntpd</code>服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# ntpdate [NTP IP/hostname]</span><br><span class="line">[root@node1 ~]# ntpdate 192.168.0.1</span><br><span class="line">[root@node1 ~]# ntpdate time.ntp.org</span><br></pre></td></tr></table></figure>

<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="1-timedatectl"><a href="#1-timedatectl" class="headerlink" title="1. timedatectl"></a>1. timedatectl</h2><h3 id="报错1"><a href="#报错1" class="headerlink" title="报错1"></a>报错1</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$ timedatectl</span><br><span class="line">Failed <span class="built_in">to</span> <span class="built_in">create</span> bus connection: No such <span class="built_in">file</span> <span class="keyword">or</span> <span class="built_in">directory</span></span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install dbus</span><br></pre></td></tr></table></figure>



<h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ol>
<li><a href="https://www.cnblogs.com/zhi-leaf/p/6282301.html">https://www.cnblogs.com/zhi-leaf/p/6282301.html</a></li>
<li><a href="https://www.jianshu.com/p/da8f9b6e832f">https://www.jianshu.com/p/da8f9b6e832f</a></li>
<li><a href="https://www.cnblogs.com/williamjie/p/10768657.html">https://www.cnblogs.com/williamjie/p/10768657.html</a></li>
<li><a href="https://www.cnblogs.com/pipci/p/12833228.html">https://www.cnblogs.com/pipci/p/12833228.html</a></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux添加虚拟内存swap</title>
    <url>/posts/218b6e0a/</url>
    <content><![CDATA[<blockquote>
<p>记录linux如何新建swap分区，添加虚拟内存，解决服务器内存不足的问题。</p>
</blockquote>
<span id="more"></span>

<h1 id="新建swap分区"><a href="#新建swap分区" class="headerlink" title="新建swap分区"></a>新建swap分区</h1><h2 id="创建分区文件"><a href="#创建分区文件" class="headerlink" title="创建分区文件"></a>创建分区文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=/root/swapfile bs=1M count=2048</span><br></pre></td></tr></table></figure>

<ul>
<li>dd:  用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。</li>
<li>if: 输入文件名，缺省为标准输入，即指定源文件</li>
<li>of: 输出文件名，缺省为标准输出，即指定目的文件</li>
<li>/dev/zero: 创建一个指定长度用于初始化的空文件</li>
<li>bs: bytes，设置读入/输出的块大小</li>
<li>count: 拷贝块的个数</li>
<li>上述命令指定了/root/swapfile 大小为2G</li>
</ul>
<h2 id="修改文件权限、建立swap分区并启用"><a href="#修改文件权限、建立swap分区并启用" class="headerlink" title="修改文件权限、建立swap分区并启用"></a>修改文件权限、建立swap分区并启用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 0600 /root/swapfile</span><br><span class="line">mkswap /root/swapfile</span><br><span class="line">swapon /root/swapfile</span><br></pre></td></tr></table></figure>

<h1 id="调整swap分区使用优先级"><a href="#调整swap分区使用优先级" class="headerlink" title="调整swap分区使用优先级"></a>调整swap分区使用优先级</h1><ul>
<li><p>查看当前swap使用优先级</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/vm/swappiness</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改swap使用优先级</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sysctl vm.swappiness=60 # 一般设为60，表明系统内存剩余100%-60%=40%时，开始使用交换内存</span><br></pre></td></tr></table></figure>
</li>
<li><p>永久修改swap使用优先级</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf # 打开文件</span><br></pre></td></tr></table></figure>

<p>找到文件中 <code> vm.swappiness=0</code>这一行，修改其值即可。如果没有这一行，则添加这一行。</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://www.cnblogs.com/chennl/p/10167088.html">https://www.cnblogs.com/chennl/p/10167088.html</a></li>
<li><a href="https://blog.csdn.net/demo_deng/article/details/9428491">https://blog.csdn.net/demo_deng/article/details/9428491</a></li>
<li><a href="https://www.cnblogs.com/shouke/p/10157626.html">https://www.cnblogs.com/shouke/p/10157626.html</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux服务器上传文件到百度网盘</title>
    <url>/posts/33eb66fd/</url>
    <content><![CDATA[<blockquote>
<p>记录linux如何直接上传文件到百度网盘</p>
</blockquote>
<span id="more"></span>
<h1 id="1-安装python3和相关库"><a href="#1-安装python3和相关库" class="headerlink" title="1. 安装python3和相关库"></a>1. 安装python3和相关库</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> python3</span><br><span class="line">pip3 <span class="keyword">install</span> requests</span><br><span class="line">pip3 <span class="keyword">install</span> bypy</span><br></pre></td></tr></table></figure>
<p><code>bypy</code>就是连接百度网盘的工具</p>
<h1 id="2-身份认证"><a href="#2-身份认证" class="headerlink" title="2. 身份认证"></a>2. 身份认证</h1><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bypy</span> <span class="literal">info</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415172131.png"><br>访问要求的网址，获得授权码，前提是浏览器需要登录了网页版百度网盘</p>
<p>将授权码复制到命令行中，按下enter键，就能认证成功</p>
<p>:warning: 如果输入bypy info提示编码问题，可以修改linux默认编码解决，参考我的另一篇博客 <a href="/archives/%E4%BF%AE%E6%94%B9linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E4%B8%BAutf8#more">修改linux默认编码为utf8</a></p>
<h1 id="3-一些常用命令"><a href="#3-一些常用命令" class="headerlink" title="3. 一些常用命令"></a>3. 一些常用命令</h1><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bypy </span>list                 <span class="comment"># 显示文档</span></span><br><span class="line"><span class="keyword">bypy </span>upload filename -v   <span class="comment"># 上传某文件，显示进度</span></span><br><span class="line"><span class="keyword">bypy </span>-c                   <span class="comment"># 取消令牌文件。一段时间后要重新授权</span></span><br><span class="line"><span class="keyword">bypy </span>downdir filename     <span class="comment"># 下载</span></span><br><span class="line"><span class="keyword">bypy </span><span class="built_in">compare</span>              <span class="comment"># 比较本地目录和网盘目录</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Python的pip缓存</title>
    <url>/posts/5e683b0e/</url>
    <content><![CDATA[<blockquote>
<p>pip安装时默认会有缓存，存储在C盘占用空间</p>
</blockquote>
<span id="more"></span>

<h1 id="查看缓存位置"><a href="#查看缓存位置" class="headerlink" title="查看缓存位置"></a>查看缓存位置</h1><ul>
<li>win10下默认缓存路径为：<code>C:\Users\用户名\AppData\Local\pip\cache</code></li>
<li>linux下默认缓存路径为：<code>~/.cache/pip</code></li>
</ul>
<h2 id="通过Python命令查看"><a href="#通过Python命令查看" class="headerlink" title="通过Python命令查看"></a>通过Python命令查看</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pip.utils.appdirs <span class="keyword">import</span> user_cache_dir  <span class="comment"># before pip v.10</span></span><br><span class="line"><span class="keyword">from</span> pip._internal.utils.appdirs <span class="keyword">import</span> user_cache_dir  <span class="comment"># since pip v.10</span></span><br><span class="line"><span class="built_in">print</span>(user_cache_dir(<span class="string">&#x27;pip&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(user_cache_dir(<span class="string">&#x27;wheel&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h1 id="修改缓存位置"><a href="#修改缓存位置" class="headerlink" title="修改缓存位置"></a>修改缓存位置</h1><h2 id="通过命令的方式"><a href="#通过命令的方式" class="headerlink" title="通过命令的方式"></a>通过命令的方式</h2><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> <span class="built_in">global</span>.<span class="keyword">cache</span><span class="params">-dir</span> <span class="string">&quot;新的路径&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="通过修改配置文件的方式"><a href="#通过修改配置文件的方式" class="headerlink" title="通过修改配置文件的方式"></a>通过修改配置文件的方式</h2><ul>
<li><p>win10配置文件路径: <code>%APPDATA%\pip\pip.ini</code></p>
</li>
<li><p>linux配置文件路径：<code>~/.config/pip/pip.conf</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = http://pypi.douban.com/simple/</span><br><span class="line"><span class="attr">extra-index-url</span> = http://mirrors.aliyun.com/pypi/simple/ https://pypi.python.org/simple https://download.pytorch.org/whl/torch_stable.html</span><br><span class="line"><span class="attr">trusted-host</span> = pypi.douban.com mirrors.aliyun.com pypi.python.org download.pytorch.org</span><br><span class="line"><span class="attr">cache-dir</span> = D:\BCache\python-cache</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="设置某次pip安装没有缓存"><a href="#设置某次pip安装没有缓存" class="headerlink" title="设置某次pip安装没有缓存"></a>设置某次pip安装没有缓存</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># pip安装时添加--<span class="keyword">no</span>-cache-<span class="keyword">dir</span>参数</span><br><span class="line">pip install requests --<span class="keyword">no</span>-cache-<span class="keyword">dir</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技巧</category>
      </categories>
  </entry>
  <entry>
    <title>npm命令总结</title>
    <url>/posts/dj8392A/</url>
    <content><![CDATA[<blockquote>
<p>总结npm命令</p>
</blockquote>
<span id="more"></span>
<h3 id="npm安装模块"><a href="#npm安装模块" class="headerlink" title="npm安装模块"></a>npm安装模块</h3><ul>
<li>【npm install xxx】利用 npm 安装xxx模块到当前命令行所在目录；</li>
<li>【npm install -g xxx】利用npm安装全局模块xxx；</li>
<li>【npm install xxx】安装但不写入package.json；</li>
<li>【npm install xxx –save】 安装并写入package.json的”dependencies”中；</li>
<li>【npm install xxx –save-dev】安装并写入package.json的”devDependencies”中。</li>
</ul>
<h3 id="npm-删除模块"><a href="#npm-删除模块" class="headerlink" title="npm 删除模块"></a>npm 删除模块</h3><ul>
<li>【npm uninstall xxx】删除xxx模块；</li>
<li>【npm uninstall -g xxx】删除全局模块xxx</li>
</ul>
<h3 id="查看npm全局安装过哪些模块"><a href="#查看npm全局安装过哪些模块" class="headerlink" title="查看npm全局安装过哪些模块"></a>查看npm全局安装过哪些模块</h3><ul>
<li>【npm list -g –depth 0】</li>
</ul>
<h3 id="查看npm全局配置"><a href="#查看npm全局配置" class="headerlink" title="查看npm全局配置"></a>查看npm全局配置</h3><ul>
<li>【npm config ls】</li>
</ul>
<h3 id="修改npm全局安装路径"><a href="#修改npm全局安装路径" class="headerlink" title="修改npm全局安装路径"></a>修改npm全局安装路径</h3><ul>
<li>【npm config set prefix *】 如：npm config set prefix “D:\Test”</li>
</ul>
<h3 id="npm设置代理"><a href="#npm设置代理" class="headerlink" title="npm设置代理"></a>npm设置代理</h3><ul>
<li>【npm config set proxy=<a href="http://127.0.0.1:8087】">http://127.0.0.1:8087】</a></li>
<li>【npm config set registry=<a href="http://registry.npmjs.org】/">http://registry.npmjs.org】</a></li>
<li>【npm config delete proxy】</li>
<li>【npm config delete https-proxy】</li>
</ul>
<h3 id="win10关闭node进程"><a href="#win10关闭node进程" class="headerlink" title="win10关闭node进程"></a>win10关闭node进程</h3><ul>
<li>【taskkill /F  /IM node.exe】 win10中git终端ctrl+c无法关闭node进程的解决方案</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>命令总结</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>unix网络编程2-IPC-0-前言</title>
    <url>/posts/3b3b119c/</url>
    <content><![CDATA[<p>由于本学期操作系统课设选择了linux的进程通信，准备学习《unix网络编程卷2: 进程间通信》。这门书英文版为《UNIX NETWORK Programming, volume 2, Second Edition: Interprocss Communications》，该版出版于2015年。</p>
<span id="more"></span>

<p>目前不太了解linux和unix在IPC这一部分的区别，希望大致相同吧，准备写博客记录这些知识。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>大部分程序都涉及到进程间通信（Interprocess Communication, IPC），这是受这个设计原则影响的结果：<strong>把应用程序设计为一组相互通信的小片段比将其设计为单个庞大的程序更好</strong>。</p>
<p>从历史角度看，应用程序有以下几种构建方法：</p>
<p>(1) 用一个庞大的的程序完成全部工作。程序的各部分实现为<strong>函数</strong>，函数之间通过<strong>参数</strong>、<strong>返回值</strong>和<strong>全局变量</strong>来交换 信息。<br>(2) 使用多个程序(个人理解为进程)，程序之间用某种形式的IPC通信。许多标准的unix工具都是按照这种风格设计的，它们使用shell管道（IPC的一种形式）在程序之间的传递信息。</p>
<p>(3) 使用一个包含多个线程的程序，线程之间通过某种IPC（假定认为是在进程之间进行的）</p>
<div class="note default"><p>还可以把后两种设计形式结合起来：用多个进程实现，每个进程包含几个线程，进程内部线程之间可以通信，不同进程之间也可以通信。</p>
</div>

<h1 id="本书主要描述的IPC形式"><a href="#本书主要描述的IPC形式" class="headerlink" title="本书主要描述的IPC形式"></a>本书主要描述的IPC形式</h1><p>IPC可以分为非网络IPC（本书第2卷）和网络IPC（本书第1卷）。本书主要讲述非网络IPC，详细描述了以下4种不同的IPC形式：</p>
<ul>
<li>消息传递（管道、FIFO和消息队列）</li>
<li>同步（互斥量、条件变量、读写锁、文件与记录锁、信号量）</li>
<li>共享内存（匿名的和有名的）</li>
<li>远程过程调用（Solaris门和Sun RPC）</li>
</ul>
<h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><p><a href="https://www.ituring.com.cn/book/156">https://www.ituring.com.cn/book/156</a></p>
<h1 id="Linux的进程通信"><a href="#Linux的进程通信" class="headerlink" title="Linux的进程通信"></a>Linux的进程通信</h1><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731220232.png"></p>
]]></content>
      <categories>
        <category>unix</category>
      </categories>
      <tags>
        <tag>unix</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装最新稳定版nginx</title>
    <url>/posts/49201cbb/</url>
    <content><![CDATA[<blockquote>
<p>记录ubuntu18.04安装最新的nginx版本教程</p>
</blockquote>
<span id="more"></span>

<h1 id="卸载已安装的nginx"><a href="#卸载已安装的nginx" class="headerlink" title="卸载已安装的nginx"></a>卸载已安装的nginx</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> --purge <span class="builtin-name">remove</span> nginx nginx-common nginx-core</span><br></pre></td></tr></table></figure>

<p>使用上述命令卸载nginx相关组件以及配置文件，注意提前对现有配置文件做好备份。</p>
<h1 id="nginx相关介绍"><a href="#nginx相关介绍" class="headerlink" title="nginx相关介绍"></a>nginx相关介绍</h1><h2 id="nginx版本"><a href="#nginx版本" class="headerlink" title="nginx版本"></a>nginx版本</h2><p>官网下载地址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a> ，打开如下图所示。</p>
<p>版本说明：</p>
<ul>
<li>mainline version: 正在开发的版本</li>
<li>stable version: 稳定版</li>
<li>legacy version: 历史版本</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2021-04/20210829155130.png"></p>
<h2 id="nginx支持的linux发行版本"><a href="#nginx支持的linux发行版本" class="headerlink" title="nginx支持的linux发行版本"></a>nginx支持的linux发行版本</h2><p>网址：<a href="http://nginx.org/en/linux_packages.html#stable">http://nginx.org/en/linux_packages.html#stable</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2021-04/20210829155517.png"></p>
<p>上图中不同ubuntu版本后面的<code>bionic</code>、<code>focal</code>和<code>hirsute</code>是<code>Codename</code>。</p>
<p>查看我们当前ubuntu的版本及其codename</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">lsb_release -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2021-04/20210829155803.png"></p>
<h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><p>第一步需要添加nginx公钥，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget http://nginx.org/keys/nginx_signing.key</span><br><span class="line">sudo apt-key add nginx_signing.key</span><br></pre></td></tr></table></figure>

<p>第二步将nginx源添加到apt源中，编辑文件<code>/etc/apt/sources.list</code>，插入以下内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb http://nginx.org/packages/ubuntu/ &lt;codename&gt; nginx</span><br><span class="line">deb-src http://nginx.org/packages/ubuntu/ &lt;codename&gt; nginx</span><br></pre></td></tr></table></figure>

<p>注意上面的codename需要改成对应ubuntu系统的codename，对于ubntu18.04，就是添加下面的内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb http://nginx.org/packages/ubuntu/ bionic nginx</span><br><span class="line">deb-src http://nginx.org/packages/ubuntu/ bionic nginx</span><br></pre></td></tr></table></figure>

<p>第三步更新源并安装nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<p>最后查看安装后的nginx版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure>



<h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ul>
<li><a href="https://blog.csdn.net/qq_35556064/article/details/83069672">https://blog.csdn.net/qq_35556064/article/details/83069672</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>unix网络编程2-IPC-2-Posix IPC</title>
    <url>/posts/f9ac59e8/</url>
    <content><![CDATA[<p>继续学习《unix网络编程卷2: 进程间通信》，本篇主要记录第2章 Posix IPC 的相关内容。</p>
<span id="more"></span>

<h1 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h1><p>以下三种类型的IPC合称为<code>Posix IPC</code>.</p>
<ul>
<li>Posix 消息队列</li>
<li>Posix 信号量</li>
<li>Posix 共享内存区</li>
</ul>
<p>Posix IPC 在访问它们的函数和描述它们的信息上是有一些相似的。</p>
<p>本章主要讲述这些IPC的共同属性：<code>用于标识的路径名</code>、<code>打开或创建时指定的标志</code>和<code>访问权限</code>。</p>
<p>下图汇总了所有IPC Posix函数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-08/20200801084330.png"></p>
<h1 id="2-2-IPC名字"><a href="#2-2-IPC名字" class="headerlink" title="2.2 IPC名字"></a>2.2 IPC名字</h1><p>第一章的图1.4中指出，三种类型的Poix IPC都使用<code>Posix IPC名字</code>进行标识。mq_open、sem_open和shm_open这三个函数的第一个参数就是这样的名字，<strong>它可能是某个文件系统中的一个真正的路径名，也可能不是</strong>。Posix.1中是这么描述Posix IPC名字的：</p>
<ul>
<li><p>它必须符合已有的路径名规则（必须最多由PATH_MAX个字节构成，包括结尾的空字节）</p>
</li>
<li><p>如果它以斜杠符开头，那么对<strong>这些函数的不同调用将访问同一个队列</strong>，如果它不以斜杠符开头，那么<strong>效果取决于实现</strong>。</p>
</li>
<li><p>名字中额外的斜杠符的解释由实现定义。</p>
</li>
</ul>
<div class="note default"><p>因此，为了便于移植起见，Posix IPC名字必须以一个斜杠符开头，并且不能再包含其他斜杠符。</p>
<p>遗憾的是，这些规则还不够，仍会出现移植性问题。</p>
</div>

<p>Solaris 2.6要求有打头的斜杠符，但是不允许有另外的斜杠符。假设要创建的是一个消息队列，创建函数将在/tmp中创建三个以.MQ开头的文件。例如，如果给mg_open的参数为/queue.1234，那么这三个文件分别为 /tmp/.MQDqueue.1234、/tmp/.MQLqueue.1234和/tmp/.MQPqueue.1234。Digital Unix 4.0B则在文件系统中创建所指定的文件名。</p>
<p>当我们指定三个斜杠符（作为首字母）的名字时，移植性问题就发生了：<strong>我们必须在根目录中具有写权限</strong>。例如，/tmp.1234符合Posix规则，在Solaris下也可行，但是Digital Unix却会试图创建这个文件，这是除非我们有在根目录中的写权限，否则这样的尝试会失败。如果我们指定一个/tmp/test.1234的名字，那么在以该名字创建一个真正文件的所有系统上都将成功（前提是/tmp目录存在，而且具有写权限，对于多数unix系统来说，这是正常情况），<strong>在soloris下则失败</strong>。</p>
<p>为避免这些移植性问题，我们应把Posix IPC名字的#define行放在一个便于修改的头文件中，这样应用程序转移到另一个系统上时，只需修改这个头文件。</p>
<h2 id="px-ipc-name函数"><a href="#px-ipc-name函数" class="headerlink" title="px_ipc_name函数"></a>px_ipc_name函数</h2><p>解决上述移植性问题的另一种方案是自己定义一个名为px_ipx_name的函数，它为定位Posix IPC名字而添加上正确的前缀目录。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;unpipc.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">px_ipc_name</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>; </span><br></pre></td></tr></table></figure>

<p>参数name不能包含任何斜杠符。例如调用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">px_ipc_name(<span class="string">&quot;test1&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在solaris 2.6下该函数将返回一个执行字符串 /test1 的指针，在Digital Uninx 4.0B下返回一个指向字符串/tmp/test1的指针。存放结果的字符串的内存空间是动态分配的，并可通过调用free释放。另外，环境变量<code>PX_IPC_NAME</code>能够覆盖默认目录。</p>
<p>下面给出了px_ipc_name函数的实现。</p>
<figure class="highlight c"><figcaption><span>lib/px_ipc_name.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/* include px_ipc_name */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>	<span class="meta-string">&quot;unpipc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *</span></span><br><span class="line"><span class="function"><span class="title">px_ipc_name</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>	*dir, *dst, *slash;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( (dst = <span class="built_in">malloc</span>(PATH_MAX)) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 4can override default directory with environment variable */</span></span><br><span class="line">    <span class="keyword">if</span> ( (dir = getenv(<span class="string">&quot;PX_IPC_NAME&quot;</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>	POSIX_IPC_PREFIX</span></span><br><span class="line">        dir = POSIX_IPC_PREFIX;		<span class="comment">/* from &quot;config.h&quot; */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        dir = <span class="string">&quot;/tmp/&quot;</span>;				<span class="comment">/* default */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">/* 4dir must end in a slash */</span></span><br><span class="line">    slash = (dir[<span class="built_in">strlen</span>(dir) - <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    <span class="built_in">snprintf</span>(dst, PATH_MAX, <span class="string">&quot;%s%s%s&quot;</span>, dir, slash, name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(dst);			<span class="comment">/* caller can free() this pointer */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* end px_ipc_name */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *</span></span><br><span class="line"><span class="function"><span class="title">Px_ipc_name</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>	*ptr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( (ptr = px_ipc_name(name)) == <span class="literal">NULL</span>)</span><br><span class="line">        err_sys(<span class="string">&quot;px_ipc_name error for %s&quot;</span>, name);</span><br><span class="line">    <span class="keyword">return</span>(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note primary"><p>snprintf函数与sprintf函数的区别在于前者能检查目标缓存区是否溢出，snprintf函数第二个参数是目标缓冲区的大小。</p>
</div>

<h1 id="2-3-创建或打开IPC对象"><a href="#2-3-创建或打开IPC对象" class="headerlink" title="2.3 创建或打开IPC对象"></a>2.3 创建或打开IPC对象</h1><p>mq_open、sem_open和shm_open这三个创建或打开一个IPC对象的函数，它们的名为oflag的第二个参数指定应该怎么打开所请求的对象。这个标准open函数的第二个参数类似。下图给出了可组合构成该参数的各种常值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-08/20200801095840.png"></p>
<p>前三行指定应该怎样打开对象：只读、只写或读写。消息队列能以其中任何一种模式打开，信号量的打开不指定任何模式（任意信号量操作，都需读写要访问权限），共享内存区对象则不能以只写模式打开。</p>
<p>后四行的标志是可选的。</p>
<div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><a href="#1-1">O_CREAT</a></li><li class="tab"><a href="#1-2">O_EXCL</a></li><li class="tab"><a href="#1-3">O_NONBLOCK</a></li><li class="tab"><a href="#1-4">O_TRUNC</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1-1"><p>若不存在则创建由函数第一个参数所指定名字的消息队列、信号量或共享内存区对象，同时检查O_EXCL标志。</p>
<p>创建一个新的消息队列、信号量或共享内存区对象时，至少需要另外一个称为<code>mode</code>的参数。该参数指定权限位，它是由下图中所示常值按位或组成的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-08/20200801101351.png"></p>
<p>同新创建的文件一样，当创建一个新的消息队列、信号量或共享内存区对象时，其用户ID被置为当前进程的有效用户ID。信号量和共享内存区对象的组ID被置为当前进程的而有效组ID或某个系统默认组ID。新消息队列对象的组ID被置为当前进程的有效组ID。</p>
<div class="note warning"><p>这三种IPC对象在设置组ID上存在的差异多少有点奇怪。由open新创建的文件组ID或者是当前进程的有效组ID或是该文件所在目录的组ID，但是IPC函数不能假定系统为IPC对象创建了一个在文件系统中的路径。</p>
</div></div><div class="tab-pane" id="1-2"><p>如果该参数和O_CREAT参数一起指定，那么IPC函数只在所指定名字的消息队列、信号量或共享内存区对象不存在时创建新的对象。如果该对象已经存在，而且指定了O_CREAT | O_EXCL，那么返回一个EEXIST错误。</p>
<p>考虑到其他进程的存在，检查所指定名字的消息队列、信号量或共享内存区对象的存在与否和创建它（如果它不存在）这两步必须是原子的。</p></div><div class="tab-pane" id="1-3"><p>该标志使一个消息队列在队列为空时的读或队列填满时的写不被阻塞。</p></div><div class="tab-pane" id="1-4"><p>如果以写模式打开了一个已存在的共享内存区对象，那么该标志将使得该对象的长度被截成0.</p></div></div></div>

<p>图2.5给出了打开一个IPC对象的真正逻辑流程。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-08/20200801104130.png"></p>
<p><strong>注</strong>：如图2.6所示，如果oflag标志只指定O_CREAT，就无法区分是创建了一个新对象，还是引用了一个已经存在的对象。</p>
<h1 id="2-4-IPC权限"><a href="#2-4-IPC权限" class="headerlink" title="2.4 IPC权限"></a>2.4 IPC权限</h1><p>新的消息队列、有名信号量或共享内存区对象是由其oflag参数中含有O_CREAT标志的mq_open、sem_open或shm_open函数创建的。如图2-4所注，权限位与这些类型的每个对象相关联，就像它们与每个Unix文件一样。<br><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-08/20200801105611.png"></p>
]]></content>
      <categories>
        <category>unix</category>
      </categories>
      <tags>
        <tag>unix</tag>
      </tags>
  </entry>
  <entry>
    <title>unix网络编程2-IPC-1-简介</title>
    <url>/posts/c4f5fabe/</url>
    <content><![CDATA[<p>继续学习《unix网络编程卷2: 进程间通信》，本篇主要记录第一章简介的相关内容。</p>
<span id="more"></span>

<h1 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h1><p>在unix操作系统的历史中，消息传递经历了如下几个阶段。</p>
<ul>
<li><p>管道</p>
<p>管道是第一个广泛使用的IPC形式，<em>既可在程序中使用，也可以在shell中使用</em>。管道的问题在于它们只能在<strong>具有共同祖先（指父子进程关系）的进程间使用</strong>，不过该问题已随<em>有名管道</em>即FIFO的引入解决了。</p>
</li>
<li><p>System V 消息队列</p>
<p>它可以用在同一主机上有亲缘关系或无亲缘关系的进程之间。</p>
<div class="note info"><p><em>有亲缘关系</em> 意味着进程具有共同的祖先，这些有亲缘关系的进程是从祖先进程经过一次或多次fork派生来的。考虑到IPC，<font color="red">父进程可以在调用fork前建立某种形式的IPC(如管道或消息队列)，因为它知道随后派生的两个子进程将穿越(across) fork继承该IPC对象</font>。</p>
<p>从理论上说，所有Unix进程与init进程都有亲缘关系，它是在系统自举(reboot)时启动所有初始化进程的祖先进程。</p>
<p>从实践上说，进程的亲缘关系开始于一个登录shell(称为一个会话)以及由该shell派生的所有进程。</p>
</div>
</li>
<li><p>Posix消息队列</p>
<p>它可以用在同一主机上有亲缘关系或无亲缘关系的进程之间。</p>
</li>
<li><p>远程过程调用（RPC）</p>
<p>它是从一个系统（客户主机）上某个程序调用另一个系统（服务器主机）上某个函数的一种方法，是<em>作为显式网络编程</em> 的一种替换方法开发的。</p>
<p>既然客户和服务器之间通常传递一些信息（被调用的函数的参数和返回值），而且RPC可以用在同一主机上的客户和服务器之间，因此可以认为RPC是另一种形式的消息传递。</p>
</li>
</ul>
<br>

<p>unix系统中各种同步形式的演变如下：</p>
<ul>
<li>记录上锁（record locking）</li>
<li>System V 信号量</li>
<li>Posix 信号量</li>
<li>互斥锁（mutex）和条件变量</li>
<li>读写锁（read-write lock）</li>
</ul>
<h1 id="1-2-进程、线程与信息共享"><a href="#1-2-进程、线程与信息共享" class="headerlink" title="1.2 进程、线程与信息共享"></a>1.2 进程、线程与信息共享</h1><p>下图介绍了Unix进程间共享信息的三种方式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-06/20200731210646.png"></p>
<ol>
<li><strong>左边的两个进程共享的信息在文件系统中某个文件中。为访问这些信息</strong>，<strong>每个进程都需要穿越内核</strong>（例如read、write、lseek等）。当一个文件有待更新时，某种形式的同步是必要的，这样既可保护多个写入者，防止相互串扰，也可以保护一个或多个读出者，防止写入者的干扰。</li>
<li><strong>中间的两个进程共享驻留于内核中的某些信息</strong>。管道是这种共享类型的一个例子，System V 消息队列和System V信号量也是。现在访问共享信息的每次操作涉及对内核的一次系统调用。</li>
<li><strong>右边的两个进程有一个双方都能访问的共享内存区</strong>。每个进程一旦设置好该共享内存区，就能根本不涉及内核而访问其中的数据，共享该内存区的进程需要某种形式的<strong>同步</strong>。</li>
</ol>
<p><strong>注</strong>：上面为了简述只写了两个进程，技术上支持任意数目的进程。</p>
<div class="note info"><p>从IPC角度看，一个给定的进程内所有线程共享相同的全局变量（即共享内存区的概念对这种模型来说是内在的）。然而我们必须关注的是各个线程之间对全局数据的同步访问，同步尽管不是一种明确的IPC形式，但它却是伴随许多形式的IPC使用，以控制对某些共享数据的访问。</p>
<p>本书主要讲述进程间的IPC和线程间的IPC。假设一个线程环境：如果管道为空，调用线程就阻塞在它的read调用上，直到某个线程往该管道写入数据。在支持线程的系统上，只有对空管道调用read的那个线程阻塞，同一进程中的其余线程才可以继续执行。向该空管道写数据的工作既可以由同一进程中的另一个线程去做，也可以由另一个进程中的某个线程去做。</p>
</div>

<h1 id="1-3-IPC对象的持续性"><a href="#1-3-IPC对象的持续性" class="headerlink" title="1.3 IPC对象的持续性"></a>1.3 IPC对象的持续性</h1><p>任意类型的IPC对象的**持续性(persistence)**：该类型的一个对象一直存在多长时间。</p>
<p>下图展示了三种类型的持续性：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731212829.png"></p>
<ol>
<li><p>随进程持续的(process-persistent)</p>
<p>IPC对象一直存在到打开该对象的最后一个进程关闭该对象为止。例如管道和IFIO就是这种对象。</p>
</li>
<li><p>随内核持续的(kernel-persistent)</p>
<p>IPC对象一直存在到内核重新自举(reboot)或显示删除该对象为止。例如System V的消息队列、信号量和共享内存区就是此类对象。<font color="deepskyblue">Posix的消息队列、信号量和共享内存区必须至少是随内核持续的，但也可以是随文件系统持续的</font></p>
</li>
<li><p>随文件系统持续的(filesystem-persistent)</p>
<p>IPC对象一直存在到显示删除该对象为止。即使内核重新自举了，该对象还是保持其值。Posix消息队列、信号量和共享内存区如果是使用映射文件实现的（非必需条件），那么他们就是filesystem-persistent的。</p>
</li>
</ol>
<p>在定义一个IPC对象的持续性时我们必须小心，因为它并不总是像看起来的那样。</p>
<div class="tabs" id="例"><ul class="nav-tabs"><li class="tab active"><a href="#例-1">例 1</a></li><li class="tab"><a href="#例-2">例 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="例-1"><p>管道内的数据是在内核中维护的，但管道具备的是随进程的持续性而不是随内核的持续性，最后一个将某个管道打开着用于读进程关闭该管道后，内核将丢弃所有的数据并删除数据。</p></div><div class="tab-pane" id="例-2"><p>尽量FIFO在文件系统中有名字，它们也只是具备随进程的持续性，因为最后一个将某个FIFO打开着的进程关闭该FIFO后，FIFO中的数据都被丢弃。</p></div></div></div>

<p>下图展示了本书中讲述的各种IPC对象的持续性。</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab"><a href="#tab1-1">图1</a></li><li class="tab active"><a href="#tab1-2">图2</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab1-1"><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731215043.png"></p></div><div class="tab-pane active" id="tab1-2"><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731215227.png"></p></div></div></div>

<p>虽然列表中没有任何类型的IPC具备随文件系统的持续性，但是之前说过三种类型的posix IPC可能会具备该持续性，这取决于它们的实现。</p>
<p>显然向一个文件写入数据提供了随文件系统的持续性，但这通常不作为一种IPC形式的调用。<strong>多数形式的IPC并没有在系统重新自举后继续存在的打算，因为进程不可能跨越重新自举继续存活</strong>。</p>
<p>对于一种给定形式的IPC，要求它具备文件系统的持续性可能会使其性能降低，而IPC的一个设计目标是高性能。</p>
<h1 id="1-4-名字空间-name-spaces"><a href="#1-4-名字空间-name-spaces" class="headerlink" title="1.4 名字空间(name spaces)"></a>1.4 名字空间(name spaces)</h1><p>当<strong>两个或多个无亲缘关系</strong>的进程使用某种类型的IPC对象来彼此交换信息时，该IPC对象必须有一个某种形式的名字(name)或标识符(identifier)，这样其中一个进程（往往是服务器）可以创建该IPC对象，其余进程则可以指定同一个IPC对象。</p>
<p>管道没有名字（因此不能用于无亲缘关系的进程间），但是FIFO有一个在文件系统中的Unix路径名作为其标识符（因此可以用于无亲缘关系的进程间）。</p>
<p>对于一种给定的IPC类型，其可能的名字的集合称为它的<strong>名字空间</strong>。</p>
<p>名字空间非常重要，因为对于除普通管道外的所有形式的IPC来说，名字是客户与服务器彼此连接以交换消息的手段。</p>
<p>下图给出了各种形式IPC的名字空间。</p>
<div class="tabs" id="tabs2"><ul class="nav-tabs"><li class="tab"><a href="#tabs2-1">图1</a></li><li class="tab active"><a href="#tabs2-2">图2</a></li></ul><div class="tab-content"><div class="tab-pane" id="tabs2-1"><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731221230.png"></p></div><div class="tab-pane active" id="tabs2-2"><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731221326.png"></p></div></div></div>



<p>尽管posix.1标准化了信号量，它们仍然是可选的特性。每种特性有<strong>强制</strong>，<strong>未定义</strong>，<strong>可选</strong>三种选择，如下图所示，对于可选的特性，指出了每种特性受支持是(通常在&lt;unistd.h&gt;头文件中)定义的常值的名字，例如_POSIX_THREAD。</p>
<div class="tabs" id="tabs3"><ul class="nav-tabs"><li class="tab active"><a href="#tabs3-1">图1</a></li><li class="tab"><a href="#tabs3-2">图2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tabs3-1"><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731222252.png"></p></div><div class="tab-pane" id="tabs3-2"><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731222354.png"></p></div></div></div>



<h1 id="1-5-fork、exec和-exit对IPC对象的影响"><a href="#1-5-fork、exec和-exit对IPC对象的影响" class="headerlink" title="1.5 fork、exec和_exit对IPC对象的影响"></a>1.5 fork、exec和_exit对IPC对象的影响</h1><p>我们需要理解<code>fork</code>、<code>exec</code>和 <code>_exit</code>函数对于所讨论的各种形式的IPC对象的影响，_exit使用exit调用的一个函数。</p>
<div class="tabs" id="tabs5"><ul class="nav-tabs"><li class="tab"><a href="#tabs5-1">图1</a></li><li class="tab active"><a href="#tabs5-2">图2</a></li></ul><div class="tab-content"><div class="tab-pane" id="tabs5-1"><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731223454.png"></p></div><div class="tab-pane active" id="tabs5-2"><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731223326.png"></p></div></div></div>



<h1 id="1-6-出错处理：包裹函数"><a href="#1-6-出错处理：包裹函数" class="headerlink" title="1.6 出错处理：包裹函数"></a>1.6 出错处理：包裹函数</h1><p>包裹函数包装了实际调用的函数，运行实际调用的函数并检测其返回值，遇到错误时终止进程，在一定程度上减少了代码量。本书命名约定是将第一个字母改为大写字母。如:</p>
<figure class="highlight c"><figcaption><span>lib/wrapunix.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">Sem_post</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sem_post(sem) == <span class="number">-1</span>)</span><br><span class="line">        err_sys(<span class="string">&quot;sem_post error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731225213.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731225254.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-07/20200731225138.png"></p>
]]></content>
      <categories>
        <category>unix</category>
      </categories>
      <tags>
        <tag>unix</tag>
      </tags>
  </entry>
  <entry>
    <title>修改linux服务器默认编码为utf8</title>
    <url>/posts/6c7dab33/</url>
    <content><![CDATA[<blockquote>
<p>修改linux默认编码</p>
</blockquote>
<span id="more"></span>
<h2 id="1-修改-etc-profile文件"><a href="#1-修改-etc-profile文件" class="headerlink" title="1. 修改/etc/profile文件"></a>1. 修改/etc/profile文件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<p>在文件最后一行添加<code>export LANG=zh_CN.UTF-8</code></p>
<h2 id="2-使配置生效"><a href="#2-使配置生效" class="headerlink" title="2. 使配置生效"></a>2. 使配置生效</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<h2 id="3-验证结果"><a href="#3-验证结果" class="headerlink" title="3. 验证结果"></a>3. 验证结果</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">locale</span></span><br></pre></td></tr></table></figure>
<p>结果显示如下：<br><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415172159.png"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>xshell密钥登录服务器的配置过程</title>
    <url>/posts/344ac519/</url>
    <content><![CDATA[<ul>
<li>转载自<a href="https://cloud.tencent.com/developer/article/1142509">腾讯云</a><span id="more"></span>
</li>
</ul>
<hr>
<p>我们使用 Linux 服务器不管做网站、项目、服务都需要一个安全性的概念，而默认是使用密码来登录的，普通的项目也就够用了。不过现在网络上鱼龙混杂，各路黑客无时无刻不在撸服务器，用各种软件扫描网络上的弱口令、端口等，为了提高 Linux 服务器的安全我们有必要在 SSH 登录界面设置密钥，提高破解难度，也就相对提高了服务器安全性。</p>
<p>一般我们用 SSH 软件登录服务器的时候都是用 root 账号和密码进行连接，其实这样是不安全的，使用 SSH key 和密码同时登录，这样才不会被轻易破解，也就提高了服务器 SSH 登录安全性。本文我们介绍 SSH key 密钥登录 Linux 服务器的配置过程，平时多使用 Xshell SSH 登录，相对来说它的操作界面更友好一些。</p>
<h1 id="一、生成密钥"><a href="#一、生成密钥" class="headerlink" title="一、生成密钥"></a>一、生成密钥</h1><p>1、点击 Xshell 的工具-新建用户密钥生成向导，开始生成密钥。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-12/U4MdoACLrsPlbEK.png"></p>
<p>2、弹出页面的密钥类型和密钥长度默认不要修改，点击下一步，看到程序生成 2048 位 RSA 密钥，点击下一步，输入密钥名称和登录密码。密钥名称随便起一个，密码是用来和密钥一起双重加密的，哪怕密钥被盗了，没有密码还是无法 SSH 登陆到服务器上。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-12/69OG1hfvgUXNuI8.png"></p>
<p>3、点击下一步，把密钥另存为文件保存到本地电脑。这个是公钥。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-12/VBXkQlmLEa15s7U.png"></p>
<p>另外在 Xshell 的工具&gt;&gt;用户密钥管理者里面能够看到对应的私钥，私钥最好另存到本地电脑和邮箱中，这点很重要。</p>
<h1 id="二、上传公钥到-VPS-服务器"><a href="#二、上传公钥到-VPS-服务器" class="headerlink" title="二、上传公钥到 VPS 服务器"></a>二、上传公钥到 VPS 服务器</h1><p>1、建立文件夹和文件。创建一个.ssh 目录，这个目录具有隐藏属性。命令如下：</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="built_in">mkdir</span> .ssh</span><br></pre></td></tr></table></figure>
<p>用 sftp 软件连接到 VPS 服务器上，把上面保存的公钥上传到.ssh 目录中，重命名为 authorized_keys。</p>
<p>2、设置权限。命令如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">700</span> .ssh</span><br><span class="line"></span><br><span class="line"><span class="attribute">chmod</span> <span class="number">600</span> .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>3、编辑 sshd_config 配置文件。命令如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>去掉#RSAAuthentication yes    #PubkeyAuthentication yes    #AuthorizedKeysFile .ssh/authorized_keys 前面的#，含义分别是开启 RSA 密钥验证，公钥验证功能，设置公钥验证文件的路径。</p>
<p>把 PasswordAuthentication yes 替换为 PasswordAuthentication no，禁止使用密码登录。</p>
<p>改完后如下图所示就对了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-12/23ExRXnYfwijz8g.png"></p>
<p>4、重启 sshd 服务。命令如下：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service sshd restart</span></span><br></pre></td></tr></table></figure>
<p>5、用密钥连接 VPS 服务器</p>
<p>打开 Xshell 进入连接&gt;&gt;用户身份验证，选择 Public Key，用户密钥选择已经建立好的私钥，输入上面你自己设置的私钥密码。点击连接就可以实现密钥登陆 VPS 服务器了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-12/wyuNMzCJmIpt1ES.png"></p>
<p>为了验证密钥是否生效，接下来我把登陆方法改成 Password 再试，就无法登陆并跳转到密钥登陆界面，说明这时候原来的密码登陆已经失效了，再输入密钥的密码登陆成功。</p>
<p>老魏在配置密钥过程中遇到了“所选的用户密钥未在远程主机上注册”的情况导致密钥登陆失败，是因为一开始用命令创建 authorized_keys 并保存密钥，网络上很多文章都是用这个方法，但在我这里就不好使。后来改用本地 SFTP 上传密钥的方式解决了这个问题。别人的东西不一定适合你的具体情况，老魏写的教程是亲自测试一下才知道是怎么回事，才能发表出来给大家参考。</p>
<p>最后总结：</p>
<p>1、为了提高网站、项目、服务器的安全性可以考虑使用密钥登陆方法，也可以不设置密钥密码，这时候只用密钥就可以登录服务器了（用密码是双重加密，即使别人搞到了密钥也无法登陆）。</p>
<p>2、私钥一定要另存到本地电脑和邮箱中，因为换一台电脑没有私钥（或者私钥丢失）就无法 SSH 登陆服务器了。</p>
<p>3、SSH 密钥登陆服务器的方法确实能够提高 SSH 连接的安全性，建议大家考虑一下这个方法。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器禁止被ping</title>
    <url>/posts/6898a3ea/</url>
    <content><![CDATA[<blockquote>
<p>利用服务器搭建网站之后，一般都会担心自己的服务器被攻击，写这个旨在记录一下一些防护措施。</p>
<span id="more"></span>
</blockquote>
<h1 id="禁止ping服务器"><a href="#禁止ping服务器" class="headerlink" title="禁止ping服务器"></a>禁止ping服务器</h1><blockquote>
<p>网站的攻击一般是从ping开始的，黑客攻击网站前会先ping下服务器看其是否在线，所以如果服务器禁止ping，可以有效减少服务器被攻击次数。Centos系统默认是允许ping的，如你有服务器root账户管理权限，可以通过修改Centos系统内核参数永久禁止ping。</p>
</blockquote>
<p>Linux默认是允许Ping响应的，系统是否允许Ping由2个因素决定的：</p>
<ol>
<li>内核参数</li>
<li>防火墙。<br>需要2个因素同时允许才能允许Ping，2个因素有任意一个禁Ping就无法Ping。<br>
具体的配置方法如下：

</li>
</ol>
<p><i class="fa fa-pencil"></i><strong>内核参数设置</strong></p>
<ol>
<li>临时允许/禁止PING设置 <figure class="highlight bash"><figcaption><span>临时设置PING操作的命令为：</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#echo 0 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all //允许PING</span></span><br><span class="line"><span class="comment">#echo 1 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all //禁止PING</span></span><br></pre></td></tr></table></figure></li>
<li>永久允许/禁止Ping设置<br> 在/etc/sysctl.conf 中增加一行 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net.ipv4.icmp_echo_ignore_all=1 //禁止PING</span><br><span class="line">net.ipv4.icmp_echo_ignore_all=1 //允许PING</span><br></pre></td></tr></table></figure>
 如果已经有net.ipv4.icmp_echo_ignore_all这一行了，直接修改=号后面的值即可的（0表示允许，1表示禁止）。<br> 修改完成后执行下面语句使配置生效 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

</li>
</ol>
<br>

<hr>
<p><i class="fa fa-pencil"></i><strong>防火墙设置（注：此处的方法的前提是内核配置是默认值，也就是没有禁止Ping</strong></p>
<pre><code> 这里以Iptables防火墙为例，其他防火墙操作方法可参考防火墙的官方文档。

 1、允许PING设置      

    iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT

    iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT

   或者也可以临时停止防火墙操作的。

    service iptables stop

 2、禁止PING设置

    iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP
</code></pre>
<p>参考博客：<a href="https://www.cnblogs.com/chenshoubiao/p/4781016.html">https://www.cnblogs.com/chenshoubiao/p/4781016.html</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>油猴脚本打印博客文章</title>
    <url>/posts/41f2aca5/</url>
    <content><![CDATA[<blockquote>
<p>写了一个简单的油猴脚本，打印平常阅读的博客文章</p>
</blockquote>
<p>目前支持的网站如下：</p>
<ul>
<li>CSDN</li>
<li>知乎</li>
<li>简书</li>
<li>SegmentFault</li>
</ul>
<span id="more"></span>

<p>博客园由于主题太多，无法使用统一方法打印。</p>
<p>脚本内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         打印CSDN、知乎、简书、SF文章</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  CSDN、知乎、简书、SegmentFault</span></span><br><span class="line"><span class="comment">// @author       kervias</span></span><br><span class="line"><span class="comment">// @match        https://zhuanlan.zhihu.com/p/*</span></span><br><span class="line"><span class="comment">// @match        https://blog.csdn.net/*/article/details/*</span></span><br><span class="line"><span class="comment">// @match        https://csdnnews.blog.csdn.net/article/details/*</span></span><br><span class="line"><span class="comment">// @match        https://www.jianshu.com/p/*</span></span><br><span class="line"><span class="comment">// @match        https://segmentfault.com/a/*</span></span><br><span class="line"><span class="comment">// @require      https://cdn.bootcss.com/jquery/3.5.1/jquery.min.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @grant        unsafeWindow</span></span><br><span class="line"><span class="comment">// @grant        GM_openInTab</span></span><br><span class="line"><span class="comment">// @grant        GM.openInTab</span></span><br><span class="line"><span class="comment">// @grant        GM_getValue</span></span><br><span class="line"><span class="comment">// @grant        GM.getValue</span></span><br><span class="line"><span class="comment">// @grant        GM_setValue</span></span><br><span class="line"><span class="comment">// @grant        GM.setValue</span></span><br><span class="line"><span class="comment">// @grant        GM_xmlhttpRequest</span></span><br><span class="line"><span class="comment">// @grant        GM.xmlHttpRequest</span></span><br><span class="line"><span class="comment">// @grant        GM_registerMenuCommand</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> $ = $ || <span class="built_in">window</span>.$;</span><br><span class="line">    <span class="keyword">var</span> CSDN_PRINT = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#side&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;#comment_title, #comment_list, #comment_bar, #comment_form, .announce, #ad_cen, #ad_bot&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;.nav_top_2011, #header, #navigator&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;.csdn-side-toolbar,.template-box,.reward-user-box&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;.p4course_target, .comment-box, .recommend-box, #csdn-toolbar, #tool-box,#dmp_ad_58&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;aside&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;.tool-box&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;main&quot;</span>).css(<span class="string">&#x27;display&#x27;</span>,<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">        $(<span class="string">&quot;.left-toolbox&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;#mainBox&quot;</span>).removeClass();</span><br><span class="line">        $(<span class="string">&quot;#mainBox&quot;</span>).parent().removeClass();</span><br><span class="line">        $(<span class="string">&#x27;body&#x27;</span>).attr(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;position: absolute;left: 0px;right: 0px;background-color: white&quot;</span>)</span><br><span class="line">        $(<span class="string">&#x27;main&#x27;</span>).attr(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;position: absolute;left: 0px;right: 0px;margin-bottom: 0px&quot;</span>);</span><br><span class="line">        $(<span class="string">&#x27;main div.blog-content-box&#x27;</span>).attr(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;padding-bottom: 0px&quot;</span>);</span><br><span class="line">        $(<span class="string">&quot;.blog-footer-bottom&quot;</span>).remove();</span><br><span class="line">        <span class="comment">//$(&#x27;.htmledit_views p&#x27;).remove();</span></span><br><span class="line">        <span class="built_in">window</span>.print();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ZHIHU_PRINT = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.ColumnPageHeader&quot;</span>).remove();</span><br><span class="line">        <span class="comment">//$(&quot;.PostIndex-Contributions&quot;).remove();</span></span><br><span class="line">        $(<span class="string">&quot;.Recommendations-Main&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;.Comments-container&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;.ContentItem-actions&quot;</span>).parent().remove();</span><br><span class="line">        $(<span class="string">&quot;.Zi--BackToTop&quot;</span>).remove();</span><br><span class="line">        <span class="built_in">window</span>.print();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> JIANSHU_PRINT = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;header&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;aside&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;footer, footer+div&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;#note-page-comment, section:gt(0), [role=&#x27;button&#x27;], .ant-back-top, .anticon-caret-up&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;svg&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;section&quot;</span>).attr(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;position: absolute;left: 0px;right: 0px;margin-bottom: 0px&quot;</span>);</span><br><span class="line">        $(<span class="string">&quot;article&quot;</span>).nextAll().remove();</span><br><span class="line">        <span class="built_in">window</span>.print();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SF_PRINT = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#sf-header, #comment-area, footer, .text-center, #fixedTools&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;article&quot;</span>).nextAll().remove();</span><br><span class="line">        $(<span class="string">&quot;div.row&quot;</span>).children().eq(<span class="number">1</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;div.row &gt; div &gt; div&quot;</span>).eq(<span class="number">0</span>).nextAll().remove();</span><br><span class="line">        $(<span class="string">&quot;#sf-article_title h5&quot;</span>).remove();</span><br><span class="line">        $(<span class="string">&quot;div.row&quot;</span>).attr(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;position: absolute;left: 0px;right: 0px;margin-bottom: 0px&quot;</span>);</span><br><span class="line">        <span class="built_in">window</span>.print();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> domain = <span class="built_in">document</span>.domain;</span><br><span class="line">    <span class="keyword">if</span>(domain.endsWith(<span class="string">&#x27;zhihu.com&#x27;</span>))&#123; <span class="comment">// 双击标题打印文章</span></span><br><span class="line">        $(<span class="string">&quot;.Post-Title&quot;</span>).on(<span class="string">&#x27;dblclick&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            ZHIHU_PRINT();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(domain.endsWith(<span class="string">&#x27;csdn.net&#x27;</span>))&#123; <span class="comment">// 双击标题打印文章</span></span><br><span class="line">        $(<span class="string">&quot;#articleContentId&quot;</span>).on(<span class="string">&#x27;dblclick&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            CSDN_PRINT();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(domain.endsWith(<span class="string">&#x27;jianshu.com&#x27;</span>))&#123; <span class="comment">// 双击标题打印文章</span></span><br><span class="line">        $(<span class="string">&quot;section &gt; h1&quot;</span>).on(<span class="string">&#x27;dblclick&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">           JIANSHU_PRINT();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(domain.endsWith(<span class="string">&#x27;segmentfault.com&#x27;</span>))&#123; <span class="comment">// 点击标题后按钮打印文章</span></span><br><span class="line">        <span class="keyword">var</span> cont = $(<span class="string">&#x27;&lt;h5 style=&quot;display:inline&quot;&gt;&lt;button id=&quot;tm_print&quot;&gt;打印&lt;/button&gt;&lt;/h5&gt;&#x27;</span>);</span><br><span class="line">        $(<span class="string">&quot;#sf-article_title&quot;</span>).append(cont);</span><br><span class="line">        $(<span class="string">&quot;#sf-article_title h5&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">           SF_PRINT();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Tampermonkey</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建文件服务器</title>
    <url>/posts/3937af73/</url>
    <content><![CDATA[<blockquote>
<p>记录搭建文件服务器的几种方式</p>
</blockquote>
<span id="more"></span>

<h1 id="一、配置nginx文件搭建简单文件服务器"><a href="#一、配置nginx文件搭建简单文件服务器" class="headerlink" title="一、配置nginx文件搭建简单文件服务器"></a>一、配置nginx文件搭建简单文件服务器</h1><ol>
<li>安装</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建并编辑配置文件</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">touch <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span>file_server.conf</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置文件内容模板</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">2020</span>; </span><br><span class="line">  <span class="attribute">server_name</span> localhost; <span class="comment">#ip或者服务器的域名</span></span><br><span class="line">  <span class="attribute">charset</span> utf-<span class="number">8</span>; <span class="comment"># 避免中文乱码 </span></span><br><span class="line">  <span class="attribute">root</span> /var/file_server; <span class="comment"># 存放文件的目录 </span></span><br><span class="line">  <span class="attribute">location</span> / &#123; </span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>; <span class="comment"># 索引 </span></span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">on</span>; <span class="comment"># 显示文件大小 </span></span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>; <span class="comment"># 显示文件时间 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动nginx</li>
</ol>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> nginx</span><br></pre></td></tr></table></figure>

<p>创建成功演示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-05/20200821000816.png"></p>
<h1 id="二、使用github项目中的FileBrowser"><a href="#二、使用github项目中的FileBrowser" class="headerlink" title="二、使用github项目中的FileBrowser"></a>二、使用github项目中的FileBrowser</h1><p><strong>项目地址</strong>: <a href="https://github.com/filebrowser/filebrowser/">https://github.com/filebrowser/filebrowser/</a></p>
<p>由于docker配置比较简单并且易于管理，所以选择docker安装filebrowser。</p>
<p>命令参考：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -v <span class="regexp">/var/</span>file_server<span class="regexp">/:/</span>srv \</span><br><span class="line">    -v <span class="regexp">/var/</span>file_server_log<span class="regexp">/filebrowser.db:/</span>database.db \</span><br><span class="line">    -v <span class="regexp">/var/</span>file_server_log<span class="regexp">/.filebrowser.json:/</span>.filebrowser.json \</span><br><span class="line">    -p <span class="number">2020</span>:<span class="number">80</span> \</span><br><span class="line">    -d \</span><br><span class="line">    filebrowser/filebrowser</span><br></pre></td></tr></table></figure>

<p>上述命令指定映射的需要显示文件的系统路径为<code>/var/file_server/</code></p>
<p>运行上述命令前，需要将其中<code>/var/file_server_log/filebrowser.db</code>和<code>/var/file_server_log/.filebrowser.json</code>这两个文件先创建好，否则会报错。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">touch <span class="regexp">/var/</span>file_server_log/filebrowser.db</span><br><span class="line">touch <span class="regexp">/var/</span>file_server_log/.filebrowser.json</span><br></pre></td></tr></table></figure>

<p>同时，.filebrowser.json 内容需要初始化一下，官方给出的内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="attr">&quot;baseURL&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;log&quot;</span>: <span class="string">&quot;stdout&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;/database.db&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;/srv&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建成功演示如下图，第一次登陆时账号密码可以任意填写，作为新建的管理员账户。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-08/20200821000901.png"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>文件服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>在阿里服务器上利用宝塔面板+GIT搭建hexo博客</title>
    <url>/posts/3739s4/</url>
    <content><![CDATA[<blockquote>
<p>看网上大多数教程都要敲许多命令, 但是找到了一篇文章, 利用宝塔面板搭建hexo博客, 配合一点自己的理解, 最终终于搭建成功了.文中的一些解释性的话是按照自己的理解来写的, 可能有些错误, 但是步骤是对的.</p>
</blockquote>
<blockquote>
<p>参考文章: <a href="https://www.leaflag.cn/2019/02/22/%E8%85%BE%E8%AE%AF%E4%BA%91%E9%83%A8%E7%BD%B2Hexo/">腾讯云宝塔面板搭建hexo博客</a></p>
</blockquote>
<span id="more"></span>

<h2 id="一-环境介绍"><a href="#一-环境介绍" class="headerlink" title="一. 环境介绍"></a>一. 环境介绍</h2><pre><code>1. 服务器
    介绍: 阿里学生云轻量型应用服务器
    配置: 1核2G, 40GSSD, 5M带宽
    系统: CentOS Linux 7.6.1810 (Core)

2. 服务器软件
(1) nginx-1.15(通过宝塔面板安装)
(2) git-1.8.3.1

3. 宝塔插件
 - 宝塔SSH终端 1.0(可以用xshell等工具替代)
 
4. 域名

5. 本地需要安装git, 具体一些初始化配置可以看其他教程

6. 服务器防火墙设置
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410205410.png"></p>
<h2 id="二-服务器git配置"><a href="#二-服务器git配置" class="headerlink" title="二. 服务器git配置"></a>二. 服务器git配置</h2><blockquote>
<p>现在需要在服务器内创建一个git仓库, 本地git推送时需要推送到这里</p>
</blockquote>
<ul>
<li><p>第一步: 创建文件夹</p>
<ol>
<li>通过宝塔面板<strong>文件</strong>模块在home文件夹下新建git，hexo这两个文件夹</li>
<li>当然, 可以通过命令行方式创建亦可</li>
</ol>
</li>
<li><p>第二步: 创建git仓库</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">[服务器命令]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span>   <span class="string">//</span>这里是因为默认执行目录是root，需要返回根目录</span><br><span class="line"><span class="keyword">cd</span> home</span><br><span class="line"><span class="keyword">cd</span> git</span><br><span class="line">git init <span class="params">--bare</span> hexoBlog.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三步: 指定本地git推送到服务器的路径<br>  进入/home/git/hexoBlog.git/hooks,然后新建一个文件：post-receive，不要后缀名。然后编辑它，加入如下两条代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/home/hexo --git-dir=/home/git/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure>
<p>  这里的目的是对于hexoBlog.git仓库, 指定本地git推送到该仓库时, <strong>文件保存在/home/hexo目录下</strong></p>
</li>
<li><p>第三步: 更改post-receive文件权限</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[服务器命令]</span><br><span class="line"></span><br><span class="line">chmod +x <span class="regexp">/home/gi</span>t<span class="regexp">/hexoBlog.git/</span>hooks/post-receive</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三-配置Nginx"><a href="#三-配置Nginx" class="headerlink" title="三. 配置Nginx!"></a>三. 配置Nginx!</h2><blockquote>
<p> 主要修改nginx.conf文件, 指定网站路径, 以及服务器对应端口等</p>
</blockquote>
<p>利用宝塔面板安装的nginx默认的nginx配置文件在根目录-&gt;www-&gt;serve-&gt;nginx-&gt;conf下，找到nginx.conf，编辑它，如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410205433.png"></p>
<ol>
<li><p>listen<br> 监听端口, 如果网站需要http访问则需要设置为80, 如果需要https访问, 则需要设置为443(端口号具体看上面环境配置部分的截图)</p>
</li>
<li><p>server_name<br> 域名</p>
</li>
<li><p>SSL证书配置(如果用Http访问就不用设置此项)<br>注意其中有些内容需要修改</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">ssl_certificate</span> path_pem; //path_pem -&gt; SSL证书.pem文件在服务器中的地址</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> path_key; //path_key -&gt; SSL证书.key文件在服务器中的地址</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">5</span>m;</span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv<span class="number">1</span> TLSv<span class="number">1</span>.<span class="number">1</span> TLSv<span class="number">1</span>.<span class="number">2</span>;    # 按照这个协议配置</span><br><span class="line"><span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES<span class="number">128</span>-GCM-SHA<span class="number">256</span>:HIGH:!aNULL:!MD<span class="number">5</span>:!RC<span class="number">4</span>:!DHE;     # 按照这个套件配置</span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>root<br> 本地git推送的文件存放路径, 之前配置git时指定的路径为/home/hexo</p>
<h2 id="四-将本地git的SSH公钥添加到服务器git"><a href="#四-将本地git的SSH公钥添加到服务器git" class="headerlink" title="四. 将本地git的SSH公钥添加到服务器git"></a>四. 将本地git的SSH公钥添加到服务器git</h2></li>
<li><p>获取本地SSH公钥<br> 方式1: 右键点击git gui here, 打开git gui here, 点击help, 再点击show SSH Key, 复制<br> 方式2: win10下路径为‪C:/Users/[你的用户名]/.ssh/id_rsa.pub, pub就是public, 表示公钥</p>
</li>
<li><p>将本地公钥放到服务器中<br> 我这里路径为/root/.ssh/authorized_keys, 编辑authorized_key文件, 添加上面复制的公钥.</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410205454.png"></p>
<p>这里是使用宝塔面板终端, 使用vim修改该文件的. (宝塔的文件中好像显示不了隐藏文件夹, 只能通过命令行来敲啦)</p>
<p>PS: 如果少了这一步, 可能本地git推送到服务器会被服务器拒绝</p>
<h2 id="五-修改本地hexo站点的-config-yml文件"><a href="#五-修改本地hexo站点的-config-yml文件" class="headerlink" title="五. 修改本地hexo站点的_config.yml文件"></a>五. 修改本地hexo站点的_config.yml文件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: root@你的云服务器ip:<span class="regexp">/home/gi</span>t<span class="regexp">/hexoBlog #如果你更改了ssh端口的话，需要改成 ssh:/</span><span class="regexp">/root@ip:端口号/</span>home<span class="regexp">/git/</span>hexoBlog</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h2 id="六-推送并重启nginx"><a href="#六-推送并重启nginx" class="headerlink" title="六. 推送并重启nginx"></a>六. 推送并重启nginx</h2><ol>
<li><p>本地hexo命令</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">hexo clean  <span class="comment">//或hexo c</span></span><br><span class="line">hexo <span class="keyword">generate</span> <span class="comment">//或hexo g</span></span><br><span class="line">hexo deploy  <span class="comment">//或hexo d, 博主电脑这里必须输入hexo deploy才行, hexo d说没这个命令, 如果有知道原因的小伙伴不妨在评论区告知我一下(嘿嘿)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启nginx</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[服务器命令]</span></span><br><span class="line"></span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>




</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式基本语法</title>
    <url>/posts/2623405f/</url>
    <content><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li>学习工具：<a href="https://www.lanzous.com/i5vpdsh">https://www.lanzous.com/i5vpdsh</a></li>
<li>在线学习工具：<a href="https://tool.chinaz.com/regex/">https://tool.chinaz.com/regex/</a></li>
<li>正则表达式功能：匹配符合某种条件的文本<span id="more"></span>


</li>
</ol>
<h3 id="语法01-基本字符"><a href="#语法01-基本字符" class="headerlink" title="语法01 - 基本字符"></a>语法01 - 基本字符</h3><ol>
<li><p>普通字符</p>
</li>
<li><p>转义字符</p>
<pre>
\t, \\, \n, \|, \^, \+, \*, \?, \(, \), \[, \], \{, \}
</pre>
</li>
<li><p>标准字符集合(大写表示取补集)</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center">name</th>
<th align="center">function</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="center">匹配1个数字</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">匹配1个字母或数字或下划线</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配1个空格或制表符或换行符</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">匹配任意1个字符(换行符除外)</td>
</tr>
<tr>
<td align="center">[\s\S]</td>
<td align="center">匹配任意1个字符</td>
</tr>
</tbody></table>
<ol start="4">
<li>自定义字符</li>
</ol>
<blockquote>
<p>[]: 方括号可以匹配括号内任意一个字符</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">name</th>
<th align="center">function</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ab5@</td>
<td align="center">a、b、c或@</td>
</tr>
<tr>
<td align="center">[&#94;abc]</td>
<td align="center">除abc之外的任意字符（包括换行符）</td>
</tr>
<tr>
<td align="center">[f-k]</td>
<td align="center">f-k中的任意字符</td>
</tr>
<tr>
<td align="center">[&#94;a-g0-3]</td>
<td align="center">除a-g和0-3之外的任意字符（包括换行符）</td>
</tr>
</tbody></table>
<ul>
<li>正则表达式中的特殊符号，被包含到中括号中，就会失去特殊意义，除了^,-之外</li>
<li>标准字符集合，除小数点外，如果被包含于中括号，自定义字符集合将会包含该合，如：<ul>
<li>[\d.\-+] : 数字 小数点 + -</li>
</ul>
</li>
</ul>
<h3 id="语法02-量词"><a href="#语法02-量词" class="headerlink" title="语法02 - 量词"></a>语法02 - 量词</h3><blockquote>
<p>修饰匹配字数的特殊符号</p>
</blockquote>
<ul>
<li>贪婪模式： 尽可能多的匹配字符</li>
<li>非贪婪模式：尽可能少的匹配字符</li>
<li>在量词修饰后面<strong>添加问号</strong>，表明非贪婪模式</li>
</ul>
<table>
<thead>
<tr>
<th align="center">name</th>
<th align="center">function</th>
</tr>
</thead>
<tbody><tr>
<td align="center">{n}</td>
<td align="center">表达式重复n次</td>
</tr>
<tr>
<td align="center">{m,n}</td>
<td align="center">表达式至少重复m次，最多重复n次</td>
</tr>
<tr>
<td align="center">{m, }</td>
<td align="center">表达式至少重复m次</td>
</tr>
<tr>
<td align="center">？</td>
<td align="center">表达式出现0次或1次，相当于{0,1}</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">表达式至少出现1次，相当于{1,}</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">表达式出现任意次或不出现，相当于{0,}</td>
</tr>
</tbody></table>
<p><strong>注</strong>:  没有最多重复n次，即没有{,n}这种写法</p>
<h3 id="语法03-字符边界"><a href="#语法03-字符边界" class="headerlink" title="语法03 - 字符边界"></a>语法03 - 字符边界</h3><blockquote>
<p>匹配的是符合某种条件的位置，是零宽的</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">name</th>
<th align="center">function</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td align="center">与字符串开始的位置匹配</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">与字符串结束的地方匹配</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">匹配一个单词边界，\b位置前面的字符和后面的字符不全是\w</td>
</tr>
</tbody></table>
<p>例：:memo: \b</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-12/sVWFfigTPGu1BIa.png"></p>
<h3 id="语法04-正则表达式的匹配模式"><a href="#语法04-正则表达式的匹配模式" class="headerlink" title="语法04 - 正则表达式的匹配模式"></a>语法04 - 正则表达式的匹配模式</h3><ul>
<li>IGNORECASE 忽略大小写<ul>
<li>匹配时忽略大小写</li>
<li>默认情况下，正则表达式是要区分大小写的</li>
</ul>
</li>
<li>SINGLINE 单行模式<ul>
<li>整个文本看作一个字符串，只有一个开头，一个结尾。</li>
<li>该模式下，小数点”.”可以匹配包含换行符（\n）在内的任意字符。</li>
</ul>
</li>
<li>MULTILINE多行模式<ul>
<li>每行都是一个字符串，都有开头和结尾。</li>
<li>在指定了 MULTILINE之后，如果仅需要匹配单行模式下的字符串开始和结束位置，可以使用\A和\Z</li>
</ul>
</li>
</ul>
<h3 id="语法05-选择符和分组"><a href="#语法05-选择符和分组" class="headerlink" title="语法05 - 选择符和分组"></a>语法05 - 选择符和分组</h3><table>
<thead>
<tr>
<th align="center">expression</th>
<th align="center">name</th>
<th align="center">function</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#124;</td>
<td align="center">分支结构</td>
<td align="center">左右两边表达式之间”或”关系，匹配左边或者右边分支结构</td>
</tr>
<tr>
<td align="center">()</td>
<td align="center">捕获组</td>
<td align="center">（1）在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰哺获组<br/>（2）取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到<br/>（3）每一对括号会分配一个编号，使用()的捕获根据左括号的顺序从1开始自动编号。捕获元素编号为零的第一个捕获是由整个正则表达式模式匹配的文本</td>
</tr>
<tr>
<td align="center">(?:expression)</td>
<td align="center">非捕获组</td>
<td align="center">一些表达式中，不得不使用（），但又不需要保存（）中子表达式四配的内容，这时可以用非捕获组来抵消使用（）带来的副作用。</td>
</tr>
</tbody></table>
<h3 id="语法06-反向引用"><a href="#语法06-反向引用" class="headerlink" title="语法06 - 反向引用"></a>语法06 - 反向引用</h3><ul>
<li><p>每一对()会分配一个编号，使用()的捕获根据左括号的顺序从1开始自动编号。</p>
</li>
<li><p>通过反向引用，可以对分组已捕获的字符串进行引用</p>
</li>
</ul>
<h3 id="语法07-预搜索（零宽断言）"><a href="#语法07-预搜索（零宽断言）" class="headerlink" title="语法07 - 预搜索（零宽断言）"></a>语法07 - 预搜索（零宽断言）</h3><blockquote>
<ol>
<li>只进行子表达式的匹配，匹配内容不计入最终的匹配结果，是零宽度</li>
<li>这个位置应该符合某个条件。判断当前位置的前后字符，是否符合指定的条件，但不匹配前后的字符。是<strong>对位置的匹配</strong>。</li>
<li>正则表达式匹配过程中，如果子表达式配到的是字符内容，而非位置，并被保存到最终的匹配结果中，那么就试为这个子表达式是占有字符的；如果子表达式匹配的仅仅是位置，或者配的内春并不保存到最终的匹配结果中，那么就认为这个子表达式是零宽度的。占有字符还是零宽度，是针对匹配的内容是否保存到最终的匹配结果中而言的。</li>
</ol>
</blockquote>
<table>
<thead>
<tr>
<th align="center">name</th>
<th align="center">function</th>
</tr>
</thead>
<tbody><tr>
<td align="center">(?=exp)</td>
<td align="center">断言此位置的后面能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?&lt;=exp)</td>
<td align="center">断言此位置的前面能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?!exp)</td>
<td align="center">断言此位置的后面不能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?&lt;!exp)</td>
<td align="center">断言此位置的前面不能匹配表达式exp</td>
</tr>
</tbody></table>
<p>例：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-12/XTKwcNd13blnSvh.png"></p>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ol>
<li><a href="https://www.lanzous.com/i5vpdsh">正则表达式工具</a></li>
<li><a href="http://tool.chinaz.com/regex/">正则表达式在线工具</a></li>
<li><a href="https://www.cnblogs.com/fozero/p/7868687.html">常用正则表达式</a></li>
</ol>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>浪潮AIStation-jupyterlab配置</title>
    <url>/posts/6t685a77/</url>
    <content><![CDATA[<blockquote>
<p>实验室深度学习服务器集群采用浪潮公司提供的AIStation，记录一些避坑要点</p>
</blockquote>
<span id="more"></span>

<h1 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h1><p>为了能够正常显示jupyterlab，需要其提供的<code>inspur-jupyter-custom.tar.gz</code>文件。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">jupyter</span></span><br><span class="line"><span class="keyword"></span>├── custom.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"></span>└── <span class="keyword">jupyter_notebook_config.py</span></span><br></pre></td></tr></table></figure>

<p>压缩包内包含两个文件.</p>
<p>第一个是<code>custom.js</code></p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&#x27;base/js/namespace&#x27;</span>], <span class="function"><span class="keyword">function</span><span class="params">(Jupyter)</span></span>&#123;</span><br><span class="line">    Jupyter._target = <span class="string">&#x27;_self&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二个是<code>jupyter_notebook_config.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Copyright (c) Jupyter Development Team.</span></span><br><span class="line"><span class="comment"># Distributed under the terms of the Modified BSD License.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jupyter_core.paths <span class="keyword">import</span> jupyter_data_dir</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> errno</span><br><span class="line"><span class="keyword">import</span> stat</span><br><span class="line"></span><br><span class="line">jupyter_host = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">jupyter_port = <span class="string">&#x27;8888&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;JUPYTER_HOST&#x27;</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    jupyter_host = os.environ[<span class="string">&#x27;JUPYTER_HOST&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;JUPYTER_PORT&#x27;</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    jupyter_port = os.environ[<span class="string">&#x27;JUPYTER_PORT&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#import pdb</span></span><br><span class="line"><span class="comment">#pdb.set_trace()</span></span><br><span class="line"></span><br><span class="line">c = get_config()</span><br><span class="line">c.NotebookApp.ip = <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">c.NotebookApp.port = <span class="number">8888</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="literal">False</span></span><br><span class="line">c.NotebookApp.token = <span class="string">u&#x27;&#x27;</span>   <span class="comment"># used for login without token </span></span><br><span class="line"><span class="comment">#c.NotebookApp.tornado_settings = &#123; &#x27;headers&#x27;: &#123; &#x27;Content-Security-Policy&#x27;: &quot;frame-ancestors %s:%s/&quot; % (jupyter_host,jupyter_port)&#125; &#125;</span></span><br><span class="line">c.NotebookApp.tornado_settings = &#123; <span class="string">&#x27;headers&#x27;</span>: &#123; <span class="string">&#x27;Content-Security-Policy&#x27;</span>: <span class="string">&#x27;none&#x27;</span>&#125; &#125;</span><br><span class="line">c.NotebookApp.extra_static_paths = [<span class="string">&quot;/etc/jupyter/custom.js&quot;</span>]</span><br><span class="line">c.NotebookApp.base_url  = <span class="string">&#x27;jupyter/https%3A%2F%2F&#x27;</span> + <span class="string">&#x27;%s&#x27;</span> % (jupyter_host) + <span class="string">&#x27;%3A&#x27;</span> + <span class="string">&#x27;%s&#x27;</span> % (jupyter_port)</span><br><span class="line"><span class="comment"># https://github.com/jupyter/notebook/issues/3130</span></span><br><span class="line">c.FileContentsManager.delete_to_trash = <span class="literal">False</span></span><br><span class="line">c.NotebookApp.terminado_settings=&#123;<span class="string">&#x27;shell_command&#x27;</span>:[<span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a self-signed certificate</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;GEN_CERT&#x27;</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    dir_name = jupyter_data_dir()</span><br><span class="line">    pem_file = os.path.join(dir_name, <span class="string">&#x27;notebook.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.makedirs(dir_name)</span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> exc:  <span class="comment"># Python &gt;2.5</span></span><br><span class="line">        <span class="keyword">if</span> exc.errno == errno.EEXIST <span class="keyword">and</span> os.path.isdir(dir_name):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Generate an openssl.cnf file to set the distinguished name</span></span><br><span class="line">    cnf_file = os.path.join(os.getenv(<span class="string">&#x27;CONDA_DIR&#x27;</span>, <span class="string">&#x27;/usr/lib&#x27;</span>), <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;openssl.cnf&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(cnf_file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(cnf_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fh:</span><br><span class="line">            fh.write(<span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">[req]</span></span><br><span class="line"><span class="string">distinguished_name = req_distinguished_name</span></span><br><span class="line"><span class="string">[req_distinguished_name]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Generate a certificate if one doesn&#x27;t exist on disk</span></span><br><span class="line">    subprocess.check_call([<span class="string">&#x27;openssl&#x27;</span>, <span class="string">&#x27;req&#x27;</span>, <span class="string">&#x27;-new&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;-newkey&#x27;</span>, <span class="string">&#x27;rsa:2048&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;-days&#x27;</span>, <span class="string">&#x27;365&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;-nodes&#x27;</span>, <span class="string">&#x27;-x509&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;-subj&#x27;</span>, <span class="string">&#x27;/C=XX/ST=XX/L=XX/O=generated/CN=generated&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;-keyout&#x27;</span>, pem_file,</span><br><span class="line">                           <span class="string">&#x27;-out&#x27;</span>, pem_file])</span><br><span class="line">    <span class="comment"># Restrict access to the file</span></span><br><span class="line">    os.chmod(pem_file, stat.S_IRUSR | stat.S_IWUSR)</span><br><span class="line">    c.NotebookApp.certfile = pem_file</span><br><span class="line"></span><br><span class="line"><span class="comment"># Change default umask for all subprocesses of the notebook server if set in</span></span><br><span class="line"><span class="comment"># the environment</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;NB_UMASK&#x27;</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    os.umask(<span class="built_in">int</span>(os.environ[<span class="string">&#x27;NB_UMASK&#x27;</span>], <span class="number">8</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基于公开镜像生成AIStation支持的镜像"><a href="#基于公开镜像生成AIStation支持的镜像" class="headerlink" title="基于公开镜像生成AIStation支持的镜像"></a>基于公开镜像生成AIStation支持的镜像</h2><p>基于ubuntu18.04的dockerfile</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">ubuntu:18.</span><span class="string">04</span></span><br><span class="line"></span><br><span class="line"><span class="string">COPY</span> <span class="string">inspur-jupyter-custom</span>.<span class="string">tar</span>.<span class="string">gz</span> .</span><br><span class="line"><span class="string">RUN</span> <span class="string">apt</span> <span class="string">update</span> \</span><br><span class="line">&amp;&amp; <span class="string">DEBIAN_FRONTEND</span>=<span class="string">noninteractive</span> <span class="string">apt</span> <span class="string">install</span> <span class="built_in">--no-install-recommends</span> -<span class="string">y</span> <span class="string">curl</span> <span class="string">python3</span> <span class="string">python3-distutils</span> <span class="string">openssl</span> <span class="string">openssh-server</span> \</span><br><span class="line">&amp;&amp; <span class="string">curl</span> -<span class="string">k</span> <span class="string">https</span>://<span class="string">bootstrap</span>.<span class="string">pypa</span>.<span class="string">io</span>/<span class="built_in">get-pip.py</span> -<span class="string">o</span> <span class="built_in">get-pip.py</span> \</span><br><span class="line">&amp;&amp; <span class="string">python3</span> <span class="built_in">get-pip.py</span> \</span><br><span class="line">&amp;&amp; <span class="string">ln</span> -<span class="string">s</span> `<span class="string">which</span> <span class="string">python3</span>` <span class="string">&quot;$(dirname `which python3`)/python&quot;</span> \</span><br><span class="line">&amp;&amp; <span class="string">pip</span> <span class="string">install</span> <span class="string">jupyterlab</span> \</span><br><span class="line">&amp;&amp; <span class="string">tar</span> -<span class="string">zxf</span> <span class="string">inspur-jupyter-custom</span>.<span class="string">tar</span>.<span class="string">gz</span> -<span class="string">C</span> /<span class="string">etc</span> \</span><br><span class="line">&amp;&amp; <span class="string">cat</span> /<span class="string">etc</span>/<span class="string">ssh</span>/<span class="string">sshd_config</span> | <span class="string">grep</span> -<span class="string">v</span> <span class="string">PermitRootLogin</span> &gt; <span class="string">sshd_config</span>.<span class="string">temp</span> \</span><br><span class="line">&amp;&amp; <span class="string">echo</span> <span class="string">&#x27;PermitRootLogin yes&#x27;</span> &gt;&gt; <span class="string">sshd_config</span>.<span class="string">temp</span> \</span><br><span class="line">&amp;&amp; <span class="string">mv</span> <span class="string">sshd_config</span>.<span class="string">temp</span> /<span class="string">etc</span>/<span class="string">ssh</span>/<span class="string">sshd_config</span> \</span><br><span class="line">&amp;&amp; <span class="string">rm</span> <span class="built_in">get-pip.py</span> \</span><br><span class="line">&amp;&amp; <span class="string">rm</span> -<span class="string">rf</span> /<span class="string">root</span>/.<span class="string">cache</span> \</span><br><span class="line">&amp;&amp; <span class="string">apt</span> <span class="string">autoremove</span> <span class="built_in">--yes</span> <span class="built_in">--purge</span> \</span><br><span class="line">&amp;&amp; <span class="string">apt</span> <span class="string">clean</span> \</span><br><span class="line">&amp;&amp; <span class="string">rm</span> <span class="string">inspur-jupyter-custom</span>.<span class="string">tar</span>.<span class="string">gz</span> \</span><br><span class="line">&amp;&amp; <span class="string">rm</span> -<span class="string">rf</span> /<span class="string">tmp</span>/* /<span class="string">var</span>/<span class="string">tmp</span>/* /<span class="string">var</span>/<span class="string">cache</span>/<span class="string">apt</span>/*</span><br><span class="line">&amp;&amp; <span class="string">echo</span> <span class="string">&quot;Build Success!&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="Anaconda配置"><a href="#Anaconda配置" class="headerlink" title="Anaconda配置"></a>Anaconda配置</h1><p>如果要在juyterlab中使用Anaconda，首先需要在其base虚拟环境中安装<code>jupyterlab</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install jupyterlab</span><br></pre></td></tr></table></figure>

<h2 id="Launcher显示各个虚拟环境"><a href="#Launcher显示各个虚拟环境" class="headerlink" title="Launcher显示各个虚拟环境"></a>Launcher显示各个虚拟环境</h2><h3 id="方式一：需重启jupyterlab"><a href="#方式一：需重启jupyterlab" class="headerlink" title="方式一：需重启jupyterlab"></a>方式一：需重启jupyterlab</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate &lt;虚拟环境名&gt;</span><br><span class="line">conda install nb_conda_kernels</span><br></pre></td></tr></table></figure>

<h3 id="方式二：无需重启jupyterlab"><a href="#方式二：无需重启jupyterlab" class="headerlink" title="方式二：无需重启jupyterlab"></a>方式二：无需重启jupyterlab</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">conda activate <span class="tag">&lt;虚拟环境名&gt;</span></span><br><span class="line">ipython kernel install --<span class="keyword">user</span> <span class="title">--name</span>=<span class="tag">&lt;虚拟环境名&gt;</span></span><br></pre></td></tr></table></figure>

<p>成功后如下图所示，可以在jupyterlab中使用conda的各个虚拟环境了</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2021-03/20210404222528.png"></p>
<h2 id="conda初始化"><a href="#conda初始化" class="headerlink" title="conda初始化"></a>conda初始化</h2><p>对于AIStation来说，创建容器后默认会启动jupyterlab，此时并未对conda进行初始化，所以jupyterlab无法使用conda环境。</p>
<p>一种解决方案是kill当前jupyterlab进程，然后在conda虚拟环境中启动jupyterlab。</p>
<p>启动jupyterlab命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup jupyter-lab --allow-root --no-browser --notebook-dir=/xxxx jupyter_notebook_config.py &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>--notebook-dir</code>: 工作路径</li>
</ul>
<h1 id="一些深度学习镜像"><a href="#一些深度学习镜像" class="headerlink" title="一些深度学习镜像"></a>一些深度学习镜像</h1><ul>
<li><a href="https://hub.docker.com/r/pytorch/pytorch/tags?page=1&amp;ordering=last_updated">https://hub.docker.com/r/pytorch/pytorch/tags?page=1&amp;ordering=last_updated</a></li>
<li><a href="https://hub.docker.com/r/nvidia/cuda/tags?page=1&amp;ordering=last_updated">https://hub.docker.com/r/nvidia/cuda/tags?page=1&amp;ordering=last_updated</a></li>
</ul>
<h1 id="WebVPN无法访问jupyterlab的问题"><a href="#WebVPN无法访问jupyterlab的问题" class="headerlink" title="WebVPN无法访问jupyterlab的问题"></a>WebVPN无法访问jupyterlab的问题</h1><p>对于webvpn无法打开AIStation的问题，通过查看请求，发现某个url并未转码</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="下载requestly插件"><a href="#下载requestly插件" class="headerlink" title="下载requestly插件"></a>下载requestly插件</h3><p>地址：<a href="https://chrome.google.com/webstore/detail/requestly-redirect-url-mo/mdnleldcmiljblolnjhpnblkcekpdkpa">https://chrome.google.com/webstore/detail/requestly-redirect-url-mo/mdnleldcmiljblolnjhpnblkcekpdkpa</a></p>
<h3 id="添加规则"><a href="#添加规则" class="headerlink" title="添加规则"></a>添加规则</h3><p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2021-04/20210530165159.png"></p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">/https:<span class="symbol">\/</span><span class="symbol">\/</span>webvpn.xxxx.edu.cn<span class="symbol">\/</span>https-32206<span class="symbol">\/</span>77726476706e69737468656265737421f1fe52882624615f704684b5965037327044a0d1e9ffaa<span class="symbol">\/</span>jupyter<span class="symbol">\/</span>https:<span class="symbol">\/</span><span class="symbol">\/</span>(<span class="symbol">\d</span>+)<span class="symbol">\.</span>(<span class="symbol">\d</span>+)<span class="symbol">\.</span>(<span class="symbol">\d</span>+).(<span class="symbol">\d</span>+):(<span class="symbol">\d</span>+)([<span class="symbol">\s</span><span class="symbol">\S</span>]*)/i</span><br><span class="line"></span><br><span class="line">https://webvpn.xxxx.edu.cn/https-32206/77726476706e69737468656265737421f1fe52882624615f704684b5965037327044a0d1e9ffaa/jupyter/https<span class="variable">%3A%</span>2F<span class="variable">%2F$1.$2.$3.$4%</span>3A$5$6</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>jupyterlab</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Unix-like、Windows系统之间文本换行符不同的问题</title>
    <url>/posts/8af9e030/</url>
    <content><![CDATA[<blockquote>
<p>参考博客 :point_right: <a href="https://sphenginx.github.io/2014/12/24/CRLF-in-Unix-like_Windows-os/">网址</a></p>
</blockquote>
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>\r是回车符,\n是换行符，各个系统的换行标志：</p>
<blockquote>
<p>win 用 \r\n<br>linux/unix 用 \n<br>Mac OS 用 \r</p>
</blockquote>
<p>CR用符号’\r’表示, 十进制ASCII代码是13, 十六进制代码为OxOD<br>LF使用’\n’符号表示, ASCII代码是10, 十六制为0x0A<br>所以：<br>Windows下用的是OAOD，即CR&amp;LF，<br>linux/unix用的是OA，即LF<br>MacOS用的是OD，即CR</p>
<h2 id="CRLF来历"><a href="#CRLF来历" class="headerlink" title="CRLF来历"></a>CRLF来历</h2><p>计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。</p>
<p>于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做“回车”，告诉打字机把打印头定位在左边界；另一个叫做“换行”，告诉打字机把纸向下移一行。这就是“换行”和“回车”的来历，从它们的英语名字上也可以看出一二。</p>
<p>后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现了分歧。Unix 系统里，每行结尾只有“&lt;换行&gt;”，即“\n”；Windows系统里面，每行结尾是“&lt;回车&gt;&lt;换行&gt;”，即“ \r\n”；Mac系统里，每行结尾是“&lt;回车&gt;”。一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="问题一：文本类型文件互转"><a href="#问题一：文本类型文件互转" class="headerlink" title="问题一：文本类型文件互转"></a>问题一：文本类型文件互转</h3><blockquote>
<p>包括 <code>txt</code> <code>sh</code>等文件</p>
</blockquote>
<p><strong>方法一</strong><br>使用<code>notepad++</code>中的格式转换功能，见图</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200415172001.png"></p>
<p><strong>方法二</strong><br>针对<code>sh</code>文件，可以使用vim工具<br>在vim模式下，输入<code>set ff</code>发现文件类型为<code>format=dos</code><br>在vim模式下，可以使用<code>set ff=unix</code>改变format为<code>unix</code></p>
<h3 id="问题二：doc文档乱码"><a href="#问题二：doc文档乱码" class="headerlink" title="问题二：doc文档乱码"></a>问题二：doc文档乱码</h3><blockquote>
<p>Windows下编写的doc文档，在Linux下查看（用Open Office）一般都会乱码</p>
</blockquote>
<ul>
<li>  解决方法：先用Open Office打开，然后再全选，把字体设置为SYSong18030，OK中文简体和繁体都显示正常了。</li>
</ul>
<h3 id="问题三：FTP传文件时乱码"><a href="#问题三：FTP传文件时乱码" class="headerlink" title="问题三：FTP传文件时乱码"></a>问题三：FTP传文件时乱码</h3><blockquote>
<p>在不同平台间使用FTP软件传送文件时, 在ascii文本模式传输模式下, 一些FTP客户端程序会自动对换行格式进行转换，经过这种传输的文件字节数可能会发生变化”)问题四：在不同平台间使用FTP软件传送文件时, 在ascii文本模式传输模式下, 一些FTP客户端程序会自动对换行格式进行转换，经过这种传输的文件字节数可能会发生变化</p>
</blockquote>
<ul>
<li>  解决方法：如果你不想ftp修改原文件, 可以使用bin模式(二进制模式)传输文本。</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>环形链表</title>
    <url>/posts/45daaf11/</url>
    <content><![CDATA[<blockquote>
<p>LeetCode题目环形链表集合<br><a href="https://leetcode-cn.com/problems/linked-list-cycle/">环形链表I</a><br><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">环形链表II</a></p>
<span id="more"></span>
</blockquote>
<h1 id="环形链表I"><a href="#环形链表I" class="headerlink" title="环形链表I"></a>环形链表I</h1><blockquote>
<p>题目描述：给定一个链表，判断链表中是否有环。<br>样例输入：head = [3,2,0,-4]<br>输出：true<br><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410205711.png"></p>
</blockquote>
<h2 id="思路1-快慢指针"><a href="#思路1-快慢指针" class="headerlink" title="思路1-快慢指针"></a>思路1-快慢指针</h2><blockquote>
<p>从给定的头指针开始，设立两个快慢指针，快指针fast每次走两步(fast-&gt;next-&gt;next),慢指针slow每次走一步(slow-&gt;next)，如果存在环，最终必定相遇。<br>如果fast和slow指针走的过程中遇到NULL,说明其中没有环,返回false。<br>如果fast和slow指针相遇(不全为空),说明其中有环,返回true。</p>
</blockquote>
<p><strong>AC代码:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ListNode *fast = head, *slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="思路2-修改next指针"><a href="#思路2-修改next指针" class="headerlink" title="思路2-修改next指针"></a>思路2-修改next指针</h2><blockquote>
<p>遍历整个链表，每遍历到一个对象，将其next指针指向自己。<br>过程中遇到next为NULL, 说明其中没有环，返回false。<br>过程中遇到next指向自己, 说明其中有环，返回true。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ListNode *nextp=head;</span><br><span class="line">        <span class="keyword">while</span>(head != head-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            nextp = head-&gt;next; </span><br><span class="line">            head-&gt;next = head;</span><br><span class="line">            head = nextp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>需要说明的是这种方法会改变原来链表的结构，实际中并不可取。</p>
<h1 id="环形链表II"><a href="#环形链表II" class="headerlink" title="环形链表II"></a>环形链表II</h1><blockquote>
<p>题目描述：给定一个链表，判断链表中是否有环，如果有环，返回进入环的第一个节点，如果无环，返回空。<br>题目要求：尽量不使用额外空间，不允许修改链表。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410205723.png"><br><strong>思路分析</strong></p>
</blockquote>
<ol>
<li>先用环形链表I的方法，判断链表中是否有环，如果有环，得到fast指针和slow指针的位置。</li>
<li>再使slow指针指向head, fast指针指向第一步slow和fast的相遇节点地址。</li>
<li>使fast和slow均以一步(.next)的方式向前走，相遇的地方即是需要返回的节点。</li>
</ol>
<p><strong>注</strong> 第三步的证明可以看Leetcode官方题解。<br><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410205814.png"></p>
<blockquote>
<p>2*(F+a) = F + n*(a+b) + a –&gt; F = (n-1)(a+b) + b –&gt; <strong>F = b</strong></p>
</blockquote>
<p><strong>AC代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123; </span><br><span class="line">       <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode *fast = head, *slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!(fast-&gt;next != <span class="literal">NULL</span> &amp;&amp;fast-&gt;next-&gt;next != <span class="literal">NULL</span>)) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != slow)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="寻找重复数"><a href="#寻找重复数" class="headerlink" title="寻找重复数"></a>寻找重复数</h1><pre>
比如包含8个整数的数组，元素都在1-7之间。我们发现数组的下标的范围是0-6，如果把数组中每个元素的值看做记录的是下一个数的地址，那么就会构成一个链表。而且此链表必定有环。而且环的入口节点的下标就是重复的元素。
</pre>

<p>所以可以利用快慢指针来做</p>
<p><strong>AC代码:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fast=nums[<span class="number">0</span>],slow=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = nums[nums[fast]];</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            <span class="keyword">if</span>(fast == slow) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        fast=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(fast != slow)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = nums[fast];</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>win10查看连过的WIFI密码</title>
    <url>/posts/22bb2050/</url>
    <content><![CDATA[<blockquote>
<p>在win10上查看连过的WIFI密码，这里通过cmd命令的方式查看.</p>
</blockquote>
<span id="more"></span>
<h3 id="1-查看单个WIFI的密码"><a href="#1-查看单个WIFI的密码" class="headerlink" title="1. 查看单个WIFI的密码"></a>1. 查看单个WIFI的密码</h3><p>注意下面的WIFI名指定为需要查询的WIFI名</p>
<figure class="highlight bash"><figcaption><span>查看单个WIFI密码.bat</span></figcaption><table><tr><td class="code"><pre><span class="line">netsh wlan show profile name=<span class="string">&quot;WIFI名&quot;</span> key=clear</span><br></pre></td></tr></table></figure>
<p>结果中的关键内容就是WIFI密码</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/20200410210455.png"></p>
<h3 id="2-查看所有连过的WIFI名"><a href="#2-查看所有连过的WIFI名" class="headerlink" title="2. 查看所有连过的WIFI名"></a>2. 查看所有连过的WIFI名</h3><p>这里与上一条命令不同的是WIFI名换成了通配符 “*”，不过这个不能直接查看密码,再利用上面的命令进行查看密码</p>
<figure class="highlight bash"><figcaption><span>查看所有WIFI密码.bat</span></figcaption><table><tr><td class="code"><pre><span class="line">netsh wlan show profile * key=clear</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技巧</category>
      </categories>
  </entry>
  <entry>
    <title>linux学习05 - linux环境变量与文件查找</title>
    <url>/posts/9c5438d1/</url>
    <content><![CDATA[<blockquote>
<p>linux学习05：linux环境变量与文件查找<br>内容转载自实验楼：<a href="https://www.shiyanlou.com/courses/1/">https://www.shiyanlou.com/courses/1/</a></p>
<span id="more"></span>
</blockquote>
<h4 id="1-1-实验内容"><a href="#1-1-实验内容" class="headerlink" title="1.1 实验内容"></a>1.1 实验内容</h4><p>本节实验介绍环境变量的作用与用法，及几种搜索文件的方法。学会这些技巧可以高效地使用 Linux 。</p>
<h4 id="1-2-实验知识点"><a href="#1-2-实验知识点" class="headerlink" title="1.2 实验知识点"></a>1.2 实验知识点</h4><ul>
<li>  环境变量的设置</li>
<li>  环境变量的修改</li>
</ul>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><strong>变量</strong></p>
<p>要解释环境变量，得先明白变量是什么，准确的说应该是 Shell 变量，所谓变量就是计算机中用于记录一个值（不一定是数值，也可以是字符或字符串）的符号，而这些符号将用于不同的运算处理中。通常变量与值是一对一的关系，可以通过表达式读取它的值并赋值给其它变量，也可以直接指定数值赋值给任意变量。为了便于运算和处理，大部分的编程语言会区分变量的类型，用于分别记录数值、字符或者字符串等等数据类型。Shell 中的变量也基本如此，有不同类型（但不用专门指定类型名），可以参与运算，有作用域限定。</p>
<blockquote>
<p>变量的作用域即变量的有效范围（比如一个函数中、一个源文件中或者全局范围），在该范围内只能有一个同名变量。一旦离开则该变量无效，如同不存在这个变量一般。</p>
</blockquote>
<p>在 Shell 中如何创建一个变量，如何给变量赋值和如何读取变量的值呢？这部分内容会在 <a href="http://www.shiyanlou.com/courses/5">bash 脚本编程</a> 这门课中详细介绍，这里我简单举例说明一下：</p>
<p>使用 <code>declare</code> 命令创建一个变量名为 tmp 的变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">declare</span> tmp</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>其实也可以不用 declare 预声明一个变量，直接即用即创建，这里只是告诉你 declare 的作用，这在创建其它指定类型的变量（如数组）时会用到。</p>
</blockquote>
<p>使用 <code>=</code> 号赋值运算符，将变量 tmp 赋值为 shiyanlou：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="attribute">tmp</span>=shiyanlou</span><br></pre></td></tr></table></figure>

<p>读取变量的值，使用 <code>echo</code> 命令和 <code>$</code> 符号（**$ 符号用于表示引用一个变量的值，初学者经常忘记输入**）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$tmp</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/36-1.png"></p>
<p><strong>注意：并不是任何形式的变量名都是可用的，变量名只能是英文字母、数字或者下划线，且不能以数字作为开头。</strong></p>
<h4 id="1-环境变量"><a href="#1-环境变量" class="headerlink" title="1. 环境变量"></a>1. 环境变量</h4><p>简单理解了变量的概念，就很容易理解环境变量了。环境变量的作用域比自定义变量的要大，如 Shell 的环境变量作用于自身和它的子进程。在所有的 UNIX 和类 UNIX 系统中，每个进程都有其各自的环境变量设置，且默认情况下，当一个进程被创建时，除了创建过程中明确指定的话，它将继承其父进程的绝大部分环境设置。Shell 程序也作为一个进程运行在操作系统之上，而我们在 Shell 中运行的大部分命令都将以 Shell 的子进程的方式运行。</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/36-2.png"></p>
<p>通常我们会涉及到的变量类型有三种：</p>
<ul>
<li>  当前 Shell 进程私有用户自定义变量，如上面我们创建的 tmp 变量，只在当前 Shell 中有效。</li>
<li>  Shell 本身内建的变量。</li>
<li>  从自定义变量导出的环境变量。</li>
</ul>
<p>也有三个与上述三种环境变量相关的命令：<code>set</code>，<code>env</code>，<code>export</code>。这三个命令很相似，都是用于打印环境变量信息，区别在于涉及的变量范围不同。详见下表：</p>
<table>
<thead>
<tr>
<th>命 令</th>
<th>说 明</th>
</tr>
</thead>
<tbody><tr>
<td><code>set</code></td>
<td>显示当前 Shell 所有变量，包括其内建环境变量（与 Shell 外观等相关），用户自定义变量及导出的环境变量。</td>
</tr>
<tr>
<td><code>env</code></td>
<td>显示与当前用户相关的环境变量，还可以让命令在指定环境中运行。</td>
</tr>
<tr>
<td><code>export</code></td>
<td>显示从 Shell 中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量。</td>
</tr>
</tbody></table>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/36-3.png"></p>
<p>你可以更直观的使用 <code>vimdiff</code> 工具比较一下它们之间的差别：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="attribute">temp</span>=shiyanlou</span><br><span class="line">$ <span class="builtin-name">export</span> <span class="attribute">temp_env</span>=shiyanlou</span><br><span class="line">$ env|sort&gt;env.txt</span><br><span class="line">$ <span class="builtin-name">export</span>|sort&gt;export.txt</span><br><span class="line">$ <span class="builtin-name">set</span>|sort&gt;set.txt</span><br></pre></td></tr></table></figure>

<p>上述操作将命令输出通过管道 <code>|</code> 使用 <code>sort</code> 命令排序，再重定向到对象文本文件中。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">$ vimdiff env.txt <span class="keyword">export</span>.txt set.txt</span><br></pre></td></tr></table></figure>

<p>使用 <code>vimdiff</code> 工具比较导出的几个文件的内容：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/36-4.gif"></p>
<p>关于哪些变量是环境变量，可以简单地理解成在当前进程的子进程有效则为环境变量，否则不是（有些人也将所有变量统称为环境变量，只是以全局环境变量和局部环境变量进行区分，我们只要理解它们的实质区别即可）。我们这里用 <code>export</code> 命令来体会一下，先在 Shell 中设置一个变量 <code>temp=shiyanlou</code>，然后再新创建一个子 Shell 查看 <code>temp</code> 变量的值：</p>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/36-5.png"></p>
<p><strong>注意：为了与普通变量区分，通常我们习惯将环境变量名设为大写。</strong></p>
<h5 id="永久生效"><a href="#永久生效" class="headerlink" title="永久生效"></a>永久生效</h5><p>但是问题来了，当你关机后，或者关闭当前的 shell 之后，环境变量就没了啊。怎么才能让环境变量永久生效呢？</p>
<p>按变量的生存周期来划分，Linux 变量可分为两类：</p>
<ol>
<li>永久的：需要修改配置文件，变量永久生效；</li>
<li>临时的：使用 export 命令行声明即可，变量在关闭 shell 时失效。</li>
</ol>
<p>这里介绍两个重要文件 <code>/etc/bashrc</code>（有的 Linux 没有这个文件） 和 <code>/etc/profile</code> ，它们分别存放的是 shell 变量和环境变量。还有要注意区别的是每个用户目录下的一个隐藏文件：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">.profile</span> 可以用 <span class="keyword">ls</span> -a 查看</span><br><span class="line"><span class="keyword">cd</span> <span class="string">/home/shiyanlou</span></span><br><span class="line"><span class="keyword">ls</span> -a </span><br></pre></td></tr></table></figure>

<p>这个 .profile 只对当前用户永久生效。而写在 <code>/etc/profile</code> 里面的是对所有用户永久生效，所以如果想要添加一个永久生效的环境变量，只需要打开 <code>/etc/profile</code>，在最后加上你想添加的环境变量就好啦。</p>
<h4 id="2-命令的查找路径与顺序"><a href="#2-命令的查找路径与顺序" class="headerlink" title="2.命令的查找路径与顺序"></a>2.命令的查找路径与顺序</h4><p>你可能很早之前就有疑问，我们在 Shell 中输入一个命令，Shell 是怎么知道去哪找到这个命令然后执行的呢？这是通过环境变量 <code>PATH</code> 来进行搜索的，熟悉 Windows 的用户可能知道 Windows 中的也是有这么一个 PATH 环境变量。这个 <code>PATH</code> 里面就保存了 Shell 中执行的命令的搜索路径。</p>
<p>查看 <code>PATH</code> 环境变量的内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$PATH</span></span></span><br></pre></td></tr></table></figure>

<p>默认情况下你会看到如下输出：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/sbin:/u</span>sr<span class="regexp">/local/</span>bin:<span class="regexp">/usr/</span>sbin:<span class="regexp">/usr/</span>bin:<span class="regexp">/sbin:/</span>bin:<span class="regexp">/usr/g</span>ames:<span class="regexp">/usr/</span>local/games</span><br></pre></td></tr></table></figure>

<p>如果你还记得 Linux 目录结构那一节的内容，你就应该知道上面这些目录下放的是哪一类文件了。通常这一类目录下放的都是可执行文件，当我们在 Shell 中执行一个命令时，系统就会按照 PATH 中设定的路径按照顺序依次到目录中去查找，如果存在同名的命令，则执行先找到的那个。</p>
<blockquote>
<p>下面我们将练习创建一个最简单的可执行 Shell 脚本和一个使用 C 语言创建的“ hello world ”程序，如果这两部分内容你之前没有学习过，那么你可以进行一个入门学习： <a href="http://www.shiyanlou.com/courses/57">C 语言入门教程</a> <a href="http://www.shiyanlou.com/courses/5">高级 Bash 脚本编程指南</a> <a href="http://bash.cyberciti.biz/guide/Main_Page">Linux Shell Scripting Tutorial (LSST) v2.0</a> 。</p>
</blockquote>
<p>创建一个 Shell 脚本文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line"><span class="variable">$</span> touch hello_shell.sh</span><br><span class="line"><span class="variable">$</span> gedit hello_shell.sh</span><br></pre></td></tr></table></figure>

<p>在脚本中添加如下内容，保存并退出（<strong>注意不要省掉第一行，这不是注释，论坛有用户反映有语法错误，就是因为没有了第一行</strong>）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=0; i&lt;10; i++));<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;hello shell&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<p>为文件添加可执行权限：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod <span class="number">755</span> hello_shell.sh</span><br></pre></td></tr></table></figure>

<p>执行脚本：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> <span class="string">/home/shiyanlou</span></span><br><span class="line">$ <span class="string">./hello_shell.sh</span></span><br></pre></td></tr></table></figure>

<p>创建一个 C 语言“ hello world ”程序：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line"><span class="variable">$</span> gedit hello_world.c</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存后使用 gcc 生成可执行文件：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>gcc -o hello_world hello_world.c</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>gcc 生成二进制文件默认具有可执行权限，不需要修改</strong></p>
</blockquote>
<p>在 /home/shiyanlou 家目录创建一个 <code>mybin</code> 目录，并将上述 hello_shell.sh 和 hello_world 文件移动到其中：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> /home/shiyanlou</span><br><span class="line"><span class="variable">$</span> mkdir mybin</span><br><span class="line"><span class="variable">$</span> <span class="built_in">mv</span> hello_shell.sh hello_world mybin/</span><br></pre></td></tr></table></figure>

<p>现在你可以在 <code>mybin</code> 目录中分别运行你刚刚创建的两个程序：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> mybin</span><br><span class="line"><span class="variable">$</span> ./hello_shell.sh</span><br><span class="line"><span class="variable">$</span> ./hello_world</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/36-6.png"></p>
<p>回到上一级目录，也就是 <code>shiyanlou</code> 家目录，当再想运行那两个程序时，会发现提示命令找不到，除非加上命令的完整路径，但那样很不方便，如何做到像使用系统命令一样执行自己创建的脚本文件或者程序呢？那就要将命令所在路径添加到 <code>PATH</code> 环境变量了。</p>
<h4 id="3-添加自定义路径到“-PATH-”环境变量"><a href="#3-添加自定义路径到“-PATH-”环境变量" class="headerlink" title="3. 添加自定义路径到“ PATH ”环境变量"></a>3. 添加自定义路径到“ PATH ”环境变量</h4><p>在前面我们应该注意到 <code>PATH</code> 里面的路径是以 <code>:</code> 作为分割符的，所以我们可以这样添加自定义路径：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>PATH=<span class="variable">$PATH</span><span class="symbol">:/home/shiyanlou/mybin</span></span><br></pre></td></tr></table></figure>

<p><strong>注意这里一定要使用绝对路径。</strong></p>
<p>现在你就可以在任意目录执行那两个命令了（注意需要去掉前面的 <code>./</code>）。你可能会意识到这样还并没有很好的解决问题，因为我给 PATH 环境变量追加了一个路径，它也只是在当前 Shell 有效，我一旦退出终端，再打开就会发现又失效了。有没有方法让添加的环境变量全局有效？或者每次启动 Shell 时自动执行上面添加自定义路径到 PATH 的命令？下面我们就来说说后一种方式——让它自动执行。</p>
<p>在每个用户的 home 目录中有一个 Shell 每次启动时会默认执行一个配置脚本，以初始化环境，包括添加一些用户自定义环境变量等等。zsh 的配置文件是 <code>.zshrc</code>，相应 Bash 的配置文件为 <code>.bashrc</code> 。它们在 <code>etc</code> 下还都有一个或多个全局的配置文件，不过我们一般只修改用户目录下的配置文件。</p>
<p>我们可以简单地使用下面命令直接添加内容到 <code>.zshrc</code> 中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;PATH=<span class="variable">$PATH</span>:/home/shiyanlou/mybin&quot;</span> &gt;&gt; .zshrc</span></span><br></pre></td></tr></table></figure>

<p><strong>上述命令中 <code>&gt;&gt;</code> 表示将标准输出以追加的方式重定向到一个文件中，注意前面用到的 <code>&gt;</code> 是以覆盖的方式重定向到一个文件中，使用的时候一定要注意分辨。在指定文件不存在的情况下都会创建新的文件。</strong></p>
<h4 id="4-修改和删除已有变量"><a href="#4-修改和删除已有变量" class="headerlink" title="4. 修改和删除已有变量"></a>4. 修改和删除已有变量</h4><h5 id="变量修改"><a href="#变量修改" class="headerlink" title="变量修改"></a>变量修改</h5><p>变量的修改有以下几种方式：</p>
<table>
<thead>
<tr>
<th>变量设置方式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>$&#123;变量名#匹配字串&#125;</code></td>
<td>从头向后开始匹配，删除符合匹配字串的最短数据</td>
</tr>
<tr>
<td><code>$&#123;变量名##匹配字串&#125;</code></td>
<td>从头向后开始匹配，删除符合匹配字串的最长数据</td>
</tr>
<tr>
<td><code>$&#123;变量名%匹配字串&#125;</code></td>
<td>从尾向前开始匹配，删除符合匹配字串的最短数据</td>
</tr>
<tr>
<td><code>$&#123;变量名%%匹配字串&#125;</code></td>
<td>从尾向前开始匹配，删除符合匹配字串的最长数据</td>
</tr>
<tr>
<td><code>$&#123;变量名/旧的字串/新的字串&#125;</code></td>
<td>将符合旧字串的第一个字串替换为新的字串</td>
</tr>
<tr>
<td><code>$&#123;变量名//旧的字串/新的字串&#125;</code></td>
<td>将符合旧字串的全部字串替换为新的字串</td>
</tr>
</tbody></table>
<p>比如要修改我们前面添加到 PATH 的环境变量。为了避免操作失误导致命令找不到，我们先将 PATH 赋值给一个新的自定义变量 path：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>path=<span class="variable">$PATH</span></span><br><span class="line"><span class="variable">$ </span>echo <span class="variable">$path</span></span><br><span class="line"><span class="variable">$ </span>path=<span class="variable">$&#123;</span>path<span class="string">%/home/</span>shiyanlou/mybin&#125;</span><br><span class="line"><span class="comment"># 或使用通配符,*表示任意多个任意字符</span></span><br><span class="line"><span class="variable">$ </span>path=<span class="variable">$&#123;</span>path%*<span class="regexp">/mybin&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="变量删除"><a href="#变量删除" class="headerlink" title="变量删除"></a>变量删除</h5><p>可以使用 <code>unset</code> 命令删除一个环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unset</span> temp</span></span><br></pre></td></tr></table></figure>

<h4 id="5-如何让环境变量立即生效"><a href="#5-如何让环境变量立即生效" class="headerlink" title="5. 如何让环境变量立即生效"></a>5. 如何让环境变量立即生效</h4><p>前面我们在 Shell 中修改了一个配置脚本文件之后（比如 zsh 的配置文件 home 目录下的 <code>.zshrc</code>），每次都要退出终端重新打开甚至重启主机之后其才能生效，很是麻烦，我们可以使用 <code>source</code> 命令来让其立即生效，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/shiyanlou</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> .zshrc</span></span><br></pre></td></tr></table></figure>

<p><code>source</code> 命令还有一个别名就是 <code>.</code>，上面的命令如果替换成 <code>.</code> 的方式就该是：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>. ./.zshrc</span><br></pre></td></tr></table></figure>

<p>在使用<code>.</code>的时候，需要注意与表示当前路径的那个点区分开。</p>
<p>注意第一个点后面有一个空格，而且后面的文件必须指定完整的绝对或相对路径名，source 则不需要。</p>
<h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><p>与搜索相关的命令常用的有 <code>whereis</code>，<code>which</code>，<code>find</code> 和 <code>locate</code> 。</p>
<ul>
<li>  <strong><code>whereis</code> 简单快速</strong></li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>whereis who</span><br><span class="line"><span class="variable">$ </span>whereis find</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/36-7.png"></p>
<p>你会看到 <code>whereis find</code> 找到了三个路径，两个可执行文件路径和一个 man 在线帮助文件所在路径，这个搜索很快，因为它并没有从硬盘中依次查找，而是直接从数据库中查询。<code>whereis</code> 只能搜索二进制文件(-b)，man 帮助文件(-m)和源代码文件(-s)。如果想要获得更全面的搜索结果可以使用 <code>locate</code> 命令。</p>
<ul>
<li>  <strong><code>locate</code> 快而全</strong></li>
</ul>
<p>通过“ /var/lib/mlocate/mlocate.db ”数据库查找，不过这个数据库也不是实时更新的，系统会使用定时任务每天自动执行 <code>updatedb</code> 命令更新一次，所以有时候你刚添加的文件，它可能会找不到，需要手动执行一次 <code>updatedb</code> 命令（在我们的环境中必须先执行一次该命令）。它可以用来查找指定目录下的不同文件类型，如查找 /etc 下所有以 sh 开头的文件：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">$ sudo apt-<span class="builtin-name">get</span> install locate</span><br><span class="line">$ locate /etc/sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意，它不只是在 /bin 目录下查找，还会自动递归子目录进行查找。</strong></p>
</blockquote>
<p>查找 /usr/share/ 下所有 jpg 文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ locate <span class="regexp">/usr/</span>share/\*.jpg</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意要添加 <code>*</code> 号前面的反斜杠转义，否则会无法找到。</strong></p>
</blockquote>
<p>如果想只统计数目可以加上 <code>-c</code> 参数，<code>-i</code> 参数可以忽略大小写进行查找，whereis 的 <code>-b</code>、<code>-m</code>、<code>-s</code> 同样可以使用。</p>
<ul>
<li>  <strong><code>which</code> 小而精</strong></li>
</ul>
<p><code>which</code> 本身是 Shell 内建的一个命令，我们通常使用 <code>which</code> 来确定是否安装了某个指定的软件，因为它只从 <code>PATH</code> 环境变量指定的路径中去搜索命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> which <span class="built_in">man</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  <strong><code>find</code> 精而细</strong></li>
</ul>
<p><code>find</code> 应该是这几个命令中最强大的了，它不但可以通过文件类型、文件名进行查找而且可以根据文件的属性（如文件的时间戳，文件的权限等）进行搜索。<code>find</code> 命令强大到，要把它讲明白至少需要单独好几节课程才行，我们这里只介绍一些常用的内容。</p>
<p>这条命令表示去 /etc/ 目录下面 ，搜索名字叫做 interfaces 的文件或者目录。这是 find 命令最常见的格式，千万记住 find 的第一个参数是要搜索的地方：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="keyword">find</span> <span class="regexp">/etc/</span> -name interfaces</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意 find 命令的路径是作为第一个参数的， 基本命令格式为 find [path] [option] [action] 。</strong></p>
</blockquote>
<p>与时间相关的命令参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>-atime</code></td>
<td>最后访问时间</td>
</tr>
<tr>
<td><code>-ctime</code></td>
<td>最后修改文件内容的时间</td>
</tr>
<tr>
<td><code>-mtime</code></td>
<td>最后修改文件属性的时间</td>
</tr>
</tbody></table>
<p>下面以 <code>-mtime</code> 参数举例：</p>
<ul>
<li>  <code>-mtime n</code>：n 为数字，表示为在 n 天之前的“一天之内”修改过的文件</li>
<li>  <code>-mtime +n</code>：列出在 n 天之前（不包含 n 天本身）被修改过的文件</li>
<li>  <code>-mtime -n</code>：列出在 n 天之内（包含 n 天本身）被修改过的文件</li>
<li>  <code>-newer file</code>：file 为一个已存在的文件，列出比 file 还要新的文件名</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/welloderx/blog-img@master/2020-04/36-8.png"></p>
<p>列出 home 目录中，当天（24 小时之内）有改动的文件：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="builtin-name">find</span> ~ -mtime 0</span><br></pre></td></tr></table></figure>

<p>列出用户家目录下比 Code 文件夹新的文件：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">find</span> ~ -newer <span class="regexp">/home/</span>shiyanlou/Code</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>kuangbin专题一 - 简单搜索</title>
    <url>/posts/1040as3/</url>
    <content><![CDATA[<blockquote>
<p>专题链接：<a href="https://vjudge.net/article/187">https://vjudge.net/article/187</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center"><a href="https://vjudge.net/problem/POJ-1321"><strong>POJ 1321</strong></a> 棋盘问题</th>
<th><a href="https://vjudge.net/problem/POJ-2251"><strong>POJ 2251</strong></a> Dungeon Master</th>
<th><a href="https://vjudge.net/problem/POJ-3278"><strong>POJ 3278</strong></a> Catch That Cow</th>
<th><a href="https://vjudge.net/problem/POJ-3279"><strong>POJ 3279</strong></a> Fliptile</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://vjudge.net/problem/POJ-1426"><strong>POJ 1426</strong></a> Find The Multiple</td>
<td><a href="https://vjudge.net/problem/POJ-3126"><strong>POJ 3126</strong></a> Prime Path</td>
<td><a href="https://vjudge.net/problem/POJ-3087"><strong>POJ 3087</strong></a> Shuffle’m Up</td>
<td><a href="https://vjudge.net/problem/POJ-3414"><strong>POJ 3414</strong></a> Pots</td>
</tr>
<tr>
<td align="center"><a href="https://vjudge.net/problem/FZU-2150"><strong>FZU 2150</strong></a> Fire Game</td>
<td><a href="https://vjudge.net/problem/UVA-11624"><strong>UVA 11624</strong></a> Fire!</td>
<td><a href="https://vjudge.net/problem/POJ-3984"><strong>POJ 3984</strong></a> 迷宫问题</td>
<td><a href="https://vjudge.net/problem/HDU-1241"><strong>HDU 1241</strong></a> Oil Deposits</td>
</tr>
<tr>
<td align="center"><a href="https://vjudge.net/problem/HDU-1495"><strong>HDU 1495</strong></a> 非常可乐</td>
<td><a href="https://vjudge.net/problem/HDU-2612"><strong>HDU 2612</strong></a> Find a way</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
</tbody></table>
<span id="more"></span>
<blockquote>
<p>难度系数相对于这些题中最难题目来说，最高难度五颗星</p>
</blockquote>
<p>[TOC]</p>
<h3 id="POJ-1321-棋盘问题"><a href="#POJ-1321-棋盘问题" class="headerlink" title="POJ 1321 棋盘问题"></a><a href="https://vjudge.net/problem/POJ-1321"><strong>POJ 1321</strong></a> 棋盘问题</h3><ul>
<li><p>分析：二维平面搜索问题</p>
</li>
<li><p>思路：DFS + 回溯</p>
</li>
<li><p>评析：难度系数 ★</p>
</li>
<li><p>AC代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>,n,k;  <span class="comment">// sum记录路径个数 n记录棋盘维度 k记录需放的棋子个数 </span></span><br><span class="line"><span class="keyword">bool</span> label[<span class="number">10</span>], mat[<span class="number">10</span>][<span class="number">10</span>]; <span class="comment">//label标记已经选中的列 mat记录棋盘矩阵 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> line, <span class="keyword">int</span> t)</span> <span class="comment">// line行号 t已经放置的棋子个数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t == k) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(line &gt;= n || n - line &lt; k - t) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(line+<span class="number">1</span>, t);    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!label[i] &amp;&amp; mat[line][i])&#123;</span><br><span class="line">            label[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(line+<span class="number">1</span>, t+<span class="number">1</span>);</span><br><span class="line">            label[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> x;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; k)&#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">-1</span> &amp;&amp; k == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                cin &gt;&gt; x;</span><br><span class="line">                mat[i][j] = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(x == <span class="string">&#x27;#&#x27;</span>) mat[i][j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(label, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(label)); </span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="POJ-2251-Dungeon-Master"><a href="#POJ-2251-Dungeon-Master" class="headerlink" title="POJ 2251 Dungeon Master"></a><a href="https://vjudge.net/problem/POJ-2251"><strong>POJ 2251</strong></a> Dungeon Master</h3><ul>
<li><p>分析：三维空间搜索问题</p>
</li>
<li><p>思路：BFS</p>
</li>
<li><p>评析：难度系数 ★★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L,R,C;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x; <span class="comment">// L</span></span><br><span class="line">    <span class="keyword">int</span> y; <span class="comment">// R</span></span><br><span class="line">    <span class="keyword">int</span> z; <span class="comment">// C</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">point bgP,edP;</span><br><span class="line"><span class="keyword">bool</span> label[<span class="number">30</span>][<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;    <span class="comment">// number of steps</span></span><br><span class="line">    <span class="keyword">int</span> last_op; <span class="comment">//0:&#x27;up&#x27; 1:&#x27;down&#x27; 2:&#x27;left&#x27; 3:&#x27;right&#x27;  -1:&#x27;none&#x27; 4:&#x27;TOP’ 5:&#x27;BOTTOM&#x27; </span></span><br><span class="line">    point pos;</span><br><span class="line">    <span class="built_in">node</span>():<span class="built_in">n</span>(<span class="number">0</span>),<span class="built_in">last_op</span>(<span class="number">-1</span>)&#123;</span><br><span class="line">        pos.x = <span class="number">0</span>;</span><br><span class="line">        pos.y = <span class="number">0</span>;</span><br><span class="line">        pos.z = <span class="number">0</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">node</span>(point p, <span class="keyword">int</span> tn, <span class="keyword">int</span> tlast_op)&#123;</span><br><span class="line">        pos.x = p.x;</span><br><span class="line">        pos.y = p.y;</span><br><span class="line">        pos.z = p.z;</span><br><span class="line">        n = tn;</span><br><span class="line">        last_op = tlast_op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> node* pnode;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt; vector&lt; vector&lt;<span class="keyword">char</span>&gt; &gt; &gt; MAZE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MYOP</span><span class="params">(pnode node1, <span class="keyword">short</span> op, pnode NodeA)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NodeA-&gt;n = node1-&gt;n+<span class="number">1</span>;</span><br><span class="line">    NodeA-&gt;pos.x = node1-&gt;pos.x;</span><br><span class="line">    NodeA-&gt;pos.y = node1-&gt;pos.y;</span><br><span class="line">    NodeA-&gt;pos.z = node1-&gt;pos.z;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(op)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:&#123; <span class="comment">//up</span></span><br><span class="line">            NodeA-&gt;last_op = <span class="number">0</span>;</span><br><span class="line">            NodeA-&gt;pos.y--; </span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:&#123; <span class="comment">//down</span></span><br><span class="line">            NodeA-&gt;last_op = <span class="number">1</span>;</span><br><span class="line">            NodeA-&gt;pos.y++; </span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:&#123; <span class="comment">//left</span></span><br><span class="line">            NodeA-&gt;last_op = <span class="number">2</span>;</span><br><span class="line">            NodeA-&gt;pos.z--; </span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:&#123; <span class="comment">//right </span></span><br><span class="line">            NodeA-&gt;last_op = <span class="number">3</span>;</span><br><span class="line">            NodeA-&gt;pos.z++; </span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:&#123; <span class="comment">//TOP</span></span><br><span class="line">            NodeA-&gt;last_op = <span class="number">4</span>;</span><br><span class="line">            NodeA-&gt;pos.x++; </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:&#123; <span class="comment">//BOTTOM</span></span><br><span class="line">            NodeA-&gt;last_op = <span class="number">5</span>;</span><br><span class="line">            NodeA-&gt;pos.x--; </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> point &amp;p1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p1.x &gt;= <span class="number">0</span> &amp;&amp; p1.y &gt;= <span class="number">0</span> &amp;&amp; p1.z &gt;= <span class="number">0</span> &amp;&amp; p1.x &lt; L &amp;&amp; p1.y &lt;R &amp;&amp; p1.z &lt; C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(MAZE &amp;maze)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num = <span class="number">-1</span>;</span><br><span class="line">    queue&lt;pnode&gt; que;</span><br><span class="line">    pnode bgNode = <span class="keyword">new</span> <span class="built_in">node</span>(bgP, <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    pnode p,tmpN;</span><br><span class="line">    que.<span class="built_in">push</span>(bgNode);</span><br><span class="line">    label[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        p = que.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;pos.x == edP.x &amp;&amp; p-&gt;pos.y == edP.y &amp;&amp; p-&gt;pos.z == edP.z)</span><br><span class="line">        &#123;</span><br><span class="line">            num = p-&gt;n;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">short</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmpN = <span class="keyword">new</span> node;</span><br><span class="line">            <span class="built_in">MYOP</span>(p, i, tmpN);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(tmpN-&gt;pos) &amp;&amp; maze[tmpN-&gt;pos.x][tmpN-&gt;pos.y][tmpN-&gt;pos.z] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; !label[tmpN-&gt;pos.x][tmpN-&gt;pos.y][tmpN-&gt;pos.z])</span><br><span class="line">            &#123;</span><br><span class="line">                label[tmpN-&gt;pos.x][tmpN-&gt;pos.y][tmpN-&gt;pos.z] = <span class="number">1</span>;</span><br><span class="line">                que.<span class="built_in">push</span>(tmpN);</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j ,k;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;L&gt;&gt;R&gt;&gt;C)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L == <span class="number">0</span> &amp;&amp; R == <span class="number">0</span> &amp;&amp; C == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        MAZE maze;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L; i++)  <span class="comment">//lay</span></span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt; vector&lt;<span class="keyword">char</span>&gt; &gt; MAT;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; R; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                vector&lt;<span class="keyword">char</span>&gt; v;</span><br><span class="line">                <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; C; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    cin &gt;&gt; c; </span><br><span class="line">                    <span class="keyword">if</span>(c == <span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">                        bgP.x = i;</span><br><span class="line">                        bgP.y = j;</span><br><span class="line">                        bgP.z = k;</span><br><span class="line">                        c = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                        edP.x = i;</span><br><span class="line">                        edP.y = j;</span><br><span class="line">                        edP.z = k;</span><br><span class="line">                        c = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    v.<span class="built_in">push_back</span>(c);</span><br><span class="line">                    label[i][j][k] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                MAT.<span class="built_in">push_back</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">            maze.<span class="built_in">push_back</span>(MAT);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">BFS</span>(maze);</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">-1</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Trapped!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Escaped in &quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot; minute(s).&quot;</span> &lt;&lt; endl;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="POJ-3278-Catch-That-Cow"><a href="#POJ-3278-Catch-That-Cow" class="headerlink" title="POJ 3278 Catch That Cow"></a><a href="https://vjudge.net/problem/POJ-3278"><strong>POJ 3278</strong></a> Catch That Cow</h3><ul>
<li><p>分析：一维线性搜索问题</p>
</li>
<li><p>思路：BFS</p>
</li>
<li><p>评析：难度系数 ★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 100100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,K;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">    <span class="built_in">node</span>():<span class="built_in">pos</span>(<span class="number">0</span>),<span class="built_in">time</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> tpos, <span class="keyword">int</span> ttime):<span class="built_in">pos</span>(tpos), <span class="built_in">time</span>(ttime)&#123;    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ops[<span class="number">2</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> visit[MAX_LEN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; Que;</span><br><span class="line">    <span class="function">node <span class="title">firstNode</span><span class="params">(N,<span class="number">0</span>)</span></span>;</span><br><span class="line">    visit[N] = <span class="literal">true</span>;</span><br><span class="line">    node tN,tP;</span><br><span class="line">    Que.<span class="built_in">push</span>(firstNode);</span><br><span class="line">    <span class="keyword">while</span>(!Que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        tN = Que.<span class="built_in">front</span>();</span><br><span class="line">        Que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(tN.pos == K)&#123;</span><br><span class="line">            cout &lt;&lt; tN.time &lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tP.time = tN.time + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tP.pos = tN.pos + ops[i];</span><br><span class="line">            <span class="keyword">if</span>(tP.pos &gt;= <span class="number">0</span> &amp;&amp; tP.pos &lt; MAX_LEN &amp;&amp; !visit[tP.pos])</span><br><span class="line">            &#123;</span><br><span class="line">                Que.<span class="built_in">push</span>(tP);</span><br><span class="line">                visit[tP.pos] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        tP.pos = tN.pos &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(tP.pos &lt; MAX_LEN &amp;&amp; !visit[tP.pos])</span><br><span class="line">        &#123;</span><br><span class="line">            visit[tP.pos] = <span class="number">1</span>;</span><br><span class="line">            Que.<span class="built_in">push</span>(tP);</span><br><span class="line">        &#125;</span><br><span class="line">                        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; K;</span><br><span class="line">    <span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(visit));</span><br><span class="line">    <span class="built_in">BFS</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="POJ-3279-Fliptile"><a href="#POJ-3279-Fliptile" class="headerlink" title="POJ 3279 Fliptile"></a><a href="https://vjudge.net/problem/POJ-3279"><strong>POJ 3279</strong></a> Fliptile</h3><ul>
<li><p>分析：切入点很难想到，编码时无法下手</p>
</li>
<li><p>思路：状态压缩 + 枚举解空间</p>
<ol>
<li><p>在所有的<code>解空间</code>中，一旦第一行确定了，后面的几行也全部确定。</p>
<p>先根据第一行的枚举方案，翻转相应的方块，在翻转第二行时，要保证第一行中的1变为0，所以第二行的方案由第一行确定。</p>
</li>
<li><p>枚举第一行的所有方案，就是枚举所有的解空间，为<code>2^M</code>种</p>
</li>
<li><p>状态压缩说明：利用循环，枚举出<code>0~2^M-1</code>之间的数，利用位运算，将对应的二进制0和1赋值到解矩阵的第一行。</p>
</li>
<li><p>并不是每一种方案都有解，当所有行均翻转完毕，检查最后一行是否全部为0，为0，表示该方案是可行解。</p>
</li>
</ol>
</li>
<li><p>评析：难度系数 ★★★★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LEN = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">int</span> M,N;</span><br><span class="line"><span class="keyword">bool</span> MAT[MAX_LEN][MAX_LEN];   <span class="comment">// COPY from RMAT</span></span><br><span class="line"><span class="keyword">bool</span> RMAT[MAX_LEN][MAX_LEN];  <span class="comment">// RAW MAT</span></span><br><span class="line"><span class="keyword">int</span> FLIP[MAX_LEN][MAX_LEN];</span><br><span class="line"><span class="keyword">int</span> bestFLIP[MAX_LEN][MAX_LEN];  <span class="comment">// optimize choice</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> min_num;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MAT[x][y] ^= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x - <span class="number">1</span> &gt; <span class="number">-1</span>) MAT[x<span class="number">-1</span>][y] ^= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(y - <span class="number">1</span> &gt; <span class="number">-1</span>) MAT[x][y<span class="number">-1</span>] ^= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x + <span class="number">1</span> &lt; M) MAT[x+<span class="number">1</span>][y] ^= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(y + <span class="number">1</span> &lt; N) MAT[x][y+<span class="number">1</span>] ^= <span class="number">1</span>;     </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(MAT, RMAT, <span class="built_in"><span class="keyword">sizeof</span></span>(MAT));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// flip the first line</span></span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">if</span>(FLIP[<span class="number">0</span>][i])&#123;</span><br><span class="line">        <span class="built_in">flip</span>(<span class="number">0</span>,i);</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// flip the following lines until the last line</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(MAT[i<span class="number">-1</span>][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">flip</span>(i,j);</span><br><span class="line">                FLIP[i][j]++;</span><br><span class="line">                num++; </span><br><span class="line">                <span class="keyword">if</span>(num &gt; min_num) <span class="keyword">return</span>;</span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// check the last line, if each element in the last line is zero, it would be one solution</span></span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">if</span>(MAT[M<span class="number">-1</span>][i])&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag &amp;&amp; (num &lt; min_num || min_num &lt; <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        min_num = num;</span><br><span class="line">        <span class="built_in">memcpy</span>(bestFLIP, FLIP, <span class="built_in"><span class="keyword">sizeof</span></span>(FLIP));</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; M &gt;&gt; N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(MAT, <span class="literal">false</span>, MAX_LEN*MAX_LEN);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">                cin &gt;&gt; RMAT[i][j];</span><br><span class="line">        &#125; </span><br><span class="line">        min_num = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// generate 2^N situation</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; N); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(FLIP, <span class="number">0</span>, MAX_LEN*MAX_LEN*<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                FLIP[<span class="number">0</span>][N-j<span class="number">-1</span>] = (i &gt;&gt; j) &amp; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">search</span>(); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min_num != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, bestFLIP[i][j], (j == N<span class="number">-1</span>)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;IMPOSSIBLE\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="POJ-1426-Find-The-Multiple"><a href="#POJ-1426-Find-The-Multiple" class="headerlink" title="POJ 1426 Find The Multiple"></a><a href="https://vjudge.net/problem/POJ-1426"><strong>POJ 1426</strong></a> Find The Multiple</h3><ul>
<li><p>分析：不容易想到枚举解空间，需要从输出入手</p>
</li>
<li><p>思路：DFS枚举解空间 </p>
<ol>
<li><p>枚举解空间，先从1开始，如下：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">       <span class="number">1</span></span><br><span class="line">    /    <span class="string">\</span> </span><br><span class="line">   <span class="number">10</span>    <span class="number">11</span></span><br><span class="line">  / <span class="string">\</span>    / <span class="string">\</span></span><br><span class="line"><span class="number">100</span> <span class="number">101</span> <span class="number">110</span> <span class="number">111</span></span><br></pre></td></tr></table></figure>
</li>
<li><p> 可以发现解空间为二叉树结构，可以用数组结构代替</p>
</li>
</ol>
</li>
<li><p>评析：难度系数 ★★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; solution;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        solution.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; ;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            solution.<span class="built_in">push_back</span>(solution[i/<span class="number">2</span>]*<span class="number">10</span> + i%<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(solution[i] % n == <span class="number">0</span>)&#123;</span><br><span class="line">                cout &lt;&lt; solution[i] &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        solution.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="POJ-3126-Prime-Path"><a href="#POJ-3126-Prime-Path" class="headerlink" title="POJ 3126 Prime Path"></a><a href="https://vjudge.net/problem/POJ-3126"><strong>POJ 3126</strong></a> Prime Path</h3><ul>
<li><p>分析：搜索状态变化主要依据每一位的数字从0-9</p>
</li>
<li><p>思路：BFS</p>
<p>可以将1000-9999之间的所有质数一开始就判断好</p>
</li>
<li><p>评析：难度系数 ★★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> prime[<span class="number">9000</span>]; <span class="comment">//store prime</span></span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">9000</span>];</span><br><span class="line"><span class="keyword">int</span> n,t1,t2,t3,t4;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">sqrt</span>(t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tmp; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_primeArr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9000</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isPrime</span>(i+<span class="number">1000</span>)) prime[i] = <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">node</span>():<span class="built_in">x</span>(<span class="number">0</span>), <span class="built_in">num</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2):<span class="built_in">x</span>(x1), <span class="built_in">num</span>(x2)&#123;&#125;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; QUE;</span><br><span class="line">    <span class="function">node <span class="title">firstNode</span><span class="params">(t1,<span class="number">0</span>)</span></span>;</span><br><span class="line">    node N1, N2; </span><br><span class="line">    QUE.<span class="built_in">push</span>(firstNode);</span><br><span class="line">    visit[t1<span class="number">-1000</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">while</span>(!QUE.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        N1 = QUE.<span class="built_in">front</span>();</span><br><span class="line">        QUE.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(N1.x == t2)&#123;</span><br><span class="line">            cout &lt;&lt; N1.num &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        N2.num = N1.num + <span class="number">1</span>;</span><br><span class="line">        t4 = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = !<span class="built_in"><span class="keyword">bool</span></span>(i); j &lt; <span class="number">10</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                t3 = N1.x % t4 + ((N1.x/(t4*<span class="number">10</span>))*<span class="number">10</span> + j)*t4;</span><br><span class="line">                <span class="keyword">if</span>(prime[t3<span class="number">-1000</span>] &amp;&amp; !visit[t3<span class="number">-1000</span>])&#123;</span><br><span class="line">                    visit[t3<span class="number">-1000</span>] = <span class="number">1</span>;</span><br><span class="line">                    N2.x = t3; </span><br><span class="line">                    QUE.<span class="built_in">push</span>(N2);</span><br><span class="line">                &#125;        </span><br><span class="line">            &#125;</span><br><span class="line">            t4 /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(prime, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(prime));</span><br><span class="line">    <span class="built_in">init_primeArr</span>();</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(visit));</span><br><span class="line">        cin &gt;&gt; t1 &gt;&gt; t2;</span><br><span class="line">        <span class="built_in">BFS</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="POJ-3087-Shuffle’m-Up"><a href="#POJ-3087-Shuffle’m-Up" class="headerlink" title="POJ 3087 Shuffle’m Up"></a><a href="https://vjudge.net/problem/POJ-3087"><strong>POJ 3087</strong></a> Shuffle’m Up</h3><ul>
<li><p>分析：模拟整个过程</p>
</li>
<li><p>思路：暴力模拟</p>
<p>本人在编写时，为了优化，将两个栈放在一个数组中，利用数组换名，简化过程</p>
<p>结束条件：（1）成功：找到了目标 （2）失败：<strong>模拟时出现的状态在之前出现过</strong></p>
</li>
<li><p>评析：难度系数 ★★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LEN = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">char</span> L1[MAX_LEN*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">char</span> L2[MAX_LEN*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">char</span> *PL1;</span><br><span class="line"><span class="keyword">char</span> *PL2;</span><br><span class="line"><span class="keyword">char</span> *PTMP;</span><br><span class="line"><span class="keyword">int</span> LN;</span><br><span class="line">set&lt;string&gt; MYSET;</span><br><span class="line"><span class="keyword">int</span> time;</span><br><span class="line">string TARGET;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shuffle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(PL1)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(s2 == TARGET)&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        time++;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LN*<span class="number">2</span>; i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PL2[i] = PL1[j+LN];</span><br><span class="line">            PL2[i+<span class="number">1</span>] = PL1[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function">string <span class="title">s</span><span class="params">(PL2)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(s == TARGET)&#123;</span><br><span class="line">            <span class="keyword">return</span> time;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(MYSET.<span class="built_in">find</span>(s) != MYSET.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            MYSET.<span class="built_in">insert</span>(s);</span><br><span class="line">             PTMP = PL1;</span><br><span class="line">             PL1 = PL2;</span><br><span class="line">             PL2 = PTMP;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; LN;</span><br><span class="line">        cin &gt;&gt; L1;</span><br><span class="line">        cin &gt;&gt; L1+LN;</span><br><span class="line">        cin &gt;&gt; TARGET;</span><br><span class="line">        L1[<span class="number">2</span>*LN] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        L2[<span class="number">2</span>*LN] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        PL1 = L1; </span><br><span class="line">        PL2 = L2;</span><br><span class="line">        time = <span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">shuffle</span>() &lt;&lt; endl;</span><br><span class="line">        MYSET.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="POJ-3414-Pots"><a href="#POJ-3414-Pots" class="headerlink" title="POJ 3414 Pots"></a><a href="https://vjudge.net/problem/POJ-3414"><strong>POJ 3414</strong></a> Pots</h3><ul>
<li><p>分析：挺简单的，状态变化的动作已经给出了</p>
</li>
<li><p>思路：BFS</p>
<p>操作过程记录可以利用字符串进行记录。</p>
</li>
<li><p>评析：难度系数 ★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LEN = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> A,B,K; <span class="comment">//volumn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> visit[MAX_LEN][MAX_LEN];</span><br><span class="line">string ops[<span class="number">6</span>] = &#123;<span class="string">&quot;FILL(1)&quot;</span>,<span class="string">&quot;FILL(2)&quot;</span>,<span class="string">&quot;DROP(1)&quot;</span>,<span class="string">&quot;DROP(2)&quot;</span>,<span class="string">&quot;POUR(1,2)&quot;</span>,<span class="string">&quot;POUR(2,1)&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;    </span><br><span class="line">    string op; <span class="comment">// record the operation</span></span><br><span class="line">    <span class="comment">// 1: fill(1) 2:fill(2) 3:drop(1) 4:drop(2) 5:pour(1,2) 6:pour(2,1)</span></span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2, string x3):<span class="built_in">a</span>(x1), <span class="built_in">b</span>(x2), <span class="built_in">op</span>(x3)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(op)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">            a = A;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">            b = B;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">            b = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">            <span class="keyword">if</span>(B-b &gt;= a)</span><br><span class="line">            &#123;</span><br><span class="line">                b += a;</span><br><span class="line">                a = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                a -= B-b;</span><br><span class="line">                b = B;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:&#123;</span><br><span class="line">            <span class="keyword">if</span>(A-a &gt;= b)</span><br><span class="line">            &#123;</span><br><span class="line">                a += b;</span><br><span class="line">                b = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                b -= A-a;</span><br><span class="line">                a = A;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; QUE;</span><br><span class="line">    QUE.<span class="built_in">push</span>(<span class="built_in">node</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">    visit[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(!QUE.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node STATE = QUE.<span class="built_in">front</span>();</span><br><span class="line">        QUE.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(STATE.a == K || STATE.b == K)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; STATE.op.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; STATE.op.<span class="built_in">length</span>(); i++)</span><br><span class="line">                cout &lt;&lt; ops[STATE.op[i]-<span class="string">&#x27;0&#x27;</span>] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            x = STATE.a;</span><br><span class="line">            y = STATE.b;</span><br><span class="line">            <span class="built_in">operation</span>(x,y,i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(!visit[x][y])</span><br><span class="line">            &#123;</span><br><span class="line">                visit[x][y] = <span class="number">1</span>;</span><br><span class="line">                QUE.<span class="built_in">push</span>(<span class="built_in">node</span>(x, y, STATE.op+(<span class="built_in"><span class="keyword">char</span></span>(<span class="string">&#x27;0&#x27;</span>+i))));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; A &gt;&gt; B &gt;&gt; K)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(visit));</span><br><span class="line">        <span class="built_in">BFS</span>();</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="FZU-2150-Fire-Game"><a href="#FZU-2150-Fire-Game" class="headerlink" title="FZU 2150 Fire Game"></a><a href="https://vjudge.net/problem/FZU-2150"><strong>FZU 2150</strong></a> Fire Game</h3><ul>
<li><p>分析：类似于岛问题</p>
</li>
<li><p>思路：DFS + BFS </p>
<ol>
<li><p>先用DFS查看非连通的块的个数，个数大于2，直接输出-1</p>
</li>
<li><p>当块的个数为1或2时，选出两个点作为起点</p>
<p>注：块的个数为1时，起点可以是同一点也可以是不同点</p>
<p>注：块的个数为2时，两个起点必须分布于两个块中</p>
</li>
<li><p>选出起点后，可以用BFS进行搜索</p>
<p>注：BFS搜索时，如果存在时间大于之前找出的最小时间的状态，可以直接结束本次搜索过程，用于加速。</p>
</li>
</ol>
</li>
<li><p>评析：难度系数 ★★★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="built_in">point</span>(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2): <span class="built_in">x</span>(x1), <span class="built_in">y</span>(x2)&#123;&#125;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,time;</span><br><span class="line">    <span class="built_in">state</span>(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2, <span class="keyword">int</span> x3): <span class="built_in">x</span>(x1), <span class="built_in">y</span>(x2), <span class="built_in">time</span>(x3)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LEN = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, min_step;</span><br><span class="line"><span class="keyword">char</span> maze[MAX_LEN][MAX_LEN];</span><br><span class="line"></span><br><span class="line"><span class="comment">// record grass pos</span></span><br><span class="line">vector&lt;point&gt; grassPos;</span><br><span class="line"><span class="keyword">bool</span> grassType[MAX_LEN][MAX_LEN];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> blockNum,visitNum;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX_LEN][MAX_LEN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// to compute num of block</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x == N || y == M || visit[x][y] || maze[x][y] == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    visit[x][y] = <span class="number">1</span>;</span><br><span class="line">    grassType[x][y] = blockNum;</span><br><span class="line">    visitNum++;</span><br><span class="line">    <span class="built_in">dfs</span>(x+<span class="number">1</span>, y);</span><br><span class="line">    <span class="built_in">dfs</span>(x<span class="number">-1</span>, y);</span><br><span class="line">    <span class="built_in">dfs</span>(x, y+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(x, y<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(visit));</span><br><span class="line">    queue&lt;state&gt; que;</span><br><span class="line">    visit[x1][y1] = <span class="number">1</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(<span class="built_in">state</span>(x1,y1,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">2</span>)&#123;</span><br><span class="line">        visit[x2][y2] = <span class="number">1</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(<span class="built_in">state</span>(x2, y2, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">state <span class="title">staFire</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        staFire = que.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">if</span>(staFire.time &gt; min_step) <span class="keyword">return</span>;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(staFire.x &gt; <span class="number">0</span> &amp;&amp; !visit[staFire.x<span class="number">-1</span>][staFire.y] &amp;&amp; maze[staFire.x<span class="number">-1</span>][staFire.y] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[staFire.x<span class="number">-1</span>][staFire.y] = <span class="number">1</span>;</span><br><span class="line">            que.<span class="built_in">push</span>(<span class="built_in">state</span>(staFire.x<span class="number">-1</span>, staFire.y, staFire.time+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(staFire.y &gt; <span class="number">0</span> &amp;&amp; !visit[staFire.x][staFire.y<span class="number">-1</span>] &amp;&amp; maze[staFire.x][staFire.y<span class="number">-1</span>] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[staFire.x][staFire.y<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">            que.<span class="built_in">push</span>(<span class="built_in">state</span>(staFire.x, staFire.y<span class="number">-1</span>, staFire.time+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(staFire.x &lt; N<span class="number">-1</span> &amp;&amp; !visit[staFire.x+<span class="number">1</span>][staFire.y] &amp;&amp; maze[staFire.x+<span class="number">1</span>][staFire.y] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[staFire.x+<span class="number">1</span>][staFire.y] = <span class="number">1</span>;</span><br><span class="line">            que.<span class="built_in">push</span>(<span class="built_in">state</span>(staFire.x+<span class="number">1</span>, staFire.y, staFire.time+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(staFire.y &lt; M<span class="number">-1</span> &amp;&amp; !visit[staFire.x][staFire.y+<span class="number">1</span>] &amp;&amp; maze[staFire.x][staFire.y+<span class="number">1</span>] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[staFire.x][staFire.y+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            que.<span class="built_in">push</span>(<span class="built_in">state</span>(staFire.x, staFire.y+<span class="number">1</span>, staFire.time+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(min_step &gt; staFire.time) min_step = staFire.time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(blockNum == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grassPos.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grassPos.<span class="built_in">size</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">                    <span class="built_in">bfs</span>(<span class="number">2</span>,grassPos[i].x,grassPos[i].y,grassPos[j].x,grassPos[j].y);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">bfs</span>(<span class="number">1</span>,grassPos[i].x,grassPos[i].y,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grassPos.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(grassType[grassPos[i].x][grassPos[i].y] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grassPos.<span class="built_in">size</span>(); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(grassType[grassPos[j].x][grassPos[j].y])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">bfs</span>(<span class="number">2</span>,grassPos[i].x,grassPos[i].y,grassPos[j].x,grassPos[j].y);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; N; ii++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> jj = <span class="number">0</span>; jj &lt; M; jj++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; maze[ii][jj];</span><br><span class="line">                <span class="keyword">if</span>(maze[ii][jj] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                    grassPos.<span class="built_in">push_back</span>(<span class="built_in">point</span>(ii, jj));</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(visit));</span><br><span class="line">        <span class="built_in">memset</span>(grassType, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(grassType));</span><br><span class="line">        visitNum = <span class="number">0</span>;</span><br><span class="line">        blockNum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(grassPos[<span class="number">0</span>].x,grassPos[<span class="number">0</span>].y);</span><br><span class="line">        <span class="keyword">if</span>(visitNum != grassPos.<span class="built_in">size</span>())&#123;</span><br><span class="line">            blockNum = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line">            <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; grassPos.<span class="built_in">size</span>(); k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!visit[grassPos[k].x][grassPos[k].y]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">dfs</span>(grassPos[k].x, grassPos[k].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(visitNum == grassPos.<span class="built_in">size</span>())&#123;</span><br><span class="line">            min_step = <span class="number">200</span>;</span><br><span class="line">            <span class="built_in">BFS</span>();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Case %d: %d\n&quot;</span>, i+<span class="number">1</span>, min_step);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Case %d: %d\n&quot;</span>, i+<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        grassPos.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="UVA-11624-Fire"><a href="#UVA-11624-Fire" class="headerlink" title="UVA 11624 Fire!"></a><a href="https://vjudge.net/problem/UVA-11624"><strong>UVA 11624</strong></a> Fire!</h3><ul>
<li><p>分析：两个起点的BFS问题，且起点对象特征不同</p>
</li>
<li><p>思路：BFS</p>
<ol>
<li><p>两个起点：人 、火</p>
<p>人的状态需要记录时间，火不需要</p>
</li>
<li><p>BFS搜索时，处于同一时间的人的状态全部出队时，才能进行一轮火的扩散过程</p>
<p>难点在于这一步</p>
</li>
</ol>
</li>
<li><p>评析：难度系数 ★★★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LEN = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> R,C; </span><br><span class="line"><span class="keyword">char</span> maze[MAX_LEN][MAX_LEN]; </span><br><span class="line"><span class="keyword">bool</span> visit[MAX_LEN][MAX_LEN];</span><br><span class="line"><span class="keyword">int</span> JoeX, JoeY;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">statePeo</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y; <span class="comment">//position    </span></span><br><span class="line">    <span class="keyword">int</span> time; <span class="comment">// time</span></span><br><span class="line">    <span class="built_in">statePeo</span>(<span class="keyword">int</span> p1, <span class="keyword">int</span> p2, <span class="keyword">int</span> p3):<span class="built_in">x</span>(p1), <span class="built_in">y</span>(p2), <span class="built_in">time</span>(p3)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stateFire</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y; <span class="comment">//position</span></span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">    <span class="built_in">stateFire</span>(<span class="keyword">int</span> p1, <span class="keyword">int</span> p2, <span class="keyword">int</span> p3):<span class="built_in">x</span>(p1), <span class="built_in">y</span>(p2), <span class="built_in">time</span>(p3)&#123;&#125;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;stateFire&gt; fireBeginVec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;statePeo&gt; QuePeo;</span><br><span class="line">    queue&lt;stateFire&gt; QueFire;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fireBeginVec.<span class="built_in">size</span>(); i++)</span><br><span class="line">        QueFire.<span class="built_in">push</span>(fireBeginVec[i]);</span><br><span class="line">    visit[JoeX][JoeY] = <span class="number">1</span>;</span><br><span class="line">    QuePeo.<span class="built_in">push</span>(<span class="built_in">statePeo</span>(JoeX, JoeY, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> lastTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!QuePeo.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        statePeo staPeo = QuePeo.<span class="built_in">front</span>();</span><br><span class="line">        QuePeo.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">while</span>(!QueFire.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            stateFire staFire = QueFire.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span>(staFire.time != staPeo.time) <span class="keyword">break</span>;</span><br><span class="line">            QueFire.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(staFire.x &gt; <span class="number">1</span> &amp;&amp; maze[staFire.x<span class="number">-1</span>][staFire.y] == <span class="string">&#x27;.&#x27;</span>) &#123;maze[staFire.x<span class="number">-1</span>][staFire.y] = <span class="string">&#x27;F&#x27;</span>; QueFire.<span class="built_in">push</span>(<span class="built_in">stateFire</span>(staFire.x<span class="number">-1</span>,staFire.y,staFire.time+<span class="number">1</span>));&#125;</span><br><span class="line">            <span class="keyword">if</span>(staFire.y &gt; <span class="number">1</span> &amp;&amp; maze[staFire.x][staFire.y<span class="number">-1</span>] == <span class="string">&#x27;.&#x27;</span>) &#123;maze[staFire.x][staFire.y<span class="number">-1</span>] = <span class="string">&#x27;F&#x27;</span>; QueFire.<span class="built_in">push</span>(<span class="built_in">stateFire</span>(staFire.x,staFire.y<span class="number">-1</span>,staFire.time+<span class="number">1</span>));&#125;</span><br><span class="line">            <span class="keyword">if</span>(staFire.x &lt; R &amp;&amp; maze[staFire.x+<span class="number">1</span>][staFire.y] == <span class="string">&#x27;.&#x27;</span>) &#123;maze[staFire.x+<span class="number">1</span>][staFire.y] = <span class="string">&#x27;F&#x27;</span>; QueFire.<span class="built_in">push</span>(<span class="built_in">stateFire</span>(staFire.x+<span class="number">1</span>,staFire.y,staFire.time+<span class="number">1</span>));&#125;</span><br><span class="line">            <span class="keyword">if</span>(staFire.y &lt; C &amp;&amp; maze[staFire.x][staFire.y+<span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>) &#123;maze[staFire.x][staFire.y+<span class="number">1</span>] = <span class="string">&#x27;F&#x27;</span>; QueFire.<span class="built_in">push</span>(<span class="built_in">stateFire</span>(staFire.x,staFire.y+<span class="number">1</span>,staFire.time+<span class="number">1</span>));&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(staPeo.x == <span class="number">1</span> || staPeo.y == <span class="number">1</span> || staPeo.x  == R || staPeo.y == C)&#123;</span><br><span class="line">            cout &lt;&lt; staPeo.time + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(staPeo.x &gt; <span class="number">1</span> &amp;&amp; maze[staPeo.x<span class="number">-1</span>][staPeo.y] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; !visit[staPeo.x<span class="number">-1</span>][staPeo.y])</span><br><span class="line">        &#123;</span><br><span class="line">            visit[staPeo.x<span class="number">-1</span>][staPeo.y] = <span class="number">1</span>;</span><br><span class="line">            QuePeo.<span class="built_in">push</span>(<span class="built_in">statePeo</span>(staPeo.x<span class="number">-1</span>, staPeo.y, staPeo.time + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(staPeo.y &gt; <span class="number">1</span> &amp;&amp; maze[staPeo.x][staPeo.y<span class="number">-1</span>] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; !visit[staPeo.x][staPeo.y<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            visit[staPeo.x][staPeo.y<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">            QuePeo.<span class="built_in">push</span>(<span class="built_in">statePeo</span>(staPeo.x, staPeo.y<span class="number">-1</span>, staPeo.time + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(staPeo.x &lt; R &amp;&amp; maze[staPeo.x+<span class="number">1</span>][staPeo.y] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; !visit[staPeo.x+<span class="number">1</span>][staPeo.y])</span><br><span class="line">        &#123;</span><br><span class="line">            visit[staPeo.x+<span class="number">1</span>][staPeo.y] = <span class="number">1</span>;</span><br><span class="line">            QuePeo.<span class="built_in">push</span>(<span class="built_in">statePeo</span>(staPeo.x+<span class="number">1</span>, staPeo.y, staPeo.time + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(staPeo.y &lt; C &amp;&amp; maze[staPeo.x][staPeo.y+<span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; !visit[staPeo.x][staPeo.y+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            visit[staPeo.x][staPeo.y+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            QuePeo.<span class="built_in">push</span>(<span class="built_in">statePeo</span>(staPeo.x, staPeo.y+<span class="number">1</span>, staPeo.time + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;IMPOSSIBLE&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; R &gt;&gt; C;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; maze[i][j];</span><br><span class="line">                <span class="keyword">if</span>(maze[i][j] == <span class="string">&#x27;J&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    JoeX = i;</span><br><span class="line">                    JoeY = j;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maze[i][j] == <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">                    fireBeginVec.<span class="built_in">push_back</span>(<span class="built_in">stateFire</span>(i,j,<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(visit));</span><br><span class="line">        <span class="built_in">BFS</span>();</span><br><span class="line">        fireBeginVec.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="POJ-3984-迷宫问题"><a href="#POJ-3984-迷宫问题" class="headerlink" title="POJ 3984 迷宫问题"></a><a href="https://vjudge.net/problem/POJ-3984"><strong>POJ 3984</strong></a> 迷宫问题</h3><ul>
<li><p>分析：水题，看评论在审查时只有一个测试用例</p>
</li>
<li><p>思路：DFS + 回溯</p>
</li>
<li><p>评析：难度系数  ★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LEN = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">bool</span> maze[MAX_LEN][MAX_LEN];</span><br><span class="line"><span class="keyword">bool</span> visit[MAX_LEN][MAX_LEN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">4</span> &amp;&amp; y == <span class="number">4</span>)&#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.<span class="built_in">size</span>(); i+=<span class="number">2</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; vec[i] &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; vec[i+<span class="number">1</span>] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">4</span> &amp;&amp; !visit[x+<span class="number">1</span>][y] &amp;&amp; !maze[x+<span class="number">1</span>][y])&#123;</span><br><span class="line">        visit[x+<span class="number">1</span>][y] = <span class="number">1</span>;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(x+<span class="number">1</span>);</span><br><span class="line">        vec.<span class="built_in">push_back</span>(y);</span><br><span class="line">        <span class="built_in">DFS</span>(x+<span class="number">1</span>, y);</span><br><span class="line">        visit[x+<span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">        vec.<span class="built_in">pop_back</span>();</span><br><span class="line">        vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(y &lt; <span class="number">4</span> &amp;&amp; !visit[x][y+<span class="number">1</span>] &amp;&amp; !maze[x][y+<span class="number">1</span>])&#123;</span><br><span class="line">        visit[x][y+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(x);</span><br><span class="line">        vec.<span class="built_in">push_back</span>(y+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">DFS</span>(x, y+<span class="number">1</span>);</span><br><span class="line">        vec.<span class="built_in">pop_back</span>();</span><br><span class="line">        vec.<span class="built_in">pop_back</span>();</span><br><span class="line">        visit[x][y+<span class="number">1</span>] = <span class="number">0</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(visit));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">            cin &gt;&gt; maze[i][j];</span><br><span class="line">    visit[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">DFS</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="HDU-1241-Oil-Deposits"><a href="#HDU-1241-Oil-Deposits" class="headerlink" title="HDU 1241 Oil Deposits"></a><a href="https://vjudge.net/problem/HDU-1241"><strong>HDU 1241</strong></a> Oil Deposits</h3><ul>
<li><p>分析：这题貌似可以用并查集来做</p>
</li>
<li><p>思路：DFS</p>
</li>
<li><p>评析：难度系数 ★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LEN = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">char</span> maze[MAX_LEN][MAX_LEN];</span><br><span class="line"><span class="comment">//bool visit[MAX_LEN][MAX_LEN];</span></span><br><span class="line"><span class="keyword">int</span> M, N;</span><br><span class="line"><span class="keyword">int</span> blockNum; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x == M || y == N  || maze[x][y] == <span class="string">&#x27;*&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    maze[x][y] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(x<span class="number">-1</span>, y); <span class="built_in">dfs</span>(x+<span class="number">1</span>, y); <span class="built_in">dfs</span>(x, y<span class="number">-1</span>); <span class="built_in">dfs</span>(x, y+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(x<span class="number">-1</span>, y<span class="number">-1</span>); <span class="built_in">dfs</span>(x+<span class="number">1</span>, y+<span class="number">1</span>); <span class="built_in">dfs</span>(x+<span class="number">1</span>, y<span class="number">-1</span>); <span class="built_in">dfs</span>(x<span class="number">-1</span>, y+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; M &gt;&gt; N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(M == <span class="number">0</span> &amp;&amp; N == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">                cin &gt;&gt; maze[i][j];</span><br><span class="line">        blockNum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//memset(visit, 0, sizeof(visit));</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(maze[i][j] == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">dfs</span>(i,j);</span><br><span class="line">                    blockNum ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        cout &lt;&lt; blockNum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="HDU-1495-非常可乐"><a href="#HDU-1495-非常可乐" class="headerlink" title="HDU 1495 非常可乐"></a><a href="https://vjudge.net/problem/HDU-1495"><strong>HDU 1495</strong></a> 非常可乐</h3><ul>
<li><p>分析：类似于前面的<code>POJ3414 Pots</code></p>
</li>
<li><p>思路：BFS</p>
<p>最终，只要满足S、N、M三个对象中，两个容器的水量均分，另一容器为空即可。</p>
<p>需要容器没有水时，不要执行将该容器倒水到其他容器（刚开始没注意到这个问题）</p>
</li>
<li><p>评析：难度系数★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LEN = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> INPUT[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> visit[MAX_LEN][MAX_LEN][MAX_LEN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> volumn[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">    <span class="built_in">state</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> m)&#123;</span><br><span class="line">        volumn[<span class="number">0</span>] = x;</span><br><span class="line">        volumn[<span class="number">1</span>] = y;</span><br><span class="line">        volumn[<span class="number">2</span>] = z; </span><br><span class="line">        time = m;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pour</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> &amp;x1, <span class="keyword">int</span> &amp;x2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t1 = INPUT[to] - x2;</span><br><span class="line">    <span class="keyword">if</span>(t1 &gt;= x1)&#123;</span><br><span class="line">        x2 += x1;</span><br><span class="line">        x1 = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        x2 = INPUT[to];</span><br><span class="line">        x1 -= t1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;state&gt; que;</span><br><span class="line">    visit[INPUT[<span class="number">0</span>]][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(<span class="built_in">state</span>(INPUT[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> t; </span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        state STA = que.<span class="built_in">front</span>();</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            <span class="keyword">if</span>(STA.volumn[i] == INPUT[<span class="number">0</span>]/<span class="number">2</span>) t++; </span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">2</span>)&#123;</span><br><span class="line">            cout &lt;&lt; STA.time &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i != j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(STA.volumn[i] == <span class="number">0</span>) <span class="keyword">continue</span>;  <span class="comment">//注意这里，如果不判断，会多计数一次time </span></span><br><span class="line">                    <span class="function">state <span class="title">sta</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, STA.time+<span class="number">1</span>)</span></span>;</span><br><span class="line">                    sta.volumn[i] = STA.volumn[i];</span><br><span class="line">                    sta.volumn[j] = STA.volumn[j];</span><br><span class="line">                    <span class="built_in">pour</span>(i, j, sta.volumn[i],sta.volumn[j]);</span><br><span class="line">                    sta.volumn[<span class="number">3</span>-i-j] = STA.volumn[<span class="number">3</span>-i-j];</span><br><span class="line">                    <span class="keyword">if</span>(!visit[sta.volumn[<span class="number">0</span>]][sta.volumn[<span class="number">1</span>]][sta.volumn[<span class="number">2</span>]])</span><br><span class="line">                    &#123;</span><br><span class="line">                        visit[sta.volumn[<span class="number">0</span>]][sta.volumn[<span class="number">1</span>]][sta.volumn[<span class="number">2</span>]] = <span class="number">1</span>;</span><br><span class="line">                        que.<span class="built_in">push</span>(sta);    </span><br><span class="line">                    &#125;    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; INPUT[<span class="number">0</span>] &gt;&gt; INPUT[<span class="number">1</span>] &gt;&gt; INPUT[<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(INPUT[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; INPUT[<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; INPUT[<span class="number">2</span>] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(INPUT[<span class="number">0</span>] % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(visit));</span><br><span class="line">            <span class="built_in">bfs</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="HDU-2612-Find-a-way"><a href="#HDU-2612-Find-a-way" class="headerlink" title="HDU 2612 Find a way"></a><a href="https://vjudge.net/problem/HDU-2612"><strong>HDU 2612</strong></a> Find a way</h3><ul>
<li><p>思路：两次BFS计算两人到每个KFC的最短时间，最后查看到那个KFC时长最短</p>
</li>
<li><p>评析：难度系数★★★</p>
</li>
<li><p>AC代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LEN = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> maze[MAX_LEN][MAX_LEN];</span><br><span class="line"><span class="keyword">bool</span> visit[MAX_LEN][MAX_LEN];</span><br><span class="line"><span class="keyword">int</span> KFC[MAX_LEN][MAX_LEN];</span><br><span class="line"><span class="keyword">int</span> min_time;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,time;</span><br><span class="line">    <span class="built_in">state</span>(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2, <span class="keyword">int</span> x3):<span class="built_in">x</span>(x1), <span class="built_in">y</span>(x2),<span class="built_in">time</span>(x3)&#123;&#125;</span><br><span class="line">    <span class="built_in">state</span>():<span class="built_in">x</span>(<span class="number">0</span>),<span class="built_in">y</span>(<span class="number">0</span>),<span class="built_in">time</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">state Peo[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(visit)); </span><br><span class="line">    queue&lt;state&gt; que;</span><br><span class="line">    que.<span class="built_in">push</span>(<span class="built_in">state</span>(x, y, <span class="number">0</span>)); </span><br><span class="line">    visit[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        state STA = que.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">if</span>(maze[STA.x][STA.y] == <span class="string">&#x27;@&#x27;</span>)&#123;</span><br><span class="line">            KFC[STA.x][STA.y] += STA.time;</span><br><span class="line">            <span class="keyword">if</span>(type == <span class="number">2</span> &amp;&amp; min_time &gt; KFC[STA.x][STA.y])&#123;</span><br><span class="line">                min_time = KFC[STA.x][STA.y];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(STA.x &gt; <span class="number">0</span> &amp;&amp; maze[STA.x<span class="number">-1</span>][STA.y] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; !visit[STA.x<span class="number">-1</span>][STA.y])&#123;</span><br><span class="line">            visit[STA.x<span class="number">-1</span>][STA.y] = <span class="number">1</span>;</span><br><span class="line">            que.<span class="built_in">push</span>(<span class="built_in">state</span>(STA.x<span class="number">-1</span>, STA.y, STA.time+<span class="number">11</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(STA.y &gt; <span class="number">0</span> &amp;&amp; maze[STA.x][STA.y<span class="number">-1</span>] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; !visit[STA.x][STA.y<span class="number">-1</span>])&#123;</span><br><span class="line">            visit[STA.x][STA.y<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">            que.<span class="built_in">push</span>(<span class="built_in">state</span>(STA.x, STA.y<span class="number">-1</span>, STA.time+<span class="number">11</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(STA.x &lt; n<span class="number">-1</span> &amp;&amp; maze[STA.x+<span class="number">1</span>][STA.y] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; !visit[STA.x+<span class="number">1</span>][STA.y])&#123;</span><br><span class="line">            visit[STA.x+<span class="number">1</span>][STA.y] = <span class="number">1</span>;</span><br><span class="line">            que.<span class="built_in">push</span>(<span class="built_in">state</span>(STA.x+<span class="number">1</span>, STA.y, STA.time+<span class="number">11</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(STA.y &lt; m<span class="number">-1</span> &amp;&amp; maze[STA.x][STA.y+<span class="number">1</span>] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; !visit[STA.x][STA.y+<span class="number">1</span>])&#123;</span><br><span class="line">            visit[STA.x][STA.y+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            que.<span class="built_in">push</span>(<span class="built_in">state</span>(STA.x, STA.y+<span class="number">1</span>, STA.time+<span class="number">11</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        min_time = <span class="number">100000</span>;</span><br><span class="line">        <span class="built_in">memset</span>(KFC, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(KFC));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt;  maze[i][j];</span><br><span class="line">                <span class="keyword">if</span>(maze[i][j] == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Peo[<span class="number">0</span>].x = i;</span><br><span class="line">                    Peo[<span class="number">0</span>].y = j;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maze[i][j] == <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Peo[<span class="number">1</span>].x = i;</span><br><span class="line">                    Peo[<span class="number">1</span>].y = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">bfs</span>(Peo[<span class="number">0</span>].x, Peo[<span class="number">0</span>].y, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">bfs</span>(Peo[<span class="number">1</span>].x, Peo[<span class="number">1</span>].y, <span class="number">2</span>);</span><br><span class="line">        cout &lt;&lt; min_time &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
  </entry>
</search>
